
:tocdepth: 6

.. index:: model reference


#################
Model Reference
#################

.. index:: model descriptions, Model Reference, overview


In this chapter, |prod| models and options are described. Most of the models
and options can be activated using the :abbr:`GUI (Graphical Users
Interface)`.  However, some may be activated only by editing the
:file:`prepin.*` file in the GUI text editor. Tool tips are also included on
most of the GUI panels, telling the user the variable names and values that
are being set in the simulation input file.

Options that are inaccessible from the GUI are described in terms of the input
variables found in the :file:`prepin.*` file. Full descriptions of
these variables can be found in the :doc:`input-variable-summary-units` chapter of this
manual. To access the GUI text editor, in the :guilabel:`Simulation Manager` tab 
right-click on the simulation name and then click :guilabel:`Edit simulation...`. 
Alternatively, the keyboard shortcut :guilabel:`Ctrl+E` can be used. 
All models and options may be activated by
editing the :file:`prepin.*` file.


.. index::
   single: Model Reference; active simulation control

.. index:: active simulation control

.. index:: active simulation control; events

.. _activeSimulationControlMR:

========================================================
Active Simulation Control
========================================================

.. index::
   single: active simulation control; description and usage

Description and Usage
==================================

Active simulation control is designed to actively control the behavior of
objects (components, boundary conditions, etc.) using :guilabel:`Events`,
which are groups of actions that triggered by groups of conditions.  To
clarify the terminology:

* **Object**:  An entity in |prod| with adjustable properties.
  This would include moving components, boundary conditions, sources,    
  squeeze pins, and output data.
* **Condition**:  A logical condition based on information from a 
  history probe that can be evaluated as true or false.  For example, 
  :math:`T \leq 300K`, or :math:`U > 10 m/sec`.
* **Action**:  An action is a change in one of the properties of an object, 
  e.g. a flow rate or a velocity.
* **Event**:  An event is an occurrence that changes the status or properties of 
  the specified object, triggered by one or more conditions. For example,
  an event for a moving component could be:

  * Conditions: if :math:`T \leq 300K` or :math:`U > 10 m/sec`.
  * Actions:  Reduce the angular velocity of the moving component.

  In pseudo-code an event is basically an ``if`` statement::

    if(T <= 300 or U > 10) then
      Reduce angular velocity of the moving object
    endif

Some other examples of the active simulation control events are:

* Turning on a vent when the pressure at a probe exceeds a specified value
* Triggering the motion of an object when fluid reaches a probe
  (e.g. increasing the plunger action
  from slow to fast in high pressure die casting when metal reaches the gates)
* Opening or closing the dam gates or similar structures
* Controlling the addition of metal in gravity casting to stop pouring
  after metal reaches a particular height in the pour basin or 
  in the sprue to avoid spilling, etc.

Events are associated with components, boundary conditions, or other objects.
One object can have multiple events and each event contains one or multiple
probe conditions, and one or multiple actions, depending on the nature of the
object. For example, an event changing a boundary condition can contain two
actions: one is to change the pressure at the boundary, another is to change
the temperature at the boundary.

Any probe can be used for defining the probe conditions. If multiple probe
conditions are present, the logic between the probe conditions needs to be
specified. Currently only :menuselection:`All` (i.e. an ``and`` statement) or
:menuselection:`Any` (i.e. an ``or`` statement) are allowed. If
:menuselection:`All` is specified, then all probe conditions have to be
satisfied to trigger the event. On the other hand, if :menuselection:`Any` is
specified, then any probe condition is satisfied will trigger the event.

One condition or a group of conditions may trigger several different events on
different objects. To simplify the input and avoid errors, these conditions
can be defined as global conditions, which are available to all events
for all objects. Similarly, conditions defined for each event are called
local conditions.

Actions can change time-dependent properties and all properties that are time
dependent in the original settings remain time dependent when the action is
triggered. These time-dependent properties share the same time table in the
input file but the triggered action will start from :math:`t=0` in the time
table (i.e., the time the action is activated is regarded as time "zero" for
the action) regardless of the simulation time. Also, active simulation control
supports time dependent data from external files; the external files are
specified the same way as in the original definitions.

Multiple events can be triggered for one object at one time step if their
conditions are all satisfied. Once an event is triggered all of its actions will
be activated and their status be kept until the same action is activated by
another event (not itself). That means, even if another event is triggered for
the same object, the actions associated with the current triggering event may
still be active, unless the newly triggered event contains the same action. If
multiple events triggered at the same time contains the same action, the
action associated property defined in the last triggered event will be used.

Active simulation control events have been implemented for the following objects:

1. Cooling channel on/off
#. Termination of the simulation
#. Squeeze pin activation: probe variables are limited to the fluid temperature and solid fraction
#. Valves/vents: turn off or change the external pressure and/or temperature
#. Mass-momentum sources: change the flow rate and/or fluid velocities
#. Mass sources: change the flow rate 
#. GMO: prescribed motion only, change translational and angular velocities
#. Boundary conditions: change pressure, temperature, velocity, volume flow rate and/or flow velocities
#. Output control: change output intervals for restart, history and selected data

.. note:: Active simulation control events also support time-dependent data from external files.

.. index::
   single: active simulation control; model setup

Model Setup
==================================

Global conditions can be defined by clicking on the Global
conditions button |globalconditions_icon| on the settings toolbar, which will
bring up the global condition definition window.

  .. image:: images/model-reference/ModelReference_GlobalConditions_v12.*
     :scale: 66% 
     :alt: global-condition-definition

At most 10 global conditions can be defined, and for each global condition,
maximum of 10 probe conditions can be defined. For each probe condition, first
select an existing history probe from the :guilabel:`Probe ID` drop down box.
Then select the desired variable from :guilabel:`Probe Variable Name` drop
down box, keeping in mind that the available variables depend on the active
models. The :guilabel:`Relational Operator` and :guilabel:`Critical Value`
then needs to be specified to complete a probe condition definition. In
additional, :guilabel:`Use Absolute Value` can be specified to use absolute
variable value returned by the probe for logical comparison. :guilabel:`Time Delay`
specifies the time duration after the logic is satisfied to trigger the
condition. Each probe condition can be enabled or disabled. If multiple
enabled probe conditions are present, the :guilabel:`Global condition logic`
needs to be specified. Only :menuselection:`All` or :menuselection:`Any` are allowed. If :menuselection:`All` is specified, then
all enabled probe conditions have to be satisfied to trigger the global
condition. On the other hand, if :menuselection:`Any` is specified, then any enabled probe
condition is satisfied will trigger the global condition. If no probe
conditions are defined or all probe conditions are disabled, the global
condition will be disabled.

During the computation, whenever a global condition is triggered, a message
will be written to the screen, :file:`hd3msg.*`, :file:`hd3out.*`, and
:file:`report.*` files. The message includes the triggering time, cycle
number, global condition number, and global condition name.

  .. image:: images/model-reference/probe-event-global-condition-trigger-message.*
     :scale: 66%
     :alt: probe-event-global-condition-trigger-message

If a global condition is triggered, all events that choose to use the global
condition will be triggered.


The event definition is associated with each corresponding object that the
event is acting on. Generally, for each eligible object there is an
:guilabel:`Events` button either beside it, or on its property definition
panel. Click on the button will bring up the event definition window.

  .. image:: images/model-reference/ModelReference_EventButtons_v12.*
     :alt: probe-event-button

For each event, the setup includes local probe condition definition or global
condition selection, action and related property definition. If choose to use
global condition, then a global condition can be selected from predefined
global condition dropdown box. If choose to use local conditions, maximum of
10 local probe conditions can be defined for each event. The definition of
local probe conditions is the same as the definition of global probe
conditions. If choose to use global condition, but no global condition is
selected or the selected global condition is disabled, the event will be
disabled. If choose to use local conditions but no local probe conditions are
defined or all local probe conditions are disabled, the event will be disabled
too.

  .. image:: images/model-reference/ModelReference_GMOEvents_v12.*
     :alt: probe-event-definition

The available actions are different depending on the nature of the object. For
example, the available actions for valves are: :guilabel:`Off` to turn off the
valve, :guilabel:`Valve pressure` to adjust the external pressure at the
valve, and :guilabel:`Valve temperature` to adjust the external temperature at
the valve. However, the action :guilabel:`Off` cannot be used together with
the other two actions since :guilabel:`Valve pressure` and :guilabel:`Valve
temperature` will have no meaning since a closed valve does not need to
consider external pressure and temperature. 

  .. image:: images/model-reference/probe-event-action-valve.*
     :alt: probe-event-action-valve

For another example, only one action is allowed for active simulation control
of restart output because it only the restart data output interval can be
changed. However, there are two options from the :guilabel:`Select an Action`
drop down box. But the available section will be dependent on the
:guilabel:`Basis for Output`. If :guilabel:`Time` is chosen, the action
:guilabel:`Time Interval` will be available. If :guilabel:`Fill fraction` or
:guilabel:`Solidification fraction` is chosen, then action
:guilabel:`Fill/Solid fraction` will be available.

  .. image:: images/model-reference/probe-event-action-restart.*
     :alt: probe-event-action-restart

Once an action is chosen, the corresponding action property needs to be
specified. If the property is time dependent, a time dependent table can be
defined, similar as other general time dependent variables. Time dependent
table from external files are also supported. If no actions are defined or the
defined actions are invalid, the event will be disabled.

More events can be added by clicking on :guilabel:`Add Event` tab.

Since active simulation control events are defined on corresponding objects,
it is not straightforward to know how many events are defined for each object,
and what the actions will be triggered by the events. To make it convenient
for events management, all active events can be displayed in one window by
clicking :guilabel:`Show active probe events` icon on the toolbar of the
:menuselection:`Model Setup` window.

  .. image:: images/model-reference/active-probe-events-icon.*
     :alt: active-probe-events-icon

In the popup window, all active events are displayed in a table, which are
grouped by probe conditions. The probe id, event object, event, probe
variable, and event action are all shown in the table for each probe
condition. The table gives users a global view of active simulation control
events in terms of probes and probe conditions.

  .. image:: images/model-reference/active-probe-events.*
     :alt: active-probe-events

During the computation, whenever a new event is triggered, a message will be
written to the screen, :file:`hd3msg.*`, :file:`hd3out.*`, and :file:`report.*`
files. The message includes the triggering time, cycle number, action name,
event number, and event name. Depending on the actions defined in the event,
corresponding new properties are applied to the associated objects.

  .. image:: images/model-reference/probe-event-trigger-message.*
     :alt: probe-event-trigger-message

.. index::
   single: active simulation control; restart

Restart
==================================

For restart simulation, there is an option to choose if event status needs to
be maintained. if choose to maintain the event status, once a triggered event
is found in the restart source, a message will also be written to the
corresponding files. Note that if time is reset to zero at restart, the event
time will also be reset to zero, to be consistent with global restart setting.

  .. image:: images/model-reference/probe-event-restart-options.*
     :alt: probe-event-restart-options

Since active simulation control events are acting on specific objects, in order to
maintain correct event status for restart, certain rules have to be followed:

1. The definition of the object whose status has been changed by events has to be the same as in restart source, especially its order on the corresponding object tree, and its time table.
#. The definition of the event which triggers the object status change has to be the same as in restart source, including its order in the event list, unless all events for the corresponding object are removed for restart, in which case the status of the object will be kept unchanged as in restart source. 
#. If an object status has been changed in restart source, and the new properties are specified from external files, the corresponding events that triggering the changes have to be defined, and have to contain the same external files. 

The cooling channel on/off status and the squeeze pin activation status are always maintained for restart.

.. index::
   single: Model Reference; adiabatic bubbles
   single: models; adiabatic bubbles
   single: implicit options; bubble models

.. index:: adiabatic bubbles, bubbles

.. _adiabaticBubblesMR:

============================================
Adiabatic Bubbles
============================================

In one-fluid, free surface flows, resolved void regions that are surrounded by
fluid are called bubbles.  Bubbles must be resolved by a minimum of three
cells across the diameter of the bubble, though ten cells is a more practical
minimum  requirement for an accurate solution.  The :guilabel:`Adiabatic bubbles`  
option on the :guilabel:`Model Setup-->Physics-->Bubble and Phase Change` 
dialog denotes that the pressure-volume-temperature relationship for the
bubble will follow an adiabatic law.  In this case, the pressure in each bubble 
will be inversely proportional to its volume to the power of :guilabel:`Gamma`.
As such, it requires that the ratio of specific heats, :guilabel:`Gamma`, is set to
a positive number between 1.28 and 1.67.  Note that there is a special case 
when :math:`\gamma = 1` that corresponds to isothermal bubbles.

See the :ref:`BubbleAndoidRegionModelsTh` section in the :doc:`theory` chapter for more details 
on the adiabatic approximation. 

.. image:: images/model-reference/adiabatic-bubbles_v12-1.*
   :alt: Adiabatic bubbles

.. note:: 
   * This bubble models do not apply to bubbles that are in contact 
     with a specified pressure boundary with fluid fraction equal to zero.
     Those void regions always assume the boundary pressure. 
   * The implicit algorithm for computing the bubble pressure is recommended.
     It is active by default, but may be changed by modifying the 
     :guilabel:`Bubble pressure` selection on the :guilabel:`Numerics` tab.
     
.. seealso:: \  Theory manual section :ref:`BubbleAndoidRegionModelsTh`

.. index::
   single: Model Reference; air entrainment
   pair: air entrainment; entrained air
   single: models; air entrainment

.. index:: free-surface flow, mold filling

.. _airEntrainmentMR:

============================================
Air Entrainment
============================================

In some free-surface flows, gas may be entrained at the free surface due to
turbulence or certain flow conditions, *e.g.*, an impinging jet. This has a wide
variety of applications, from modeling the flow down a spillway, to bottle
filling and defect prediction in metal casting.

In |prod|, the entrainment of gas can be modeled the :guilabel:`Air entrainment` model.  The
:guilabel:`Air entrainment` model is activated on the :guilabel:`Model Setup-->Physics` 
widget and estimates the rate at which gas (represented by void regions) is entrained
into the flow using a balance of stabilizing forces
(gravity and surface tension) and destabilizing forces (turbulence). Although
the primary focus of the model is to compute the air entrainment resulting
from turbulent disturbances at a free surface, the model also contains logic
for handling entrainment resulting from laminar jets impinging on a free
surface. Therefore, the model may be used for both laminar and turbulent
cases. When modeling turbulent flows, the :guilabel:`Two-equation`
:math:`\left( {k - \varepsilon } \right)`,  :guilabel:`RNG` or 
:guilabel:`Two-equation` :math:`\left( {k - \omega } \right)`  turbulence models are
recommended. These models can be activated in 
:menuselection:`Physics --> Viscosity and Turbulence` and are discussed in more detail in
:ref:`turbulenceSectionMR`.

  .. image:: images/model-reference/air-entrainment.*
     :alt: Air entrainment

When using the :guilabel:`Air entrainment` model, the 
:guilabel:`Entrainment rate coefficient` must be defined to be a positive
value; the default value of 0.5 is a suitable starting point for most cases. The
:guilabel:`Surface tension coefficient` for fluid can also be defined to
include surface tension in the balance of forces defining the amount of
entrained air. It does not activate the surface tension model.

The air is entrained in terms of volume, then converted to mass using the equation of
state for air, to be tracked within the fluid. When converting it back to volume, the 
local fluid temperature and pressure is taken into account, thus thermal and pressure 
effects are taken into account in the evaluation of the entrained air volume. 

When the adiabatic bubble model is used, the air entrained at the surface of a bubble reduces
its pressure accordingly. 

If the heat transfer model is not activated, then
it is necessary to specify an approximate fluid temperature in :guilabel:`Reference Temperature`
to be used in the gas equation-of-state. Input pressure and temperature values 
are automatically transformed by the pre-processor to absolute units in order to make
use of the gas equation-of-state to convert entrained air volume into mass and back.

The :guilabel:`Air entrainment` model evaluates in each cell and outputs several quantities, namely,
*entrained air volume fraction*, *entrained air mass concentration* and *air entrainment volume flux*, 
which are available for post-processing in spatial and history plots. Air volume fraction can also be
defined at boundary conditions as :guilabel:`Concentration of air` as either a fixed or time-
dependent value when using the :guilabel:`Specified pressure`,
:guilabel:`Wave`, :guilabel:`Volume flow rate`, or :guilabel:`Specified velocity` 
boundary types.  :guilabel:`Concentration of air` can also be
defined as a fixed value in the :guilabel:`Source` properties of mass-momentum
sources. 

When using the variable density air entrainment model (see below), the density
adjustments for the inflowing fluid are calculated automatically to account
for the combined fluid and air densities. As a result, the specification of
:guilabel:`Volume flow rate` will be the total volumetric flow rate of the
fluid and entrained air mixture, and should be taken into account by the user
when defining the :guilabel:`Concentration of air` at boundaries.

In this basic mode, the model acts as a passive addition to the main flow model in
that it does not affect the fluid density and volume. Also, air is not allowed to escape back into atmosphere. 
This is sufficient when the amount of entrained air is relatively small (<10% by volume). 

Buoyancy effects can be included by selecting the :guilabel:`Activate bulking` and :guilabel:`Activate buoyancy`
options and defining the associated parameters.  The :guilabel:`Activate bulking`
option enables the :guilabel:`Density evaluation` model to account for the 
non-uniform fluid density resulting from the entrained air (see :ref:`flowWithDensityVariationsMR`). 
In this case, input the value for :guilabel:`Density of phase #2` in the model panel.

The :guilabel:`Activate buoyancy` option enables the :guilabel:`Drift-flux` 
model to account for the interaction between the two phases. It requires that the 
:guilabel:`Activate bulking` option is already enabled. In this case,
the air bubbles can move within fluid due to the difference in their
densities and affect the fluid motion. See the full description of the model 
in :ref:`driftFluxMR`. The entrained air can also escape back into the void,
as described in :ref:`escapeOfGasMR`.

.. note:: 
   * The reference temperature is required only if heat transfer is not activated in 
     :menuselection:`Model Setup --> Physics --> Heat Transfer`. It should be set to the mean
     liquid temperature, rather than gas temperature, as the entrained air temperature is likely
     to be dominanted  by it. 

.. seealso:: \  

   * :doc:`model-reference` ->  :ref:`turbulenceSectionMR`
   * :doc:`model-reference` ->  :ref:`flowWithDensityVariationsMR`
   * :doc:`model-reference` ->  :ref:`driftFluxMR`
   * :doc:`model-reference` ->  :ref:`escapeOfGasMR`
   * :doc:`model-reference` ->  :ref:`massMomentumSourcesMR`
   * Parameters in :ref:`AirEntrainmentModelParameters`.
   * TN-61 at |tn|


.. index::
   single: Model Reference; cavitation and bubble formation

.. index:: cavitation and bubble formation, boiling, void regions

.. _cavitationBubbleFormationMR:

========================================================
Cavitation and Bubble Formation (Nucleation)
========================================================

There are a few forms of cavitation modeling available in |prod|. Inertial,
thermal and potential; 1) When modeling Inertial Cavitation, the formation can
be passive to where voids do not open and the volume fraction of the gas is
tracked using a scalar quantity. Or, an active model can be used which creates
voids that open. 2) Temperature dependent cavitation is for nucleating vapor
due to heat. 3) The Cavitation Potential model does not track the gas quantity
or path advected. Instead it considers the likelihood of cavitation.

.. index::
   pair: cavitation; inertial

Inertial Cavitation: Opening of voids in high-velocity flows
================================================================

Cavitating void regions may open up in fluid when the local pressure drops
below a critical value, the cavitation pressure. The cavitation model is
activated in :menuselection:`Physics --> Cavitation --> Activate cavitation
model` and can **only** be used in *one-fluid free-surface* flows.
:guilabel:`Cavitation pressure` and :guilabel:`Characteristic time for
formation of cavitation bubbles` are also set in this dialog.

  .. image:: images/model-reference/cavitation.*
     :alt: Cavitation

To simulate cavitation, select :guilabel:`Activate cavitation model`.

Next, select either :guilabel:`Simplified model` or :guilabel:`Empirical
model`. The former is the default, and simulates the generation of cavitation
wherever the local fluid pressure drops below the :guilabel:`Cavitation
pressure`. The rate of formation of cavitation bubbles is controlled by the
:guilabel:`Characteristic time for formation of cavitation bubbles` parameter.
Smaller values for the characteristic time will simulate a more rapid growth
of cavitation (i.e., void regions are more likely to open).

If the :guilabel:`Empirical model` is selected, a new transport equation is
solved that computes the advection, production and dissipation of the
cavitation volume fraction. The model solves the following:

.. math:: \frac{D V_{\rm{cav}}}{D t} = Cav_{\text{production}} - Cav_{\text{dissipation}}

where

.. math:: Cav_{\text{production}} = C_e \frac{E_{\text{turb}}}{\sigma} \rho_l \rho_v \sqrt{ \left[ \frac{2}{3} \frac{P_{\rm{cav}}-P}{\rho_l} \right] } \left( 1 - f_{\rm{cav}} \right)

and

.. math:: Cav_{\text{dissipation}} = C_c \frac{E_{\text{turb}}}{\sigma} {\rho_l}^2 \sqrt{ \left[ \frac{2}{3} \frac{P - P_{\rm{cav}}}{\rho_l} \right] } f_{\rm{cav}}

Here :math:`V_{\rm{cav}}` is the computed cavitation volume fraction, :math:`C_p`
is the :guilabel:`Cavitation production coefficient`, :math:`C_e` is the
:guilabel:`Evaporation coefficient`, :math:`C_c` is the
:guilabel:`Condensation coefficient`, :math:`E_{\text{turb}}` is the
turbulent kinetic energy (or 10% of the total kinetic energy if no turbulence
model selected), :math:`\sigma` is the :guilabel:`Surface tension
coefficient`, :math:`P_{\rm{cav}}` is the specified :guilabel:`Cavitation
pressure`, :math:`P` is the local fluid pressure, and :math:`f_{\rm{cav}}` is the
mass fraction of cavitation in the computational cell, :math:`\rho_l` and 
:math:`\rho_v` are the densitities of the liquid and vapor, respectively.

There are a few inputs for the model:

* The selection under :guilabel:`Voids` controls what |prod| does when the
  cavitation volume fraction is predicted to exceed 1% of a cell's volume. If
  :guilabel:`Passive model` is selected, then voids are **not** opened, but the
  cavitation volume fraction is predicted and transported throughout the
  computational domain. This option is less numerically intensive and requires
  less computational time than the :guilabel:`Active model` (default) option,
  whereby void regions **are** opened where the cavitation volume fraction is
  predicted to exceed 1% of a cell's volume. This option uses more computational
  resources, but will more accurately predict cavitation because the opening of
  voids will relax the fluid pressure in the vicinity, possibly reducing further
  cavitation in the surrounding fluid. However, the :guilabel:`Passive` option
  is useful, especially for high pressure die casting where tracking the regions
  of greatest cavitation, and where the bubbles are transported are key, yet
  keeping CPU time to a minimum is critical.

* The :guilabel:`Cavitation pressure` is constant unless the :guilabel:`Thermal
  bubbles with phase change` option is selected (see :ref:`tempdepcavitationMR`
  below), along with energy transport. All cavitating void regions will have the
  same pressure and each region is treated as a fixed pressure bubble, with the
  pressure equal to specified :guilabel:`Cavitation pressure`.

* The :guilabel:`Characteristic time for formation of cavitation bubbles`
  parameter is needed **only** when the :guilabel:`Simplified model` option is
  selected. It controls the rate at which cavitating bubbles grow. Since the
  nucleation of bubbles depends of physics not entirely modeled in |prod| (number
  of nucleation sites, cleanliness of system, etc.), the user needs to provide a
  characteristic time in which the bubble size reaches equilibrium with the
  surrounding fluid. By default, this time is 5 times the current time step. The
  user may specify another value if desired.  However, the greater of the two is
  used to minimize numerical noise.

* The :guilabel:`Surface tension coefficient` is a duplicate of same value used
  for the :ref:`surfaceTensionMR`, and is needed for the :guilabel:`Empirical
  model`, regardless if the :ref:`surfaceTensionMR` model is turned on. This
  represents the physical surface tension coefficient at the typical
  temperatures where cavitation is expected.

* The :guilabel:`Density of cavitation bubbles` represents the mean density of
  the bubbles that form (at the specified :guilabel:`Cavitation pressure`); it
  is needed **only** for the :guilabel:`Empirical model` option.

* The :guilabel:`Cavitation production coefficient` is needed **only** for the
  :guilabel:`Empirical model` option and is an empirical coefficient that
  controls the production term in the model for cavitation volume fraction (see
  :ref:`CavitationVoidRegionsTh`) whose default value is 0.02. Generally, this
  value need not be changed unless you have data to confirm that the model is
  over- or under-predicting the rate of cavitation production (ie., the rate at
  which cavitation volume fraction grows when the local pressure falls below the
  :guilabel:`Cavitation pressure`).

* The :guilabel:`Cavitation dissipation coefficient` is needed **only** for the
  :guilabel:`Empirical model` options and is an empirical coefficient that
  controls the dissipation term in the model for cavitation volume fraction (see
  :ref:`CavitationVoidRegionsTh`) whose default value is 0.01. Again, this value
  needed not be changed unless you have data to suggest that the model is over-
  or under-predicting the rate of cavitation dissipation (ie., the rate at which
  cavitation volume fraction shrinks when the local pressure rises above the
  :guilabel:`Cavitation pressure`).

* The :guilabel:`Activate cavitation potential model` option is independent of
  the rest of the cavitation model: its purpose is merely to passively show
  where cavitation is most likely to occur within the domain. Cavitating voids
  are **not** produced, nor is the cavitation volume fraction tracked as it is
  advected throughout the domain. This option can be used with, or separately
  from the aforementioned :guilabel:`Cavitation model`.

.. note::  
   * The definition of a reference pressure is strongly recommended 
     when modeling cavitation.  This can consist of a specified-pressure 
     boundary condition or a constant pressure void.  
   * If the :guilabel:`Empirical model` is selected, for better accuracy 
     it is recommended that a turbulent transport model (see :ref:`turbulenceSectionMR`) be used.

.. index::
   pair: cavitation; temperature-dependent

.. _tempdepcavitationMR:

Temperature-Dependent Cavitation
========================================================

If the :guilabel:`Thermal bubbles with phase change` model is activated in
:menuselection:`Physics --> Bubble and phase change models`, the cavitation
pressure becomes a function of the local fluid temperature and computed from
the vapor saturation curve that must be defined in :menuselection:`Fluids
-->Properties for--> Phase Change`.  The constant :guilabel:`Cavitation pressure`
input parameter is *not* used in this model. The general model should be used
when bubbles are formed by heating the fluid like in thermal bubble printers.

  .. image:: images/model-reference/bubble-and-phase-change_v12-1.*
     :alt: Bubble and phase change

|

  .. image:: images/model-reference/vaporization-at-free-surfaces-phase-change_v12-1.*
     :alt: Cavitation pressure

In this case, the :guilabel:`Cavitation` model is coupled to
the :ref:`condensationEvaporationOneFluidThermalBubblesMR`. The value of the phase change
:guilabel:`Accommodation coefficient for evaporation` and :guilabel:`Accommodation coefficient for condensation` values are typically between 0.01 and 0.1.
:guilabel:`Exponent for T-P Curve` is the exponent in the temperature-pressure
saturation relationship. The default saturation curve is a Clausius-Clapeyron
relation between pressure :math:`P` and temperature :math:`T`:

.. math:: {P_{sat}}(T) = P_{V1} \cdot exp \left[\frac{1}{T_{\text{EXP}}} \left( {\frac{1}{T_{V1}} - \frac{1}{T}} \right)\right]

where:

* :math:`P_{V1}` and :math:`T_{V1}` (entitled :guilabel:`Saturation Pressure` and 
  :guilabel:`Saturation Temperature` on the properties listed above) are the pressure 
  and temperature values at a point on the saturation curve.
* :math:`T_{\text{EXP}}` is entered as :guilabel:`Exponent for T-P Curve`; its value 
  should typically be :math:`T_{\text{EXP}} = (\gamma - 1) \frac{C_v}{\Delta H_v}`. 
* :math:`\gamma` is :guilabel:`Gamma`, the ratio of the vapor specific heats (\ :math:`\frac{C_p}{C_v}`\ ).
* :math:`C_v` is the :guilabel:`Vapor specific heat` at constant volume.
* :math:`\Delta H_v` is the :guilabel:`Latent Heat of Vapor`.
* :math:`T` is the temperature.
* :math:`\rho_{vap}` density of the vapor in the bubble. 

After opening, each cavitating region has its own pressure, :math:`P`, which
is a function of heat and mass transfer and the volume of the bubble: :math:`P
= (\gamma - 1)  {\rho_{vap}} C_v T`.

Boiling, or cavitation, in the liquid bulk can be delayed past the saturation
temperature by using the :guilabel:`Superheat temperature`. A value
of the :guilabel:`Superheat temperature` greater than the local boiling temperature
allows the liquid in the bulk to heat to that temperature before vapor bubbles begin to
form at that location. Before the liquid temperature reaches the superheat
temperature, the formation of the vapor bubbles is controlled by the
:guilabel:`Characteristic time for formation of cavitation bubbles` defined in
:menuselection:`Physics --> Cavitation`. After the :guilabel:`Superheat temperature` is
exceeded, vapor bubbles appear and grow on a time scale of five time-step
sizes.

Superheating can be selectively turned off near solid walls by using a non-zero 
wall roughness. Component roughness is defined in :menuselection:`Model Setup --> 
Geometry --> Component --> Surface Properties --> Surface
Roughness`. See :ref:`componentRoughnessMR`.

Similarly to superheating, liquefaction of the evaporated fluid can be designed to occur below the 
:guilabel:`Saturation Temperature` by setting a :guilabel:`Supercooling temperature`. When a :guilabel:`Supercooling temperature` lower 
than the boiling point of the bulk fluid is defined, the fluid will remain in the vapor phase and continue to cool down 
until the specified :guilabel:`Supercooling temperature` is reached. However, contrary 
to superheating, supercooling is not subject to the same characteristic time or 
time-step constraints described above. Once, the vapor reaches the 
given :guilabel:`Supercooling temperature` liquefaction occurs immediately. 
It is important to note that unlike superheating, supercooling applies only to 2 Fluid 
simulations and only in areas of bulk vapor where local temperature gradients are possible. 
Fluid condensation will behave normally on all other surfaces such as the liquid-vapor interface 
and solid walls.

.. note:: 
   * Only the :guilabel:`Simplified  model` can be used in conjunction with :guilabel:`Thermal bubbles with phase change`.
   * In the general cavitation model newly created vapor bubbles are 
     assigned heat transfer void type 1.
   * The definition of a reference pressure is strongly recommended 
     when modeling cavitation.  For thermal cavitation, this will be 
     a specified-pressure boundary condition.

.. seealso:: \  

   * :ref:`heatTransferToVoidsMR`
   * :ref:`condensationEvaporationOneFluidThermalBubblesMR`
   * Parameters in :ref:`CavitationProperties`
   * Parameters in :ref:`PhaseChangeProperties`

.. index::
   single: models; cavitation potential

.. index:: cavitation potential model, die erosion, high pressure die casting

.. index::
   single: models; cavitation potential

.. index:: cavitation potential model, die erosion

.. index::
   pair: cavitation; potential

.. _cavitationPotential:

Cavitation Potential Model
========================================================

If modeling cavitation directly is not desirable due to numerical constraints,
the :guilabel:`Cavitation potential` model can be used instead. This model is
activated in :menuselection:`Physics --> Cavitation`. It offers an efficient
way of modeling possible cavitation by predicting the **likelihood** of
cavitation, or the **cavitation potential**, without actually introducing
bubbles into the flow. The model evaluates the integral over time of the
difference between the Cavitation pressure and the local fluid pressure:

.. math:: S = \int\limits_0^t {\max (0,PCAV - p(ijk))dt} 

The larger the value of this variable, the larger the potential for cavitation
can be. The integral is taken from the beginning of the simulation.

The cavitation potential model can be used to predict die erosion due to
cavitation during high-pressure die casting filling, where metal pressure
often drops several atmospheres below the vapor pressure in areas of very fast
flow, usually near the gates, causing the metal to cavitate. The most reliable
indications of possible die erosion are highly localized "hot spots" of the
cavitation potential, that is, small areas of very high values of this
quantity. To activate this model, go to 
:menuselection:`Physics --> Cavitation--> Activate cavitation potential model` 
and enter a value for the cavitation pressure.


.. index::
   single: Model Reference; combustible objects

.. index:: combustible objects

.. _combustibleObjectsMR:

========================================================
Combustible Objects
========================================================

Combustible objects can be used to model the combustion process in solid-fuel 
rockets. Please refer to the :ref:`CombustibleObjectModel` of the :doc:`theory` chapter
for details of the model.

In order to use combustible objects the :ref:`compressible flow model <compressibleFlowMR>` 
needs to be activated and the model itself can be turned ON by selecting the :guilabel:`Combustible objects`
button in the :guilabel:`Physics` tab.
   
The combustible object needs to be defined as a special type of component and the reaction 
parameters need to be specified. This can be done in the :guilabel:`Geometry` tab and the 
following image provides a screenshot of the various parameters required.

  .. image:: images/model-reference/combustible-objects-MG.*
     :alt: Combustible objects definition

**Note:** The reaction rate is only a function of the local gas pressure. A high initial gas 
pressure needs to be defined to ignite the fuel and sustain the reaction. Implicit advection 
solver, although not necessary, can be used to reduce run times. 

.. seealso::  \  
   
   * :ref:`CombustibleObjectModelParameters`
   * :ref:`ComponentPropertiesCombustibleComponents`
   
.. index::
   single: Model Reference; compressible flow

.. index:: compressible flow

.. _compressibleFlowMR:

========================================================
Compressible Flows
========================================================

Fully-compressible flows
===========================

The compressible flow model treats fluid #2 as an ideal, compressible
gas. Since only fluid #2 can be compressible, this option can only be used
together with the two-fluid model.  To enable the model, go to :guilabel:`Model Setup --> Physics` and
select :menuselection:`Two fluids` and :menuselection:`Compressible` from the dropdown menus at the top of
the window.

  .. image:: images/model-reference/compressible-flow.*
     :alt: Compressible flow

The fluid properties are set on the :guilabel:`Fluids` widget.  The
compressible flow model requires the specific :guilabel:`Gas Constant` and
the thermal properties of the fluid.

Input vlaues of pressure are automatically converted to absolute units in pre-processor. 
Similarly, for temperature, the input is automatically converted to absolute units based
on the temperature units (see :ref:`unitsms`). The conversion enable the use of the equation-of-state
whenever it is needed.

.. seealso:: \  

   * :doc:`model-reference` ->  :ref:`twoFluidFlowMR`.
   * Parameters in :ref:`StateEquationProperties`

.. index::
   single: Model Reference; condensation/evaporation

.. index:: condensation/evaporation, one fluid with thermal bubbles, bubbles, vapor, phase change

.. index::
   single: Model Reference; acoustic waves
   single: models; limited compressibility

.. index:: acoustic waves, limited compressibility

.. _acousticWavesMR:

Acoustic Waves (Limited Compressibility)
============================================

The limited compressibility model is used to model acoustic waves in a fluid
that otherwise can be treated as incompressible. It is typically used for
flows of liquids in problems where sharp pressure changes occur or can be used
to simulate flows of gases where pressure fluctuations are small. The model is
activated by setting :guilabel:`Compressibility` coefficients for either or
both fluids in the fluid properties at the :guilabel:`Fluids` widget. These
coefficients are defined as :math:`1/\rho {c^2}` of fluid #1 and fluid #2,
where |rho| is the respective fluid density and :math:`c` is the adiabatic
speed of sound. These parameters are assumed to be independent of pressure,
density or temperature, so they should be set to values for the expected
pressure, density and temperature during the simulation.

  .. image:: images/model-reference/ModelReference_ImplicitCompressibility_v12.*
     :alt: Limited compressibility

Limited compressibility can also be used as a numerical tool to improve
pressure convergence in "stiff" flow problems. The idea is to allow a small
amount of "give" in the fluid to dampen out sharp pressure fluctuations,
easing convergence. This can be done automatically by selecting the
:guilabel:`Implicit with automatic limited compressibility` option in
the :guilabel:`Pressure solver type` drop-down list at the 
:guilabel:`Pressure solver options` group of options in
:guilabel:`Numerics`. In this case, there is no need for the user to define
the compressibility coefficient in the fluid properties.

  .. image:: images/model-reference/ModelReference_LimitedCompressibility_v12.*
     :alt: Automatic limited compressibility

.. note:: 
   * Unpyhsically large values for the compressibility may result in poor
     conservation of fluid mass.
   * The time-step size should be limited to the characteristic time scale of 
     the acoustic waves to ensure accuracy if acoustic waves are of primary
     importance.  This is done by restricting the the time-step size using
     the :guilabel:`Maximum time step` option on the :guilabel:`Numerics` widget.
     The characteristic time scale can be estimated as the time
     it takes for an acoustic wave to propagate through the distance of one
     cell.

.. seealso:: \  :envvar:`RCSQL` and :envvar:`RCSQV` in :ref:`StateEquationProperties`.

.. _condensation_evaporationMR:

==========================================================
Condensation/Evaporation at Free Surfaces
==========================================================

.. index::
   single: Model Reference; vaporization at free surfaces

.. index:: 
   pair: vaporization at free surfaces; free surfaces

.. _vaporizationAtFreeSurfacesMR:

Evaporation into Constant Pressure Bubbles
========================================================

The simplest phase change model in |f3d| describes the evaporation into constant-pressure void regions.
The void region pressure and temperature are prescribed by the user and do not change due to phase change.
The main assumption in this approach is that the void regions are sufficiently large that the phase change
does not significantly change their properties. The drying of rain puddles into the air are an example of
such process.

The evaporation mass flux is governed by Eq. :eq:`simplifiedPhaseChange` in which the saturation pressure :math:`P_l^{\rm{sat}}` is
defined from the vapor saturation curve and the temperature of the liquid at the surface, and the vapor pressure :math:`P_v`
is the user-defined :guilabel:`Void vapor partial pressure`.


To activate this model, select :menuselection:`Physics --> Bubble and phase change
models --> Constant pressure bubbles with vaporization` to activate this model.
The :menuselection:`Saturation Temperature` in :menuselection:`Fluids --> Properties for --> Phase Change`
defines the saturation state of the vapor in the
void regions. The latent heat of vaporization is specified in
:menuselection:`Fluids --> Properties for --> Phase change --> Latent heat of vaporization`.

  .. image:: images/model-reference/vaporization-at-free-surfaces-bubble-phase-change_v12-1.*
     :alt: Bubble and phase change - Constant pressure bubbles

The fluid energy equation (\ :guilabel:`Heat transfer`) must be solved in
conjunction with this model (\ :menuselection:`Physics --> Heat Transfer`).
Define positive values for the :guilabel:`Accommodation coefficients`, found in
:menuselection:`Fluids --> Properties for --> Phase Change`.

  .. image:: images/model-reference/vaporization-at-free-surfaces-phase-change_v12-1.*
     :alt: Phase Change

The evaporative mass flux in each surface cell is saved for post-processing and
can be visualized in :menuselection:`Analyze`.

Vaporizations may take place only in cells containing free surface. No condensation is
taken into account in this model. The vapor partial pressure is the same and constant 
for all voids, both with constant and variable pressure, *e.g.*, prescribed by
a :guilabel:`Void pointer`.


.. _condensationEvaporationOneFluidThermalBubblesMR:


Phase Change with Thermal Bubbles
==========================================================

Mass transfer due to liquid-vapor phase change can occur between a bubble and
the surrounding liquid.  It is assumed that the bubble is completely filled only with vapor
phase of fluid #1, *i.e.*, there is only one gas component, and that the
bubbles have uniform pressure, temperature, and density. There can be many
bubbles, and the vapor in each bubble has a unique, time-varying state
because of volume changes and heat and mass transfer. Bubbles in contact with
a specified pressure mesh boundary with a fluid fraction of zero will take on
the vapor state defined at that boundary. The vaporization/condensation model
is activated in :menuselection:`Physics-->Bubble and phase change
models-->Thermal bubbles with phase change`.

  .. image:: images/model-reference/bubble-and-phase-change_v12-1.*
     :alt: Condensation and evaporation

Bubbles are initialized by specifying their initial pressures and temperature, relative or absolute. 
Vapor can also be created in the fluid through cavitation or boiling as described in :ref:`cavitationBubbleFormationMR`.
The vapor properties and saturation curve are defined under :menuselection:`Fluids --> Properties for --> Phase change`.

The :guilabel:`Accommodation coefficients` are coefficients of proportionality for
the rate of phase change. Values between 0.01 and 0.1 usually provide good
results. Positive values for the :guilabel:`Accommodation coefficients` and the
:guilabel:`Latent heat of vapor` in :menuselection:`Fluids --> Properties for --> Phase Change`
must be defined. A non-zero value of the :guilabel:`Vapor specific heat` is also required. 

  .. image:: images/model-reference/vaporization-at-free-surfaces-phase-change_v12-1.*
     :alt: Condensation and evaporation properties

Heat transfer between geometry components and the vapor in a bubble is
specified by the component-to-void heat transfer coefficients in
:menuselection:`Geometry --> Component --> Surface
properties`. The same is true for heat transfer between liquid and vapor in a
bubble, which is specified by a fluid-to-void heat transfer coefficient.
Note that newly created vapor bubbles are assigned heat transfer void type 1.
:menuselection:`Physics --> Heat transfer --> Fluid to solid heat transfer`
must be activated to enable heat transfer between vapor bubbles and solid components.

Phase change mass flux is based on the average fluid properties (density, thermal
energy, and liquid fraction) in a computational cell. In particular, it is
assumed that the temperatures of the liquid and vapor are uniform in an element. In this
sense, the phase change model is phenomenological and requires the adjustment
of the :guilabel:`Accommodation coefficients` to control the rates of evaporation and condensation 
through the :guilabel:`Accommodation coefficient for evaporation` and the :guilabel:`Accommodation coefficient for condensation`, respectively. 
It is not recommended to use a value larger than 1, because convergence of the phase
change model may be difficult to attain. Typical values used are between 0.01 and 0.1.

.. seealso:: \  

   * :doc:`model-reference` ->  :ref:`cavitationBubbleFormationMR`
   * :doc:`model-reference` ->  :ref:`adiabaticBubblesMR`
   * Parameters in :ref:`PhaseChangeProperties`

.. index::
   single: Model Reference; condensation/evaporation

.. index:: condensation/evaporation, two-fluid model, bubbles, vapor, phase change

.. _condensationEvaporationTwoFluidsMR:


Two-fluid Model
========================================================

This model is similar to the one-fluid model of Condensation/Evaporation (\
:ref:`condensationEvaporationOneFluidThermalBubblesMR`\ ), except that the
full dynamics in the vapor regions are computed. In this case, the
two-fluid model with an incompressible liquid and a
compressible vapor can have liquid-vapor phase change occurring at the
interface. Nucleation in pure liquid regions or condensation in pure vapor
regions is also allowed. Fluid #1 describes the liquid state of the fluid and
compressible fluid #2 (gas) describes the vapor.

The two-fluid phase change model is initiated in :menuselection:`Physics -->
Bubble and phase change models --> Two-fluid phase change` and requires 
positive values for the Accommodation coefficients in :menuselection:`Fluids --> Properties for --> Phase change`. 
The phase-change rate is directly proportional
to the accommodation coefficients. The values of the coefficients are typically in
the 0.01 to 0.1 range, and should not exceed 1.0, although this is not an
absolute limit. Vapor properties are defined as properties of the compressible
fluid #2, and the vapor latent heat and the saturation curve are defined under
:menuselection:`Fluids --> Properties for --> Phase change`. The 
pressure-temperature pair, defined by the Saturation Pressure and Saturation
Temperature, must be a point on the saturation curve. Exponent for :math:`T-P` curve
is the exponent in the Clapeyron temperature-pressure saturation relationship, :eq:`clapeyronEquation`. 

  .. image:: images/model-reference/vaporization-at-free-surfaces-phase-change_v12-1.*
     :alt: Condensation and evaporation properties in the Two-Fluid Model

Phase changes are based on the average fluid properties (density, thermal
energy, and liquid fraction) in a control volume. In particular, the
temperatures of the liquid and vapor are assumed to be uniform in an element.
The mass transfer rate at the liquid/vapor interface is computed based on the
difference between the local saturation pressure of the liquid and the vapor
pressure, :eq:`simplifiedPhaseChange`.

The rate per unit area at which fluid mass changes phase at the liquid-vapor interface is
computed and stored for post-processing as a spatial variable called
:guilabel:`Phase change mass flux`. Positive values indicate evaporation and negative, condensation.

Phase change in the liquid bulk can be delayed past the saturation temperature
by specifying the :guilabel:`Superheat temperature`. A value of the
:guilabel:`Superheat Temperature` greater than the local saturation
temperature allows the liquid in the bulk to heat until that temperature
before vapor bubbles begin to form. Superheating can be selectively turned off
near solid walls by using a  non-zero wall roughness. Component roughness is
defined in 
:menuselection:`Model Setup --> Geometry --> Component # --> Surface Properties --> Surface Roughness`.

.. seealso:: \  
   
   * :doc:`model-reference` ->  :ref:`componentRoughnessMR`.
   * :doc:`model-reference` ->  :ref:`condensationEvaporationOneFluidThermalBubblesMR`
   * :doc:`model-reference` ->  :ref:`condensationEvaporationTwoFluidsNonCondensableGasMR`
   * Parameters in :ref:`PhaseChangeProperties`

.. index::
   single: Model Reference; condensation/evaporation
   single: models: condensation/evaporation

.. index:: condensation/evaporation, two-fluid with non-condensable gas, bubbles, vapor, phase change

.. _condensationEvaporationTwoFluidsNonCondensableGasMR:


Two Fluids with Non-condensable Gas
====================================================================

  .. image:: images/model-reference/condensation-evaporation-non-condensable-gas_v12-1.*
     :alt: Condensation and evaporation non-condensable gas

Normally, the condensation/evaporation model (two-fluid model) assumes that
fluid #2 is composed entirely of the vapor phase of the liquid. For situations
where the gaseous phase is composed of a mixture of vapor and a 
non-condensable gas (e.g., water vapor in air), select 
:menuselection:`Physics -->Bubble and phase change-->Two-fluid phase change-->Non-condensable gas model`.
Additions to the two-fluid vapor model include the computation of a mixture
gas constant, which is evaluated as a density-weighted average of the gas
constants of the vapor and the non-condensable gas: 

.. math:: \overline{R_F} = \frac{\rho_{vap} R_{\text{vap}} + \rho_{nc} R_{nc}} {\rho}

where:

* :math:`{\rho_{vap}}` the computed macroscopic vapor density.
* :math:`{\rho_{nc}}` computed non-condensable gas macroscopic density.
* :math:`RF2` is the gas constant for the vapor 
* :math:`\overline {RF}` is the mean gas constant. 

Therefore, the pressure is computed as :math:`P = \overline {RF} \rho T`.
Although the saturation pressure of the vapor is computed the same as it was as in
the standard two-fluid model with phase change (:ref:`condensationEvaporationTwoFluidsMR`), 
the evaporation mass flux is computed using the partial
pressures of the vapor as opposed to using the full gas pressure,

.. math:: {\text{Mass transfer rate}} = \frac{RSIZE}{\sqrt {2 \pi \overline{RF} \cdot T }} \left( P_{sat}(T) - P_{vap} \right)

where:

* :math:`{P_{vap}}` is the partial pressure of the vapor in the gaseous fluid, 
* :math:`{P_{sat}}(T)` is the saturation pressure at the local temperature, computed from the Clausius-Clapeyron Equation, which is defined in the user-customizable subroutine :file:`PSAT.F90`. This equation is shown in :ref:`condensationEvaporationTwoFluidsMR`.
* :math:`RSIZE` is the :guilabel:`Accommodation coefficient for evaporation`, which is typically set to a value between 0.01 and 0.1.


If the :guilabel:`Accommodation coefficient for evaporation` were to have a value of 1.0, the model
would attempt to predict sufficient phase change to reach equilibrium within
one time step. This rate would likely be too fast compared to the actual
physical conditions. It is impossible for |prod| to predict accurately the
phase change rate without this coefficient as the dynamics within the boundary
layer at the liquid/gas interface are too small in scale to include in the
model.

  .. image:: images/model-reference/ModelReference_BCAuxiliary_v12.*
     :alt: Boundary condition specification of non-condensable gas

|

  .. image:: images/model-reference/ModelReference_InitialGlobalFluid_v12.*
     :alt: Initial condition specification of non-condensable gas

To use this model, select the check box in :menuselection:`Physics --> Bubble
and phase change models --> Non-condensable gas model`. Enter the values for
the :guilabel:`Gas constant` and 
:guilabel:`Specific heat of the non-condensable gas`. Where gas enters at domain boundaries, you can specify the
volume fraction of the non-condensable gas (between 0 and 1) in 
:guilabel:`Non-condensable gas fraction` in the auxiliary section of 
each of the mesh block boundaries. To define initial non-condensable gas volume fraction,
specify the :menuselection:`Model Setup--> Initial --> Global`. This
quantity can also be specified in individual initial fluid regions and
pointers.

.. seealso:: \  

   * :doc:`model-reference` ->  :ref:`condensationEvaporationTwoFluidsMR`
   * Parameters in :ref:`PhaseChangeProperties`

.. index::
   single: Model Reference; vaporization residue

.. index:: vaporization residue

.. _vaporizationResidueMR:


Vaporization Residue
========================================================

When a liquid solvent evaporates any solute that it contains becomes more
concentrated. Likewise, in |prod|, solutes modeled with a scalar concentration
variable will automatically be concentrated by evaporation at free surfaces of
one-fluid problems. If a surface element is less than half filled with liquid,
then the concentration of the scalar will also occur in the principal neighbor
of the surface element to the extent that the concentration change is spread
over a region equal to half the thickness of the surface element.

If enough evaporation occurs and the solute becomes dense, it may result in a
surface skin or a residue may form on a solid surface if the solute evaporates
completely away. Residue formation can be simulated in conjunction with the
:guilabel:`Constant pressure bubbles with vaporization`, and
:guilabel:`Thermal bubbles with phase change` models that are activated in
:menuselection:`Physics --> Bubbles and phase change`. The residue model can then be 
activated through :menuselection:`Physics --> Scalars` by clicking on the 
:guilabel:`Activate vaporization residue model` checkbox and defining the 
maximum packing density for the solute scalar. Once the solute is concentrated to
its maximum packing density, then any further concentration results in a
residue that is fixed (not moving). If more than one scalar solute is present
then the residue records the total of all solute contributions to the residue.

  .. image:: images/model-reference/ModelReference_ResidueModel_v12-0-1.*
     :alt: Residue model options in scalars window

In conjuction with the residue model, the contact line pinning surface boundary 
condition should be activated for the :guilabel:`Geometry` component where 
evaporation is expected to occur, thus, leaving a residue. This surface 
boundary condition is used to pin the free surface of a droplet onto the surface 
of the solid. This is achieved by setting the outward velicity of the fluid to zero. 
In that manner, the fluid free surface can only recede from the orginal location, 
when evaporation occurs, or roll over the pinning point, if more fluid is added. 
It is important to note that this surface boundary condition works in conjuction with the 
:guilabel:`Surface tension` model and that the value of the :guilabel:`Contact angle` significantly 
affects the behavior of the pinned free surface. The option can be activated in 
:menuselection:`Geometry --> Component Properties --> Surface Properties`. 

  .. image:: images/model-reference/ModelReference_Pin-contact-line_v12.*
     :alt: Surface boundary condition specification for pinning the contact line


.. note:: The initial solute concentration is entered using |prod|\ 's 
   :guilabel:`Scalars` model from :menuselection:`Physics --> Scalars`.

.. seealso:: \  

   * :ref:`condensationEvaporationOneFluidThermalBubblesMR` 
   * :ref:`vaporizationAtFreeSurfacesMR`.
   * :doc:`theory` manual section: :ref:`ScalarAdvectionTh`.
   * :ref:`scalarsMR`

.. index::
   single: Model Reference; cooling channels

.. index:: cooling channels, heat transfer coefficients, die casting, permanent mold

.. _coolingChannelsMR:

========================================================
Cooling Channels 
========================================================

In permanent mold and die casting, cooling channels are used to cool the mold
as well as extract heat from hot spots that can potentially create shrinkage
porosity in the cast part. In |prod|, the flow in a cooling channel is not
modeled explicitly, but instead the cooling action is modeled approximately by
using a uniform effective heat transfer coefficient and temperature of the
cooling channel. This section shows the user how to do the following:

* Define cooling channels 
* Determine heat transfer coefficients between cooling channels and mold

.. index::
   single: cooling channels; how to define

Cooling channel definition
========================================================

To create cooling channels the following steps need to be followed.

1. Activate :guilabel:`Heat Transfer` from :menuselection:`Model Setup --> Physics` tab.

   .. image:: images/model-reference/heat-transfer.*
      :alt: Heat transfer


#. Add the cooling lines as subcomponents of the component that describes the die,
   using either STL files or primitives. A cooling channel with unique properties 
   (temperature, heat transfer coefficient, control type, etc.) should be defined 
   as a separate subcomponent. Cooling channels with identical properties can be 
   modeled as a single subcomponent. Select :guilabel:`Cooling channel` for each
   such subcomponent.

   .. image:: images/model-reference/cooling-waterlines.*
      :alt: Cooling waterlines 


#. Define :guilabel:`Cooling channel temperature`.
#. Define :guilabel:`Cooling channel heat transfer coefficient`.
#. Select :guilabel:`Cooling channel control type`. 

   .. image:: images/model-reference/cooling-channel-control-type.*
      :alt: cooling channel control type

#. If :guilabel:`Controlled by time` is selected, then define the cooling channel time control table. 

   .. image:: images/model-reference/cooling-channel-time-control-table.*
      :alt: cooling channel time control table
      :height: 300
      :width: 520

#. If :guilabel:`Controlled by thermocouple` is selected, then select the history
   probe number (probe(s) must be defined inside the mold prior to this), and 
   turn-on and turn-off temperatures.

   The probe defines the location where the wall temperature is monitored. If
   cooling mode is selected, the cooling channel is turned on when the wall
   temperature at the specified probe reaches the turn-on temperature, and is
   kept on as the temperature decreases, until the turn-off temperature is
   reached. Thus, the turn-on temperature needs to be higher than the turn-off
   temperature. If heating mode is selected, the cooling channel is turned on
   when the wall temperature at the specified probe goes below the turn-on
   temperature, and kept on as the temperature rises, until the turn-off
   temperature is reached. Thus, the turn-on temperature needs to be lower
   than the turn-off temperature.

   .. image:: images/model-reference/cooling-channel-thermocouple.*
      :alt: cooling channel controlled by thermocouple

   Whenever there is a status change for a cooling channel, a message will be
   written to the screen, :file:`hd3msg.*`, :file:`hd3out.*`, and :file:`report.*` files. The cooling
   channel status will also be written to the :guilabel:`General history`.

   .. note:: 
      * If the specified probe is not defined or invalid, the cooling channel will be turned off.
      * If the turn-on and turn-off temperatures are not set correctly, the cooling 
        channel will be turned off.

#. If :guilabel:`Controlled by total heat` is selected, then define the
   critical total heat, and the cooling channel on/off status time table.

   If this control option is chosen, the cooling channel will be turned off if
   the total heat removed (cooling) or added (heating) is greater than the
   critical total heat. It works in combination with the status time table. In
   other words, the status time table can still be provided as normal, and
   works together with the total heat control. The cooling channel will be
   turned off at the moment either it is set to off by the status time table,
   or by the total heat control. The cooling channel can then be turned on
   later by the status time table. However, the total heat counting for the
   cooling channel will restart from zero after it is turned on.

   .. image:: images/model-reference/cooling-channel-totalheat.*
      :alt: cooling channel controlled by total heat

   In thermal die cycling simulations, at the beginning of each cycle, the
   cooling channel will be turned on, and the total heat counting reset to
   zero. This is to account for the situation that during a cycle, the cooling
   channel total heat has never reached the critical value, but the total heat
   counting has to restart from zero for each cycle.

   Whenever there is a status change for a cooling channel, no matter it is
   due to the total heat control, or time table, a message will be written to
   the screen, :file:`hd3msg.*`, :file:`hd3out.*`, and :file:`report.*`. The
   cooling channel status will also be written to the :guilabel:`General
   history`.

   The total heat history for a cooling channel can be viewed by integrating
   the heat flow rate general history data.

.. note:: 
   * In order for the code to be able to distinguish the on/off status changes
     specified in the status time table, the time intervals between the status
     changes have to be larger than the time steps.
   * To make sure the restart works correctly, the cooling channel indexes have
     to be the same as in the restart source for the restart simulations.       
   * The values defined in the cooling channel temperature, heat transfer coefficient, 
     and time control tables are piece-wise constant between :math:`t` and :math:`t+1`, and 
     equals to the value defined at :math:`t`. If the real simulation time is outside of 
     the time defined in the tables, the nearest value will be used.
   * Cooling channels also work in :ref:`gmoBasicsMR`.

.. seealso:: \  Parameters in :ref:`SubcomponentsCoolingChannel`

.. index::
   single: cooling channels; heat transfer coefficients

Heat transfer coefficients for cooling channels
================================================================================================================

Heat transfer coefficients for cooling channels can be  
To calculate the heat transfer coefficient in a pipe, you must first calculate
the non-dimensional Nusselt number. Table :ref:`TableHeatTransferEqPipeFlow`
is a list of equations used to determine Nusselt number. The user must be
careful in choosing the correct condition or the results could result in some
uncertainty.

  .. tabularcolumns:: |p{9.0cm}|p{5.5cm}|

  .. _TableHeatTransferEqPipeFlow:

  .. list-table:: Heat Transfer Equations for Pipe Flow
     :widths: 50 50
     :header-rows: 1
     :class: longtable

     * - CONDITIONS
       - EQUATION

     * - Fully-developed turbulent flow with 
         :math:`2500 < Re < 1.25 \times 10^{5}` and  :math:`0.5 < Pr < 1.5`.
       - .. math::
            Nu = 0.023Re^{0.8}Pr^{n}

         :math:`n=0.3` for cooling and :math:`n=0.4` for heating

     * - Fully-developed turbulent flow with
         :math:`10^{4} < Re < 5 \times 10^{6}` and :math:`0.5 < Pr < 1.5`.
       - .. math::
            Nu = 0.0214\left( Re^{0.8} - 100 \right)Pr^{0.4}

     * - Fully-developed turbulent flow with 
         :math:`3000 < Re < 10^{6}` and :math:`1.5 < Pr < 500`
       - .. math::
            Nu = 0.012 \left(Re^{0.87} - 280 \right) Pr^{0.4}

     * - Fully-developed laminar flow, constant surface temperature
       - .. math::
            Nu = 3.66 + \frac{0.0668\left(\frac{D}{L}\right)RePr}{1+0.04\left[ \left(\frac{D}{L}\right)RePr\right]^{2/3}}

In the table, :math:`Re` is the Reynolds number, which is equal to the ratio
*inertial forces/viscous forces*: 

.. math:: Re = \frac{{\rho VD}}{\mu }
   :label: ReynoldsNumber

:math:`Pr` is the Prandtl number which is equal to the ratio *viscous forces/thermal diffusion rate*:

.. math:: Pr = \frac{{{C_p}\mu }}{{{k_f}}}
   :label: PrandtlNumber

where:

* :math:`D` is the inside diameter of the pipe
* :math:`{k_f}` is the thermal conductivity of the fluid
* |rho| is the density of the fluid
* :math:`V` is the mean velocity of the flow
* |mu| is the viscosity of the fluid
* :math:`{\mu _s}` is the viscosity at the surface temperature of the wall
* :math:`{C_p}` is heat capacity at constant pressure

The convective heat transfer coefficient, :math:`h`, is then calculated from the
correlation given in Eq. :eq:`NusseltNumber` which can be derived from
Newton's law of cooling ratio between a stagnant flow and moving flow:

.. math:: Nu = \frac{{hD}}{{{k_f}}}
   :label: NusseltNumber

where:

* :math:`h` is the heat transfer coefficient
* :math:`D` is the inside diameter of the pipe
* :math:`{k_f}` is the thermal conductivity of the fluid

In the thermal entry region, a "local" convective heat transfer coefficient, :math:`{h_x}`,
is a function of the axial location where an "average" convective heat transfer
coefficient, :math:`{h_L}`, may be obtained by integrating the heat transfer
over the entire length of the pipe.

|

**Example:**

  Water flows through a pipe at the temperature of :math:`{T_{m1}}=26` :math:`C`
  enters a 0.254 :math:`m`-long tube with an inner diameter
  of :math:`D=0.003175` :math:`m`. The average velocity of the water
  in the tube is :math:`V=23.9` :math:`m/s`. The water exits at a temperature
  of :math:`{T_{m2}}=37.7` :math:`C`. What is the heat transfer coefficient?

  | :math:`\rho = 1000` :math:`kg/m^3`
  | :math:`\mu = 0.001` :math:`Pa*s`
  | :math:`k_f=0.597` :math:`W/(m*K)`
  | :math:`C_p=4182` :math:`J/(kg*K)`

  
  First we calculate the Reynolds number using Eq. :eq:`ReynoldsNumber`
  to determine if the flow is turbulent or laminar and what regime it
  falls in to give the proper condition for the appropriate heat transfer
  equation.

  .. math:: Re = 75,882

  The flow is turbulent. Next we calculate the Prandtl number using Eq.
  :eq:`PrandtlNumber` to help us determine which heat transfer equation is
  needed. The Prandtl number is calculated as:

  .. math:: Pr = 7.0

  Finally using the third condition from the Table
  :ref:`TableHeatTransferEqPipeFlow`, gives the following equation
  for the Nusselt number:

  .. math:: Nu = 0.012\left( {R{e^{0.87}} - 280} \right)P{r^{0.4}} = 0.012\left( {{{75882}^{0.87}} - 280} \right){7.0^{0.4}} = 452.876

  Solving for the convective heat transfer coefficient, :math:`h`, gives: 

  .. math:: h = \frac{{Nu{\text{*}}{k_f}}}{D} = \frac{{452.876{\text{*}}0.597{\text{ }}W/(m{\text{*}}K)}}{{0.003175{\text{ }}m}} = 85155{\text{ }}W/({m^2}{\text{*}}K)



.. index::
   single: Model Reference; core gas
   single: models; core gas

.. index:: core gas

.. _coreGasMR:

========================================================
Core Gas
========================================================

Model Dependencies
=========================

The core gas model computes the generation and flow of the chemical binder
gases in permeable cores. The model works in conjunction with other
models in |prod|. It requires the activation of the full heat transfer model
:menuselection:`Physics --> Heat Transfer`. Pressures and temperature can
be defined in any unit system as they are automatically converted to absolute units 
in pre-processor based on the user-defined units.

Global Model Controls
==========================

  .. image:: images/model-reference/ModelReference_CoreGas_v12.*
     :alt: Core gas

The model is controlled by a set of global input parameters available through
the :menuselection:`Physics` widget and a set of component-specific input
parameters set in the :menuselection:`Geometry` widget.
The model is activated in :menuselection:`Physics --> Core gas`. Additionally,
by selecting :guilabel:`Activate print venting` the user can activate venting
at all core prints and set numerical options that control the computation of
the core gas source terms and the convergence behavior of the core gas flow
solver.  The print venting option allows the user to model cases of 
well-vented print surfaces where the gas escapes to atmosphere either through the
parting plane, or through specially introduced mold vents drilled to the
print surfaces. The reference pressure at prints is the void pressure set in
:menuselection:`Initial --> Global --> Void`.

  .. image:: images/model-reference/core-gas-numerical-options.*
     :alt: Core gas numerical options

To achieve good accuracy of the core gas source in the binder decomposition
zone, a sub-cell resolution method is used. For a typical resin binder a
decomposition zone width at the surface of the core, the thermal gradients are
steepest, is 0.25-0.5 mm. A submesh resolution is, therefore, needed for a
mesh with cell size larger than 0.5 mm; mesh cells are subdivided further into
sub-cells to capture these steep thermal gradients. However, the total number
of sub-cells in each computational cell has to be less than 1000. Thus if
using cartesian coordinates, the :guilabel:`sub-scaling dimension of binder
array` :envvar:`ISSDIMCG` must be less than 10. If using cylindrical coordinates,
:envvar:`ISSDIMCG` must be less than 32.The core gas flow is computed with a
compressible SOR pressure-velocity solver with a :guilabel:`Convergence
tolerance multiplier` and :guilabel:`Maximum iteration count` defined in
:menuselection:`Physics --> Core gas --> Numerical Options`. Defaults here are
typically optimal; however, greater time accuracy can be achieved by setting
the :guilabel:`Convergence tolerance multiplier` to a value smaller than 1.0,
and some simulations may require more than the 1000 iteration limit.

The core gas flow is influenced by the metal pressure distribution on the
surface of the core which acts as a boundary condition for the gas flow. With
the default :guilabel:`Boundary underrelaxation time` of zero, the metal
pressure variations are instantaneously reflected on the core gas flow. For a
positive value of the under-relaxation time, the changes in the metal
pressures exponentially decay to the current value with the specified
relaxation time. Negative values are not allowed.

.. index::
   single: core gas; component properties

Core Gas Component Properties
==================================

Individual core gas obstacles are defined in the :menuselection:`Geometry` 
component list. The :guilabel:`Component Type` has to be
:guilabel:`Core gas`. In the :guilabel:`Solid Properties`, the user can choose
if :guilabel:`Shell mold` is used. If :guilabel:`Shell mold` is chosen, the
thermal shell layer defined by :guilabel:`The Maximum Thermal Penetration
Depth` is treated as an actual shell mold with full core gas venting at the
shell exterior boundary. 

  .. image:: images/model-reference/core-gas-solid-properties.*
     :alt: Core gas solid properties

A fixed pressure venting boundary condition is
imposed at the boundary, with the pressure defined in :menuselection:`Initial
--> Global --> Void initial state --> Pressure`. If :guilabel:`Shell mold` is
not chosen, the component volume outside the thermal layer is treated as an
impenetrable wall.

  .. image:: images/model-reference/core-gas-component-properties.*
     :alt: Core gas component properties

The core gas obstacle is characterized by the thermophysical properties of the
sand, by the chemical properties of the binder, and by the flow properties of
the gasified binder. The parameter :guilabel:`Average Sand Grain Diameter` -
:envvar:`GRAINDIAM`, or :guilabel:`Sand Darcian Permeability` - :envvar:`PERMCG`
and :guilabel:`Sand Non-Darcian Permeability` - :envvar:`PERMCG2` must be
provided and be positive. If :guilabel:`Average Sand Grain Diameter` is used,
it is  converted in the pre-processor to the linear and quadratic drag
coefficients for a given sand core component according to:

.. math:: a = \frac{180}{\rm{GRAINDIAM}^2}
.. math:: b = \frac{3}{\rm{GRAINDIAM}}

If :guilabel:`Sand Darcian Permeability` and :guilabel:`Sand Non-Darcian Permeability`
are used, they are converted in the pre-processor to the linear and quadratic drag coefficients according to:

.. math:: a=\frac{{\phi}^3}{{(1-\phi)^2} {\rm{PERMCG}}}
.. math:: b=\frac{\phi^3}{(1 - \phi) {\rm{PERMCG2}}}

where :math:`\phi` is the core porosity. For more information about the core
gas component properties, please refer to the :doc:`theory` manual section
:ref:`CoreGasGenerationTh`.

Model Output
================

The core gas model generates model-specific output for post-processing. The
:guilabel:`General history` output in :guilabel:`Probe` includes the core gas
mass fluxes to metal, to void, to prints and a total gasification rate from
each core gas component. The spatial plots contain the binder content,
gasification rate, surface gas flux and gas density in the core. To access gas
velocities and pressures the user should specifically choose :guilabel:`Core
gas velocity` and :guilabel:`Core gas pressure` variables to plot these
quantities inside the components. The user can also plot core gas pressures
concurrently with metal pressure in the casting.

The gas flow domain inside core components is confined to fully blocked cells,
therefore, the sand core thickness should be resolved by at least one full
cell for the core gas flow solution to be accurate. The quality of core
component resolution should be checked by first preprocessing the input, then
loading the :file:`prpgrf` file into the :menuselection:`Analyze` tab and
plotting the iso-surface of the :guilabel:`Complement of volume fraction`
with the contour value of 0.99. The resulting iso-surface for the sand core
components should be continuous throughout the core. If it is not continuous,
then the mesh should be refined and the resolution checked again using this
procedure.


.. index::
   single: Model Reference; defect tracking
   single: models; defect tracking

.. index:: defect tracking

.. _defectTrackingMR:

========================================================
Defect tracking
========================================================

The :guilabel:`Free surface defect tracking` model tracks surface impurities
that arise from oxide formation on the free surface. The model is activated by
selecting :menuselection:`Physics --> Defect tracking`, and activate
:guilabel:`Track free surface defects`:

  .. image:: images/model-reference/surface-contamination-defect-tracking.*
     :alt: Defect Tracking

The surface defect prediction algorithm in |prod| consists of a source term for
oxide formation, which is proportional to the surface area and exposure time.
A transport equation is used to track the movement of defect
material with the flowing metal.

Oxide generation at free surfaces is governed by the :guilabel:`Defect
generation rate`, which defaults to
1.0. The actual magnitude of the generation rate is unimportant, especially
in the absence of experimental data quantifying the production of the
contamination at the surface. The distribution of the contaminant in the
filled mold can be interpreted as the distribution of the probability of
defects. For example, locations of local maximums of the oxide defect
concentration are more likely to be the locations of defects.

The :guilabel:`Molecular diffusion coefficient` controls the
rate of molecular diffusion (i.e., Brownian-motion based) of the defect after it has been generated, during transport. The
:guilabel:`Turbulent diffusion coefficient multiplier` controls the rate of
diffusion due to turbulence: a value of 1.0 means that the defect 
diffuses at the same rate as the momentum, while values less than 1.0 mean
that the diffusion of defect is slower than that of momentum. Values greater
than 1.0 make no physical sense.

.. note:: 
   * Surface contaminants can only be tracked in flows with sharp fluid interfaces.
   * In the current model, surface contaminant cannot escape through the surrounding mold material.
   * Surface defects are represented by the 
     :menuselection:`Surface defect concentration` flag in the :guilabel:`Selected` 
     data output area.

.. seealso::  The :ref:`surfaceContaminationMR` is a related model for 
   approximating defects generated by 
   the decomposition of foam during the :ref:`lostFoamMR`.



.. index::
   single: Model Reference; drift flux
   single: models; drift flux

.. index:: drift flux

.. _driftFluxMR:

========================================================
Drift Flux
========================================================

The drift model describes the relative flow of two intermixed fluid
components, one continuous and the other dispersed, with different densities.
The components can be of different phases, or of the same phase but different
(immiscible) fluids. Limitations to the applicability of the drift model can 
exist when the dispersed phase particle size is large. These limitations can 
generally be avoided by maintaining a dispersed phase particle size of less than 10% of 
the mesh cell size. See TN-77 at |tn| for a more detailed discussion on the
limitations to the drift flux model. 

  .. image:: images/model-reference/drift-flux.*
     :alt: Drift flux

.. note::  The drift-flux model requires that the :guilabel:`Viscous flow` option (:envvar:`IFVISC` =1) be enabled.       

.. _drift_model_versions:

Versions of the Model
========================================================

* **One fluid, variable density flow with or without free surface**:
  This option allows the user to simulate a mixture of two phases and still
  include a transient free surface with a void space. The fluid is a mixture of
  two components, each of a constant density. First, :menuselection:`General -->One fluid option`
  must be selected and the variable density model must be
  selected in :menuselection:`Physics --> Density Evaluation --> First order approximation to density transport equation`
  or :menuselection:`Second order approximation to density transport equation`. 
  Second, activate the :guilabel:`Drift-flux`
  model in :menuselection:`Physics --> Drift-flux`. The continuous
  phase density is defined in :menuselection:`Fluids --> Properties for --> Fluid 1 --> Density`. 
  For the dispersed component (e.g., bubbles, solid particles, or
  immiscible liquid droplets) the density is set in :menuselection:`Physics --> Drift-flux --> Density of the dispersed phase`. 
  The initial density distribution can be set in :guilabel:`Initial` -- see
  :ref:`ICs`. The mixture density at inlet boundaries,
  i.e., at a velocity or pressure boundary, can be set in :guilabel:`Boundaries`
  -- see :ref:`SettingBCs`. The initial and boundary values of the mixture
  densities must be in the range between the densities of the two components. No
  heat transfer is allowed in this case (i.e., only possible with isothermal
  simulations).

  .. seealso:: \  :doc:`model-reference` ->  :ref:`flowWithDensityVariationsMR`

* **One fluid flow with solidification with or without free surface**:
  The fluid is a mixture of liquid and solidified phases, each of a constant
  density. Select :menuselection:`General --> One fluid option`. The
  solidification model must be activated in :menuselection:`Physics -->
  Solidification`. See :ref:`solidificationSectionMR`. The liquid (continuous)
  and solid (dispersed) phase densities are defined as in case 1. In
  :menuselection:`Physics --> Density Evaluation` either :guilabel:`Constant
  uniform density` or :guilabel:`Density evaluated as a function of other
  quantities` can be used.

  .. seealso:: \  :doc:`model-reference` ->  :ref:`solidificationSectionMR`

* **Two incompressible fluids, each of a constant density**:
  Select :menuselection:`General --> Two fluids, No sharp interface` and 
  :menuselection:`Incompressible`. Densities for the two fluids 
  are defined in :menuselection:`Fluids --> Properties for --> Fluid 1 --> Density` and *not* in
  the drift-flux window shown above. Phase #1 is fluid #1 and phase #2 is fluid #2.

  .. seealso:: \  :doc:`model-reference` ->  :ref:`twoFluidFlowMR`

* **Incompressible and compressible fluid mixtures**
  In this case, the density of the compressible gas (fluid #2) is defined by the
  equation of state, while the incompressible material has a constant density,
  which is always assumed to be much larger than the gas density. Select
  :menuselection:`General --> Two fluids, No sharp interface and Compressible`.
  Fluid #1 density is defined in :menuselection:`Fluids --> Properties for --> Fluid 1 --> Density`. 
  The gas properties are defined the same way as for
  any compressible fluid case.

  .. seealso:: \  :doc:`model-reference` ->  :ref:`compressibleFlowMR`.

.. _drift_drag_calculation:

Calculation of drag between the phases
========================================================

The drift-flux model has two terms in the calculation of drag between the
phases: Linear and Quadratic, referring to the approximation of momentum
coupling. The linear term describes a Stokes-type, viscosity dominated flow of
the continuous phase around particles of the dispersed phase. The quadratic
term takes into account the pressure forces acting between the two phases,
covering a wider range of flow types. The drag per unit volume (\ :math:`K_p`\ )
is

.. math:: K_p = \frac{1}{2} A_p \rho_c \left( C_D U + 12 \frac{\mu_c}{\rho_c R_p} \right)
   :label: drag_per_unit_volume

where: 

* :math:`A_p` is the cross sectional area per unit volume of the dispersed phase. 

It can be :guilabel:`Dynamically computed` or by using a constant value of a user-specified :guilabel:`Average particle radius`,

* :math:`\rho_c` and :math:`\mu_c` are the fluid density and dynamic viscosity, and 
* :math:`C_D` is the user-specified :guilabel:`Drag coefficient`. It is a dimensionless quantity and is 0.5 for spheres (the default) 
* :math:`R_p` is the average particle size in the dispersed component.

The relative velocity between the phases is computed from combining the
driving force of drift (per unit volume), which is merely :math:`\nabla P`,
with Equation :eq:`drag_per_unit_volume`. The relative velocity is computed
from the solution of the resulting quadratic equation.

In addition, :menuselection:`Physics --> Drift-flux --> Volume fraction of
dispersed phase at inversion point` can be used to model the coalescence of
the dispersed phase droplets into a continuous fluid at this volume fraction.
If the volume fraction of the second phase drops back below the inversion
point, it again reverts to the dispersed phase. This may be important in
devices such as oil/water separators.

The Richardson-Zaki model approximates the effects of the dispersed phase
interactions when the dispersed phase concentration becomes finite, since the
aforementioned model assumes that each droplet/particle/bubble does not see
neighboring droplets/particles/bubbles. The model serves to restrict the
relative velocity between the phases, :math:`u_r`:

.. math:: u_r^{\prime}=u_r \left( 1-min(0.5,f_d) \right)^{R_m \cdot R_z}

where

* :math:`u_r^{\prime}` is the adjusted relative velocity due to particle-particle effects,
* :math:`u_r` is the relative velocity calculated using Equation :eq:`drag_per_unit_volume`,
* :math:`f_d` is the volume fraction of dispersed phase,
* :math:`R_m` is the user-defined :guilabel:`Richardson-Zaki coefficient multiplier`, and
* :math:`R_z` is the Richadson-Zaki coefficient, determined based on the particle Reynolds number, :math:`Re_p`:

.. tabularcolumns:: |p{7.25cm}|p{7.25cm}|

.. _RichardsonZakiCoefficient:

.. list-table:: 
   :widths: 50 50
   :header-rows: 1
   :class: longtable

   * - Particle Reynolds number, :math:`Re_p`
     - Richardson-Zaki Coefficient, :math:`R_z`

   * - :math:`Re_p \le` 0.2
     - :math:`4.65`

   * - 0.2 :math:`< Re_p \le` 1.0
     - :math:`\frac{4.35}{Re_p^{0.03}}`

   * - 1.0 :math:`< Re_p \le` 500
     - :math:`\frac{4.45}{Re_p^{0.1}}`

   * - :math:`Re_p >` 500
     - :math:`2.39` 

.. seealso:: \  :doc:`model-reference` ->  :ref:`escapeOfGasMR` for a special case of using the drift model.


.. index::
   single: Model Reference; dispersed phase droplet size

.. index:: dispersed phase droplet size

.. _dropletsizeMR:


Dispersed Phase Drop Size
========================================================

With the drift flux model activated and the :guilabel:`Type of dispersed phase` defined as 
:menuselection:`Liquid or gaseous`, the user has the option to  select the 
:guilabel:`Dispersed phase drop size` to be defined as :menuselection:`Constant` 
or :menuselection:`Dynamically computed`. Defining an accurate droplet size is often  a 
critical step when using the drift flux model, because it will directly effect the drag 
and buoyancy calculations of the dispersed phase within the continuous phase.

When :menuselection:`Constant` is selected, the droplet size will remain fixed 
throughout the simulation. This method has limitations because most often the size of 
the droplet is not known and droplet size can vary as a function of both time and space. 
The droplet size can decrease by breaking up into multiple smaller droplets as shear is applied across the element. 
The droplet size can increase when one or more droplets collide and coalesce into a larger droplet.

Selecting the :menuselection:`Dynamically computed` option will allow the
droplet size to be calculated dynamically. To use this option the user must
first define the :guilabel:`Initial drop diameter`. Values for the
:guilabel:`Critical weber number` and :guilabel:`Critical capillary number`
must also be specified. These variables control the rate of particle breakup
and are described in Flow Science Report 11-16 at |tn|.


.. seealso:: \  Flow Science Technical Note Flow Science Report 11-16 at |tn|.

.. index::
   single: Model Reference; escape of gas through a free surface

.. index:: escape of gas through a free surface

.. _escapeOfGasMR:


Escape of Gas through a Free Surface
========================================================

The drift-flux model is useful for modeling two-phase flow situations in which
the phases or components are strongly coupled. See :ref:`driftFluxMR` for the
general use of the drift-flux model. The drift model allows a lighter
material, dispersed in a denser fluid, to move in the direction of the
pressure gradient. In the standard drift flux model applied to a single fluid
mixture, both fluid components constitute fluid #1. Therefore, the total fluid
volume stays constant as the two components separate. In the case of small gas
bubbles rising (drifting) and reaching a free surface, they are allowed to
escape into the overlying gas region. This is the purpose of the gas escape
model.

The :menuselection:`Physics --> Drift-flux model` must be activated and 
:guilabel:`Drift-flux --> Type of dispersed phase --> Gaseous` must be selected. Also,
:guilabel:`One fluid` and :guilabel:`Free surface or sharp interface` must be
activated in :guilabel:`General`, as well as a density transport model in
:menuselection:`Physics --> Density evaluation`. 

Two parameters control the rate of gas escape at free surface. 
The comlpement of :guilabel:`Minimum volume fraction of phase 1` defines the maximum
allowed accumulation of gas near free surface before it escapes into the atmopshere. It
defaults to 0.1 which means that the maximum volume fraction of air near free surface 
cannot exceed 0.9. The larger the value of this parameter, the faster gas will escape.

The second parameter is :guilabel:`Escape rate coefficient` which is a multiplier for
the gas escape velocity at free surface. It defaults to 1.0 which is suitable for air 
bubbles in clean water. Contamination of the fluid may impede the gas escape causing 
foaming, an effect that could be captured by descreasing the value of this parameter. 
A value of 0.0 would turn off gas escape through the mechanism of moving bubbles. 
However, the maximum gas concentration would still be controlled by 
:guilabel:`Minimum volume fraction of phase 1`. To completely
turn off gas escape at free surface, set both parameters equal to 0.0.

  .. image:: images/model-reference/drift-flux.*
     :alt: Escape of gas

.. seealso:: \  

   * :doc:`model-reference` ->  :ref:`airEntrainmentMR`
   * :doc:`model-reference` ->  :ref:`driftFluxMR` 
   * :doc:`model-reference` ->  :ref:`flowWithDensityVariationsMR`


.. _elastic_and_viscoelasticMR:

========================================================
Elastic, Plastic, and Viscoelastic Fluids
========================================================

|prod| has broad capability for modeling non-Newtonian fluids, 
including :ref:`elasticAndPlasticMaterialsMR`
and :ref:`VEMaterialsMR`, as described in the following sections.


.. index::
   single: Model Reference; elastic and plastic materials
   single: implicit options; elastic and plastic materials

.. index:: elastic and plastic materials

.. _elasticAndPlasticMaterialsMR:


Elastic and Plastic Materials
========================================================

  .. image:: images/model-reference/elasto-visco-plasticity.*
     :alt: Elasto-visco plasticity

|

  .. image:: images/model-reference/ModelReference_ViscoElasticFluidProperties_v12.*
     :alt: Elasto-visco plasticity properties

Viscoplastic materials are materials that behave as elastic solids up to their
yield stress, at which time they behave as a viscous liquid. The incremental
elastic stress model in |prod| computes the elastic stress using a Hookean
model. Although this constitutive equation predicts only a linear response to
stress, implemented as an incremental model it allows for the prediction of
nonlinear responses to finite strains. If viscous stresses also need to be
predicted, it is necessary to turn on viscosity. In this way,  
elasto-viscoplastic fluids (i.e., Bingham-like materials) can be simulated: the
stress that dominates depends on local strain and strain rate.
For truly viscoelastic materials, where there is a continuous interaction
between viscous and elastic stresses, refer to :doc:`model-reference` -> 
:ref:`VEMaterialsMR`.

Activate the elastic stress model in  :menuselection:`Physics --> Elasto-
visco-plasticity`. Select  :guilabel:`Elasto-viscoplastic model` and then
choose between the :guilabel:`Implicit` or :guilabel:`Explicit` solvers. An
implicit solver can be used if the explicit model requires a time-step size
too small for an efficient calculation.

The shear elastic modulus and yield stress limit for either (or both) fluids
can be specified in :menuselection:`Fluids --> Properties for --> Fluid 1 --> Elasto-
viscoplastic`. Specifying the yield stress to be negative (default) 
means that the yield stress is infinite; thus, no yielding occurs.
The bulk modulus of the fluid is specified via the :guilabel:`Compressibility`
entries in :menuselection:`Fluids --> Properties for --> Fluid # --> Density --> Compressibility`; the
compressibility parameter in |prod| is the inverse of the bulk modulus.
Elasto-thermal effects can also be predicted if the :guilabel:`Thermal
expansion coefficient` is specified along with :guilabel:`Density evaluated as
a function of other quantities` along with the addition of :guilabel:`Include
volumetric thermal expansion`.

Output quantities associated with the :guilabel:`Elasto-visco-plastic` model
include the 6 independent components of the elastic stress tensor, as well as
the cell-centered off-diagonal components. The :guilabel:`Von Mises` stress is
the square root of the second invariant of the Cauchy Stress deviator, and is
a measure of the magnitude of the local shearing stresses. The pressure (as
always) is a measure of the local isotropic stress.

.. seealso:: \  

   * :doc:`model-reference` ->  :ref:`VEMaterialsMR`
   * :doc:`theory` --> :ref:`viscoelasticStressModelTh`
   * :doc:`model-reference` ->  :ref:`buoyantFlowMR`
   * Flow Science Technical Note 64 on modeling incremental elastic stress can be found at |tn|.


.. index::
   single: Model Reference; Bingham materials

.. index:: Bingham material approximation, viscous fluid, elasto-visco-plasticity

.. _binghamMaterialMR:


Elastic fluid example:  Bingham Material Approximation
-----------------------------------------------------------

A Bingham material has a finite yield stress, so the material behaves as a
solid when applied forces do not exceed the yield stress. Once the yield
stress is exceeded, the material then behaves as a viscous fluid. Toothpaste
is often cited as an example of a Bingham material.  |prod| has an 
elastic-plastic stress model that can be used to compute the elastic stress within the
fluid. The model is activated in the :menuselection:`Physics --> Elastic stress` 
panel.

  .. image:: images/model-reference/elasto-visco-plasticity.*
     :alt: Elasto-visco-plasticity

The elastic modulus and the yield stress values for each fluid are defined in 
the :guilabel:`Fluids` widget in the :menuselection:`Fluid 1 --> Elasto-Viscoplastic` tab. 
Also, because the fluid behaves in a viscous manner after the yield stress
is exceeded, the fluid viscosity must be defined.

  .. image:: images/model-reference/ModelReference_BinghamMaterialFluidProperties_v12.*
     :alt: Bingham Material

It is recommended to use the implicit solver for the elastic
model for reduced computation time; the selection can be found in the
:guilabel:`Elastic stress` panel, as well as in :guilabel:`Numerics`.

.. seealso:: \  

   * :ref:`elasticAndPlasticMaterialsMR`
   * :doc:`theory` --> :ref:`viscoelasticStressModelTh`
   * TN-64 at |tn|

.. index::
   single: Model Reference; viscoelastic materials

.. index:: viscoelastic materials

.. _VEMaterialsMR:


Viscoelastic Materials
========================================================

  .. image:: images/model-reference/viscoelastic-materials.*
     :alt: Viscoelastic materials

Viscoelastic materials are materials that have properties of both viscous
liquids and elastic solids. Examples of such materials are polymeric liquids,
where the polymer chains can become entangled with one another during rapid
shear (and thus behave very solid-like), but are able to easily slide past one
another while being slowly sheared, and thus are highly time-dependent in
their material properties.

In |prod| there are two models built-in to predict the behavior of viscoelastic
materials: the :guilabel:`Oldroyd-B model` and the :guilabel:`Giesekus model`.
These are selected in :menuselection:`Physics --> Elasto-visco-plasticity`.
Choose the one that will fit your material the best. Additionally, users can
modify the custom routine :envvar:`elstc_custom.F90` to add additional terms to
the constitutive equation for the elastic stress. Also select the
:guilabel:`Custom` option in :menuselection:`Physics --> Elasto-visco-
plasticity`.

As with the elasto-viscoplastic model, the incremental elastic stress in |prod|
is computed incrementally based on a linear relationship between the
incremental strain from one computational cycle to the next. Viscous stresses
are predicted using the viscosity model, just as with viscous liquids, so it
is necessary to turn on viscosity.

For simpler materials, where the magnitude of elastic stress increases only up
to a yielding limit, using the :guilabel:`Elasto-viscoplastic model` may be
more appropriate. Refer to :doc:`model-reference` -> 
:ref:`elasticAndPlasticMaterialsMR`.

The :guilabel:`Implicit` or :guilabel:`Explicit` options control how the
elastic stress is computed each time step. The :guilabel:`Explicit` option is
the default, and provides the most time-accurate simulations, but may limit
the time step. The :guilabel:`Implicit` option can allow for larger time
steps, but at the cost of less time accuracty, and a larger CPU time **per
time step**. Generally, as with the use of any implicit solver, the implicit
option should be used if the elastic effects are large yet their time
dependency is not important to the simulation

  .. image:: images/model-reference/ModelReference_ViscoElasticMaterialFluidProperties_v12.*
     :alt: Viscoelastic properties

Certain material properties must be provided for the viscoelastic model to
function. In :menuselection:`Fluids --> Properties for --> Fluid # --> Elasto-viscoplastic`, 
:guilabel:`Shear Modulus` and :guilabel:`Relaxation` must be
provided. For the :guilabel:`Giesekus model`, :guilabel:`Mobility` must also
be provided. :guilabel:`Relaxation` represents the relaxation time, and is in
units of time. The longer the relaxation time, the longer it takes for elastic
stresses to relax. Purely viscous liquids thus have a relaxation time of zero.
:guilabel:`Mobility` refers to the mobility factor, which controls the 
non-linear term of the Giesekus model; its default value is 0.0. Any or all
parameters can be temperature-dependent; tabular data can be provided by
selecting the :guilabel:`Tabular` button next to each property. Note that for
two-fluid flows, each of the relevant material properties can also be
specified for fluid 2. The bulk modulus of the fluid(s) are specified via the
:guilabel:`Compressibility` entries in 
:menuselection:`Fluids --> Properties for --> Fluid # --> Density --> Compressibility`;
the compressibility parameter in |prod| is the inverse of
the bulk modulus.

Output quantities associated with the :guilabel:`Viscoelastic` model include
the 6 independent  components of the elastic stress tensor, as well as the
cell-centered off-diagonal components. The :guilabel:`Von Mises` stress is the
square root of the second invariant of the Cauchy Stress deviator, and is a
measure of the magnitude of the local shearing stresses. The pressure (as
always) is a measure of the local isotropic stress.

.. seealso:: \  
   
   * :doc:`model-reference` -->  :ref:`elasticAndPlasticMaterialsMR`
   * :doc:`theory` --> :ref:`viscoelasticStressModelTh`
   * Flow Science Technical Note 64 at |tn|.

.. _electromechanicsMR:

========================================================
Electro-mechanics
========================================================

.. index::
   single: Model Reference; electric fields

.. index:: electric field
.. _electricFieldsMR:


Electric Fields
========================================================


An electric potential can be computed as a function of charge and potential
distribution in a computational domain. :guilabel:`Electric potential` is
activated in :menuselection:`Model Setup --> Physics --> Electro-mechanics`.

  .. image:: images/model-reference/electrical-fields.*
     :alt: Electric fields

The :guilabel:`Fluid electric charge field` model 
can be activated to simulate an electrically charged fluid while the :guilabel:`Dielectrophoresis model` 
can be enabled to model dielectric fluids.

  .. image:: images/model-reference/electro-osmosis-properties.*
     :alt: Electric fields properties

Fluid #1 and fluid #2 conductivity and dielectric constants are defined in
:menuselection:`Fluids --> Properties for --> Fluid # --> Electrical Properties`. If the
:guilabel:`Fluid electric charge field` is used, the initial charge density in
the fluid is defined in :menuselection:`Model Setup --> 
Initial`. However, the electric potential (electric fields) can be
activated without fluid in the computational domain.

  .. image:: images/model-reference/ModelReference_ElectricChargeFluidRegion_v12.*
     :alt: Electric fields initial
     :scale: 80

Conditions at mesh boundaries are defined in 
:menuselection:`Model Setup --> Boundaries`. 
Mesh boundary conditions for
electric potential can be conducting or insulating. A boundary is made
conducting by selecting :guilabel:`Specified potential boundary` and then
setting the specified value of the :guilabel:`Electric potential` on that
boundary. It can also be provided as a function of time. If the
:guilabel:`Fluid electric charge field` is used, the :guilabel:`Electric
Charge` density can be defined at inlet boundaries as a function of time.

  .. image:: images/model-reference/electrical-fields-properties-components.*
     :alt: Electric fields properties components

If there are solid components in the computational domain, the components can
be of two types: dielectric, or conductive based on the value of
:envvar:`IOEPOTM`. If :envvar:`IOEPOTM` is not set then the component will be
treated as having a fixed potential. These properties are defined in
:menuselection:`Model Setup --> Geometry --> Component --> Electrical
Properties`. The initial charge density in the component can be defined in
:menuselection:`Model Setup --> Geometry --> Component properties --> Initial -->
Electric Charge Density`.

Solution of the Poisson equation that governs the potential is done by
:guilabel:`GMRES` iteration method. The convergence criteria and the maximum
iteration number are defined by :envvar:`EPSELE` and :envvar:`MAXPHIT`,
respectively. Both parameters have acceptable defaults and it is not,
generally, recommended to change them. Both of these parameters are modified
by editing the input file (\ :menuselection:`File --> Edit Simulation...`\ ).

.. seealso:: \  

   * :doc:`input-variable-summary-units` section :ref:`ScalarElectrostaticsElectroosmosisandElectromechanicsModelParameters`
   * :doc:`model-reference` ->  :ref:`dielectrophoresisRefMR`
   * :doc:`model-reference` ->  :ref:`electroOsmosisMR`
   * :doc:`model-reference` ->  :ref:`markerAndMassParticlesMR`

.. index::
   single: Model Reference; electro-osmosis

.. index:: electro-osmosis

.. _electroOsmosisMR:


Electro-osmosis (Zeta Potential)
========================================================

Many substances (e.g., silica and glass) will acquire a surface electric
charge when brought into contact with an aqueous (polar) medium (electrolyte
solution). When this occurs it creates what is known as an :abbr:`EDL
(Electric Double Layer)`. An EDL is a region near the charged surface where an
excess of counter-ions over co-ions exist in the fluid in order to neutralize
the surface charge. An electric potential (zeta-potential) is created due to
the EDL which is a property of the liquid-solid pair that can be measured
experimentally. Electro-osmotic flow occurs due to the existence of EDL and an
external potential imposed upon it. To model electro-osmosis, the electric
potential model must first be activated in :menuselection:`Physics -->
Electro-mechanics` as described in :ref:`electricFieldsMR`. The
electro-osmosis model can then be activated in the same window.

  .. image:: images/model-reference/electro-osmosis.*
     :alt: Electro-osmosis

The model requires two lumped parameters  to be defined in
:menuselection:`Physics --> Electro-mechanics`, :guilabel:`F*C` and
:guilabel:`F/R*T`, where: :math:`F` is the Faraday constant, 
:math:`C` is the ionic concentration in the bulk solution,
:math:`R` is the universal gas constant, and 
:math:`T` the ambient temperature in degrees Kelvin. 
The electrical properties for fluid are defined in :menuselection:`Fluids --> Properties for --> Fluid 1 --> Electrical`. 

  .. image:: images/model-reference/electro-osmosis-properties.*
     :alt: Electro-osmosis properties


The electrical properties for components are defined in
:menuselection:`Model Setup --> Geometry --> Component --> Electrical
Properties`. In addition to the properties required for the electric potential
model, the Zeta-potential must also be defined.  The Zeta-potential is only
associated with components (zero-gradient boundary conditions for the 
Zeta-potential are assumed at all mesh boundaries) and the  default Zeta-potential
is zero.

.. seealso:: \

   * :doc:`model-reference` ->  :ref:`dielectrophoresisRefMR` 
   * :doc:`model-reference` ->  :ref:`electricFieldsMR`
   * Flow Science Technical Note 65 at |tn|


.. index::
   single: Model Reference; electro-thermal effects

.. index:: electro-thermal effects

.. _electroThermalMR:


Electro-thermal Effects
========================================================

Free charges and Joule heating are two consequences associated with the
electrical conductivity of materials. A charge density equation that accounts
for charge formation, relaxation and convective transport is solved together
with the electric field equations. Charged layers may then develop at fluid
interfaces or at the boundaries between fluids and solids inducing electric
and dielectric forces.

  .. image:: images/model-reference/electro-thermal-effect.*
     :alt: Electro-thermal effect

Joule heating and additional forces can be added to include fluid and solid
heating due to electric currents. These modeling options require the
activation of the thermal energy transport that can be done in
:menuselection:`Physics --> Heat Transfer --> Fluid internal energy advection`
and :menuselection:`Physics --> Heat Transfer --> Full energy equation`.
The :guilabel:`Electric potential` model must also be activated in
:menuselection:`Physics --> Electro-mechanics`.

Joule heating with electro-thermal forces option will include forces in the
fluid arising from the variation of its permittivity and electric conductivity
with temperature. The respective properties are defined in
:menuselection:`Physics --> Electro-mechanics` :menuselection:`Fluids --> Properties for --> Fluid 1 --> Electrical`, as
:guilabel:`Permittivity temperature sensitivity`, :guilabel:`Conductivity
temperature sensitivity` and :guilabel:`Electric field angular frequency`.

.. note:: \ the :guilabel:`Electrical conductivity` must be defined of the fluid(s) for the electro-thermal effects to work. This is defined in :menuselection:`Model Setup --> Fluids --> Properties for --> Fluid # --> Electrical Properties`.

.. seealso:: \

   * :doc:`model-reference` ->  :ref:`electricFieldsMR` for additional options
   * :ref:`ElectrostaticProperties`


.. index::
   single: Model Reference; dielectrophoresis
   single: implicit options; electric potential

.. index:: dielectrophoresis

.. _dielectrophoresisRefMR:


Dielectrophoresis
========================================================

  .. image:: images/model-reference/electro-mechanics.*
     :alt: Electro-mechanics

Dielectric forces arise due to the polarization of fluid molecules and of
particles in an applied electric field. The electric potenial model must, first, be activated in
:menuselection:`Physics --> Electro-mechanics`. The dielectrophoresis model
can then be activated in the same window. The dielectric properties for fluid
are defined in :menuselection:`Fluids --> Properties for --> Fluid # --> Electrical`. The :guilabel:`Electrical conductivity` 
for :guilabel:`Fluid 1` and :guilabel:`Fluid 2` can be given as function of temperature.

  .. image:: images/model-reference/ModelReference_FluidElectricalProperties_v12_Upd1.*
     :alt: Electro-mechanics properties

For geometry components, the related properties are defined in
:menuselection:`Model Setup --> Geometry --> Component properties --> Electrical Properties`:

  .. image:: images/model-reference/electro-osmosis-properties.*
     :alt: Electro-mechanics properties

When the dielectrophoresis model is activated in :menuselection:`Physics -->
Electro-mechanics` the dielectric force acts in fluids with the dielectric
constant greater than one. The dielectric force is also applied to all material
particles (i.e., Mass, Fluid and Gas particles) in the computational domain. 
In this case, :guilabel:`Dielectric constant` must also be defined in :menuselection:`Physics -->
Particles`. Dielectrophoresis is not compatible with the :ref:`Electro-osmosis model
<electroOsmosisMR>` because of the different scales at which these forces are
significant. The dielectrophoresis model is automatically deactivated when
:guilabel:`Electro-osmosis` is turned on. The electro-osmosis model is turned
on in :menuselection:`Physics --> Electro-mechanics`, in which case additional
input is required and can be provided in the same Electro-mechanics window.
Zeta-potential is defined for each solid component in :menuselection:`Model Setup --> 
Geometry --> Component --> Electrical Properties`. All
dielectric constants are the ratios of the permittivity of the material to that of vacuum.

  .. image:: images/model-reference/particles-mass-electric.*
     :alt: Particle electric properties

Two implicit solvers are available for the electric potential equation,
:guilabel:`GMRES` and :guilabel:`ADI`. The :guilabel:`GMRES` solver is
recommended.

.. seealso:: \  

   * :doc:`model-reference` ->  :ref:`electricFieldsMR`.
   * :doc:`model-reference` ->  :ref:`electroOsmosisMR`.
   * Flow Science Technical Note 56 on modeling dielectric phenomena at |tn|.


.. index::
   single: Model Reference; fan and impeller
   single: models; fan and impeller

.. index:: fan and impeller

.. _fanAndImpellerMR:

========================================================
Fan and Impeller Model
========================================================

The fan and impeller model imparts momentum to fluid in a region defined by a
special kind of "phantom" component. It is used to represent fans, propellers, and
impellers that cannot easily be resolved or rotate so quickly that the resulting time step
size is untenable. The model induces both swirl and axial velocity components in fluid that
enters a "phantom" geometry component that defines a region but does not block
area or volume. These geometry components are usually cylinders of outer
radius :math:`R` and thickness :math:`L`, which define the region swept out by
the rotating blades. They are defined in the same way as regular components,
except that the :guilabel:`Component Type` must be set to
:guilabel:`Fan/Impeller` in :menuselection:`Model Setup --> Geometry
--> Component`. Regular transformation, including magnification, rotation and
translation, is allowed to transform the component to any location and any
orientation.

  .. image:: images/model-reference/fan-impeller-component.*
     :alt: Fan-impeller component type selection

After the geometry component is defined, the following steps should be
performed in :menuselection:`Component --> Fan/Impeller Object
(Phantom)`.

* Specify x, y and z coordinates for two points on the rotation axis (i.e., 
  the central axis of the component after transformation) in the corresponding input boxes.
  The orientation of the axis does matter: objects rotate in right handed
  sense about the axis. Therefore, looking down the axis from point 1 to
  point 2, objects rotate clockwise for positive values of :guilabel:`Spin
  rate`.
* Specify the :guilabel:`Spin rate`, in radians per unit time. Its positive 
  direction is defined from point 1 to point 2. For a constant spin rate, simply enter
  its value in the input box. If it is time-variant, click on the :guilabel:`Tabular` 
  button to enter the spin rate versus time directly, or :guilabel:`Import Values` from
  an existing file with a :file:`csv` extension. The file must have two columns of data which
  represent time and spin rate from left to right.
* Specify the :guilabel:`Accommodation coefficient for rotational velocity`.
* Specify the :guilabel:`Axial velocity coefficient`.
* Specify the :guilabel:`Number of blades` to add blade effects (optional). 
* Specify the :guilabel:`Blade tip thickness in the azimuthal direction` (optional).

It is best to determine the values of :guilabel:`Accommodation coefficient for
rotational velocity` and :guilabel:`Axial velocity coefficient` from empirical
data because the performance of a fan or impeller depends on details of the
blade sizes and shapes that are not part of the model. The manufacturers of
these devices often characterize them by so called "performance curves," which
are plots of the pressure increase across the device versus the average flow rate
passing through it. The model performance curve is a linear approximation. The
figure below shows a hypothetical example of a performance curve.

.. figure:: images/model-reference/performance-curve.*
   :alt: Performance curve

   Typical performance curve (solid) and |prod| approximation (dashed).

A performance curve for the model can be derived by relating the rotating
momentum source to an equivalent pressure drop across the thickness of the
device and averaging the flow rate over the entire cross section. The result
is:

.. math:: \Delta p = \rho L{A_d}\left( {\frac{{2{S_d}{B_d}{R^*}}}{3} - \frac{Q}{{\pi {R^2}}}} \right)

where:

* :math:`\Delta p` is the pressure difference across the impeller,
* |rho| is the fluid density,
* :math:`A_d` is the :guilabel:`Accommodation coefficient for rotational velocity`,
* :math:`S_d` is the :guilabel:`Spin rate`,
* :math:`B_d` is the :guilabel:`Axial velocity coefficient`,
* :math:`Q` is the net flow rate,
* :math:`R` is the outer radius of the rotating blades (as defined in component setup), and
  :math:`R^* = R\left( {1 - {r^3}/{R^3}} \right)`, where :math:`r` is the minimum radius
  of the rotating blades (as defined in component setup).

This relationship gives a linear performance curve with y-intercept
:math:`\Delta {p_0}` and x-intercept :math:`{Q_0}` given by:

.. math:: \Delta {p_0} = \rho L\left( {\frac{{{Q_0}}}{{\pi {R^2}}}} \right){A_d}

|

.. math:: {Q_0} = \frac{2}{3}\pi {R^*}{R^2}{S_d}{B_d}

Using these relations, a given :math:`r`, and a known :guilabel:`Spin rate`, the
:guilabel:`Accommodation coefficient for rotational velocity` and
:guilabel:`Axial velocity coefficient` parameters can be computed to give a
linear approximation to any desired performance curve.

.. seealso:: \ 

   * :doc:`model-reference` ->  :ref:`rotatingComponentsMR`
   * :doc:`input-variable-summary-units` section :ref:`FanorImpellerComponents`

.. index::
   single: Model Reference; flow with density variations

.. index:: flows with density variations

.. _flowWithDensityVariationsMR:

========================================================
Flows with Density Variations
========================================================

  .. image:: images/model-reference/flows-with-density-variations-density-evaluated-as-a-function.*
     :alt: Density evaluation - Density evaluated as a function of other quantities

The fluid density in |prod| may vary in a number of situations:

1. **Density is a function of other variables, e.g., temperature, scalar concentration or solid fraction**:

   Select 
   :menuselection:`Physics --> Density evaluation --> Density evaluated as a function of other quantities`
   for this option. For example, in thermally buoyant flow density is a function of
   temperature. This model is activated when 
   :menuselection:`Physics --> Heat transfer`
   is activated, and the thermal expansion coefficient is defined for either or both fluids in
   :menuselection:`Fluids --> Properties for --> Fluid # --> Density`. The 
   :guilabel:`Reference Temperature` used in the density equation is defined under
   :menuselection:`Fluids --> Properties for --> Fluid #` (see also
   :ref:`buoyantFlowMR`). Similarly, in the :ref:`Macro-segregation model <macroSegregationMR>` density may
   be a function of alloy composition. In that case Solutal Expansion Coefficient
   must be defined in :menuselection:`Fluids --> Properties for --> Fluid 1 --> Solidification --> Binary alloy segregation`.

   .. image:: images/model-reference/ModelReference_FluidPropertiesThermalExpansion_v12.*
      :alt: Fluid 1 tree - Thermal expansion

   For temperature-dependent density, a linear relationship between density
   and temperature is defined using the :guilabel:`Thermal Expansion`
   coefficient. The relationship between temperature and density is :math:`\rho(T) = \rho_0 \left[ 1- \alpha \left( T - T_{ref} \right) \right]`, where:

   * :math:`\rho(T)` is the temperature-dependent density,
   * :math:`\rho_0` is the fluid density at the reference temperature :math:`T_{ref}` and specified by :guilabel:`Density`,
   * :math:`\alpha` is the :guilabel:`Thermal Expansion` coefficient, and
   * :math:`T_{ref}` is the :guilabel:`Reference Temperature`, specified in :menuselection:`Fluids --> Properties for --> Fluid #`.

   Alternatively, tabular data can be specified related density to temperature; this is done by checking the box next to :guilabel:`Density`, selecting :guilabel:`Tabular` and entering the data in the window that appears.

   |

#. **Density is a function of the fluid fraction in incompressible two-fluid models**:

   In two-fluid problems the local density represents the mixture density
   of the two fluids and will vary according to the fraction-of-fluid function
   distribution. In this case, 
   :menuselection:`Physics --> Density evaluation --> Density evaluated as a function of other quantities`
   is turned on automatically by the code.

   In this case, the mixture density in each computational cell is computed as
   a linear relationship of the two fluid densities by :math:`\rho(F) = F
   \rho_1 + \left( 1-F \right) \rho_2`, where:

   * :math:`F` is the volume fraction of fluid 1 in the computational cells,
   * :math:`\rho(F)` is the mixture density,
   * :math:`\rho_1` is the density of fluid 1 (specified in :menuselection:`Fluids --> Properties for --> Fluid 1 --> Density`), and
   * :math:`\rho_2` is the density of fluid 2 (specified in :menuselection:`Fluids --> Properties for --> Fluid 2 --> Density`).

   |

#. **Density varies due to initial and boundary conditions**:
   
   A one-fluid density may vary spatially in an otherwise incompressible flow with or 
   without free surfaces, as set in the initial and mesh inlet boundary conditions. 
   Use :menuselection:`Physics --> Density evaluation --> Solve transport equation for density (first- or second-order)`.

   .. image:: images/model-reference/flows-with-density-variations-first-order-approximation.*
      :alt: Density evaluation - First order approximation

   This model computes a separate transport equation for the density, and in
   effect simulates the movement of two differing fluids (of different
   densities) in the domain. In this way, two fluids can be simulated along
   with a free surface. Furthermore, drifting of one phase relative to the
   other is possible using the :ref:`driftFluxMR` model.

   |


#. **Density varies according to an equation of state**:

   Compressible fluid density is a function of pressure and temperature 
   according to the equation of state. When the compressible flow model is
   used, :menuselection:`Physics --> Density evaluation --> First order approximation to density transport equation` 
   option is automatically
   activated. The :guilabel:`Second order` option can be selected if sharp
   density gradients are expected during the simulation.


.. note:: 
   * :guilabel:`Density transport equation` options cannot be used
     with two incompressible fluids or with fluid internal energy advection for incompressible flows.
   * The initial density distribution can be set in the :guilabel:`Initial Conditions`
     window. The fluid density for case 3 above can be set at an inlet boundary, *i.e.*, at a velocity or 
     pressure boundary, in the :guilabel:`Model Setup --> Boundaries` window.  
   * When using the density transport equation option the 
     density advection is computed directly from a continuity equation. See 
     :doc:`numerical-options` --> :ref:`DensityAdvectionMR`.  


.. index::
   single: Model Reference; buoyant flow

.. index:: buoyant flow

.. _buoyantFlowMR:


Buoyant Flow
========================================================

Buoyant flow can occur due to fluid density variation because of thermal
expansion, addition of mass scalars and in two-fluid mixtures. Select
:menuselection:`Physics --> Density Evaluation --> Density evaluated as a
function of other quantities` to enable local variations in fluid density.
Since fluid density becomes a function of other quantities, additional models
may need to be activated to compute these quantities. For example,
:menuselection:`Physics --> Heat transfer`
model must be activated to model thermally buoyant flow.

  .. image:: images/model-reference/density-evaluation.*
     :alt: Density evaluation

The standard buoyant flow model only introduces a change in density as it
appears in the momentum equation. There is no accompanying volume change in
the fluid. If desired, the corresponding volume changes can also be included.
This option is activated by selecting 
:menuselection:`Include volumetric thermal expansion` in 
:menuselection:`Physics --> Density evaluation`.

.. note:: 

   * Additional buoyancy effects due to gradients in alloy concentration are
     included in the macro-segregation model for binary metal alloys. In this
     model, convective flow occurs from the combined effect of thermal and solutal
     buoyancy.
   * Buoyancy effects are computed automatically when the sediment scour and 
     deposition model is activated; density of the fluid is affected by the 
     presence of sediment, and can result in *gravity* flows.

.. seealso:: \ 

   * :doc:`model-reference` ->  :ref:`transportOfHeatInFluidMR`
   * :doc:`model-reference` ->  :ref:`macroSegregationMR`
   * :doc:`model-reference` ->  :ref:`sedimentScourMR`

.. _fluid_sources_mr:

==============
Fluid sources
==============

There are three main types of fluid sources in |prod|:  :ref:`dropletSourceMR`,
:ref:`massSourcesMR`, and :ref:`massMomentumSourcesMR`.  Each of these different
methods for adding/removing fluid from the domain are described in the sections 
below.


.. index::
   single: models; droplet source

.. index:: droplet source model

.. _dropletSourceMR:


Droplet and bubble sources
========================================================

..

   **Main variables:**        :menuselection:`FL`:   :ref:`NDROP <FluidDropletBubbleSources>`, :ref:`IFDROP <FluidDropletBubbleSources>`, :ref:`XDROP <FluidDropletBubbleSources>`, :ref:`YDROP <FluidDropletBubbleSources>`, :ref:`ZDROP <FluidDropletBubbleSources>`, :ref:`UDROP <FluidDropletBubbleSources>`, :ref:`VDROP <FluidDropletBubbleSources>`, :ref:`WDROP <FluidDropletBubbleSources>`, :ref:`RDROP <FluidDropletBubbleSources>`, :ref:`SDROP <FluidDropletBubbleSources>`, :ref:`EDROP <FluidDropletBubbleSources>`, :ref:`TIMDROP <FluidDropletBubbleSources>`, :ref:`PDROP <FluidDropletBubbleSources>`, :ref:`RHODROP <FluidDropletBubbleSources>`, :ref:`TDROP <FluidDropletBubbleSources>`


The droplet source model provides a way to introduce droplets or bubbles into
the computational domain at a prescribed location and rate. Bubbles can be
introduced in one-fluid, free-surface simulations. Unless stated otherwise,
"droplet" can mean both a fluid droplet or a bubble. The input variables for
the droplet source model must be entered directly into the :file:`prepin.*`
file using a text editor.  A complete description of the variables
can be found in the :ref:`FluidDropletBubbleSources` section of the 
:doc:`input-variable-summary-units` chapter.

To activate the droplet source model, define the number of sources using the
input variable :ref:`NDROP <FluidDropletBubbleSources>`. Up to 2000 sources can
currently be defined. A droplet source can be either of fluid #1 or fluid #2,
depending on the value of the variable :ref:`IFDROP
<FluidDropletBubbleSources>`\(*n*): :ref:`IFDROP
<FluidDropletBubbleSources>`\(*n*) = 1 generates fluid #1 droplets and the value
of 2 generates droplets of fluid #2. For one-fluid, free-surface cases,
:ref:`IFDROP <FluidDropletBubbleSources>`\(*n*) = 2 generates bubbles, which
should be used together with the adiabatic bubble model.
The droplets at each source are generated at a fixed location X, Y and Z
location defined by :ref:`XDROP <FluidDropletBubbleSources>`\(*n*), :ref:`YDROP
<FluidDropletBubbleSources>`\(*n*) and :ref:`ZDROP
<FluidDropletBubbleSources>`\(*n*). The radius is defined by the variable
:ref:`RDROP <FluidDropletBubbleSources>`\(*n*). When a droplet is introduced
into a region where fluid already exists, that fluid is replaced with the
droplet at a uniform pressure :ref:`PDROP <FluidDropletBubbleSources>`\(*n*),
temperature :ref:`TDROP <FluidDropletBubbleSources>`\(*n*), density
:ref:`RHODROP <FluidDropletBubbleSources>`\(*n*) and, for fluid droplets only,
velocity :ref:`UDROP <FluidDropletBubbleSources>`\(*n*), :ref:`VDROP
<FluidDropletBubbleSources>`\(*n*) and :ref:`WDROP
<FluidDropletBubbleSources>`\(*n*).
The starting and ending times for the droplet generation is set by the
variables :ref:`SDROP <FluidDropletBubbleSources>`\(*n*) and :ref:`EDROP
<FluidDropletBubbleSources>`\(*n*), which by default span the whole simulation
time. The droplets are emitted at a fixed rate defined by the variable
:ref:`TIMDROP <FluidDropletBubbleSources>`\(*n*) (which is time interval
between consecutive droplets).

The default value of the initial droplet pressure :ref:`PDROP
<FluidDropletBubbleSources>`\(*n*) is set equal to the initial pressure
:ref:`PRESI <InitialConditionsUniform>`, except for a bubble source which uses
an initial value equal to the void pressure :ref:`PVOID
<InitialConditionsUniform>`. The default value of the density :ref:`RHODROP
<FluidDropletBubbleSources>`\(*n*) is set to the density of fluid #1 for fluid
droplet source of fluid #1, and to the density of fluid #2 for drop source of
fluid #2. The variable :ref:`RHODROP <FluidDropletBubbleSources>`\(*n*) is
only used when the density transport model (first or second order) is
activated. Initial velocity and density settings are not used for bubble sources.



.. index::
   single: Model Reference; mass sources

.. index:: mass sources

.. _massSourcesMR:


Mass Sources
========================================================

A mass source is associated with a geometry component. When a component is
defined as a mass source, fluid enters the computational domain at a user-\
specified mass flow rate or volume flow rate from its open surface (surface
not blocked by other components or by the boundary of the computational
domain). A mass source with negative flow rate removes fluid from the
computational domain and is called a sink (in the following a source
represents only a mass source with positive flow rate). Both stationary and
moving components can be defined as sources or sinks. The model allows for
multiple sources and sinks, each characterized by a unique set of properties
such as mass or volume flow rate, fluid type (fluid #1, #2 or their mixture),
fluid density and temperature.

.. note::
   * The mass/volume flow rate can vary with time. As a result, a source can change to a 
     sink, and vice versa, during a simulation.
   * In two-fluid problems, either fluid can be added/removed at a source/sink. In addition, 
     a two-fluid mixture can be removed at a sink. 
   * In one-fluid problems, if void rather than fluid is added or removed at a 
     source/sink, the added or removed void volume is converted to the corresponding 
     pressure change in the void region adjacent to the source/sink.
   * When both fluid #1 and fluid #2 (or void) are removed at a sink, the amount of 
     each fluid removed is automatically determined in proportion to its local
     volume fraction adjacent to the sink. For example, if the local fluid fraction
     is 0.1, then 10% of fluid #1 and 90% of fluid #2 by volume are removed at the
     sink. If the local fluid fraction is equal to 1.0, then only fluid #1 is
     removed. Since the fluid fraction can change with time, so will the removal
     rate of each fluid.
   * For simulations with heat transfer, the temperature at a sink is automatically 
     computed as the average temperature in the cells adjacent to the sink and, 
     therefore, need not be defined by the user.

.. _mass_source_uses:

Mass sources in different scenarios
-----------------------------------------

The examples below describe the use of the mass sources/sink model in different simulation cases.

**Case 1, one-fluid flow with constant density, free surface, and no heat transfer:**

* A source can release fluid #1 (liquid) or void (gas) but not both. If fluid #1 is released, 
  the source fluid density defaults to that of fluid #1 and cannot be changed by
  the user. If void is released and the mass flow rate is defined, the gas
  density for the void at the source/sink must be specified. If void is released
  and volume flow rate is defined, gas density of void at the source is not
  needed.
* A sink can remove fluid #1 (liquid), void or a mixture of the two. If void or a 
  mixture of fluid #1 and void is removed while mass flow rate is defined,
  then the gas density for the void at the sink must be defined. In all other
  cases, gas density of void at the sink is not needed.
* If void is released at a source or void or its mixture with fluid #1 is removed at 
  a sink, then a bubble model must be activated in :menuselection:`Physics --> Bubbles and phase change`.

**Case 2, one-fluid flow with variable density (a density transport equation is solved), free surface and no heat transfer:**

* A source can release either fluid #1 (liquid) or void but not both. If fluid #1 is 
  released, the source fluid density must be defined. If void is released and
  mass flow rate is defined, the gas density for the void at the source must be
  defined. If void is released and volume flow rate is defined, gas density of
  void at the source is not needed.
* A sink can remove fluid #1 (liquid), void or a mixture of the two. If void or a 
  mixture of fluid #1 and void is removed while mass flow rate is defined, then 
  the gas density for the void at the sink must be defined. In all other cases, 
  gas density of void at the sink is not needed.
* If void is released at a source or void or its mixture with fluid #1 is removed at
  a sink, then a bubble model must be activated in :menuselection:`Physics --> Bubbles and phase change`.

**Case 3, one-fluid flow with constant or variable density (function of temperature), free surface and heat transfer:**

* A source can release either fluid #1 (liquid) or void but not both. If fluid #1 
  is released, the source fluid density cannot be defined by the user because it 
  is either constant (equal to the fluid density) or depends on temperature. If 
  void is released and mass flow rate is defined, then the gas density of void 
  at the source must be defined.
* A sink can remove fluid #1 (liquid), void or mixture of the two. If void is removed 
  while mass flow rate is defined, then the gas density for the void at the sink must 
  be defined. In all other cases, the gas density of void at the sink is not needed.
* If void is released at a source or void or its mixture with fluid #1 is removed at 
  a sink, then a bubble model must be activated in :menuselection:`Physics > Bubbles and phase change`. 
* Temperature of the fluid must be defined at a source but is not needed at a sink. 

**Case 4, one-fluid flow with constant density, no free surface and no heat transfer:**

* A source can only release fluid #1. The source fluid density defaults to the
  density of fluid #1 and cannot be changed by the user. 
* A sink can only remove fluid #1. Density at the sink is that of fluid #1 and 
  cannot be defined by the user.

**Case 5, one-fluid flow with constant density, heat transfer and no free surface:**

* A source can only release fluid #1. The source fluid density defaults to the density 
  of fluid #1 and cannot be changed by the user. 
* A sink can only remove fluid #1. Fluid density at the sink is that of fluid #1 and 
  cannot be defined by the user.
* Temperature must be defined at a source but is not needed at a sink. 

**Case 6, one-fluid flow with variable density (a density transport equation is solved), no free surface and no heat transfer:**

* A source can only release fluid #1. The density of the source fluid must be defined by the user.
* A sink can only remove fluid #1. Fluid density at the sink has its local value and cannot be defined by the user.

**Case 7, one-fluid flow with variable density (function of temperature), heat transfer and no free surface:**

* A source can only release fluid #1. The fluid density at the source cannot be defined because it depends on temperature.
* A sink can only remove fluid #1. Fluid density at the sink has its local value and cannot be defined by the user.

* Temperature must be defined at a source but not at a sink. 

**Case 8, two-fluid incompressible flow with sharp interface and no heat transfer:**

* A source can release either fluid #1 or fluid #2 but not both. The fluid density at 
  a source defaults to that of the source fluid and cannot be changed by the user.
* A sink can remove fluid #1, #2 or their mixture. Fluid density at the sink has 
  its local value and cannot be defined by the user.

**Case 9, two-fluid incompressible flow with sharp interface and heat transfer:**

* A source can release either fluid #1 or fluid #2 but not both. The fluid density at a source 
  defaults to the source fluid density and cannot be changed by the user.
* A sink can remove fluid #1, #2 or their mixture. Fluid density at a sink cannot be defined. 
* Temperature must be defined at a source but not at a sink. 

**Case 10, two-fluid incompressible flow with no sharp interface and no heat transfer:**

* A source can release either fluid #1 or fluid #2 but not both. The fluid density at 
  a source defaults to the source fluid density and cannot be changed by the user.
* A sink can remove fluid #1, #2 or their mixture. Fluid density at the sink has its
  local value and cannot be defined by the user. 

**Case 11, two-fluid incompressible flow with heat transfer and no sharp interface:**

* A source can release either fluid #1 or fluid #2 but not both. The fluid density at 
  a source defaults to that of the source fluid and cannot be changed by the user.
* A sink can remove fluid #1, #2 or their mixture. Fluid density at the sink has its 
  local value and cannot be defined by the user.
* Temperature must be defined at a source but not at a sink. 

**Case 12, two-fluid flow with sharp interface, and flow of fluid #2 is compressible:**

* A source can release either fluid #1 or fluid #2 but not both. If fluid #1 is released, 
  source fluid density defaults to that of fluid #1 and cannot be changed by the user. 
  If fluid #2 is released, source fluid density must be defined.
* A sink can remove fluid #1, #2 or their mixture. Fluid density at the sink has its 
  local value and cannot be defined by the user. 
* Temperature must be defined at a source but not at a sink. 


.. _mass_source_procedure:

Setup procedure
-------------------------------


.. index::
   mass source; activate

.. _activateMassSourceMR:

Activate Mass Source 
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

To define a mass source/sink, go to :menuselection:`Model Setup -->
Geometry --> Component (the desired component)`. In the window
:menuselection:`Component properties`, go to :menuselection:`Mass Source
Properties`. check the :guilabel:`Mass Source` checkbox. The component properties for mass
source definition are shown in the figure below.

  .. image:: images/model-reference/mass-sources-activate-mass-source-expanded-tree.*
     :alt: Mass sources tree

.. _defineSourcePropertiesMR:

Define Source Properties
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Users can specify fluid type (fluid #1, #2 or their mixture), pressure type,
density and temperature at a source and fluid type and density at a sink,
depending on definition of the problem.

The pressure types include :guilabel:`Stagnation pressure` and :guilabel:`Static
pressure` and only applies to sources (i.e., when the mass flow rate is
positive). At a stagnation pressure source (default), fluid is
assumed to enter at zero velocity. As a result, pressure must build up at the
source to move the fluid away from the source. Such sources are designed to
model fluid emerging at the end of a rocket or a deflating balloon. 

At a static pressure source, the fluid velocity is computed from the
mass flow rate and the surface area of the source. In this case, no extra
pressure is required to propel the fluid away from the source. An example of
such source is fluid emerging from a long straight pipe. 

Typically, the distinction between those two types of mass sources is only
important for sources associated with coupled-motion GMO components because it
affects the fluid pressure at the source hence the hydraulic force acting on
the moving object.

.. index::
   single: flow rate; define

.. _defineFlowRateMR:

Define Flow Rate
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

In the dropdown boxes under Flow rate, one can choose to define :guilabel:`Mass
flow rate` or :guilabel:`Volume flow rate` for the source/sink. Both flow rates
can be selected as either total flow rate or flow rate per unit area of the
source component.

The total flow rate is distributed uniformly over the open surface of the source
component. When flow rate per unit area is selected, the total flow rate is the
specified flow rate per unit area times the open surface area of the source
component. If the open surface area changes in time, so will the total mass flow
rate. For example, the calculated surface area of a moving object depends on
mesh size and mesh distribution and is updated at each time step, thus it can
change with time, resulting in a time-variation of the total flow rate.

If total flow rate is specified with a moving object, the fluxes along the
open surface are adjusted at every time step to maintain the defined total mass
flow rate.

If flow rate is a constant, then simply enter it in the corresponding edit box
under :guilabel:`Total flow rate` or :guilabel:`Per unit area flow rate`.
Otherwise click on :guilabel:`Tabular` to pop up a data table and enter a
series of data for time versus flow rate. Flow rate is positive for a source
and negative for a sink and can change sign with time. Alternatively, users
can also define flow rate versus time by importing an existing data file using
the :guilabel:`Import Values` button. The file must have two columns of data
which represent time and flow rate from left to right, respectively. A
:file:`csv` extension is required for the file. As with other time-dependent
inputs in |prod|, data is interpolated in a piecewise linear fashion between
time points.

The flow rate can be changed during the simulation by active simulation control.
See also :ref:`activeSimulationControlMR` for more information.

.. index::
   single: scalars; define at source

.. _defineScalarsAtSourceMR:

Define Scalars at Source
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Scalars have to be first activated in :guilabel:`Scalars` under
:guilabel:`Physics` tab. Scalar quantities in the fluid at a mass source can
be defined as scalar concentrations at the source, which is mass of the scalar
per unit volume of the fluid entering the computational domain. The mass flow
rate of a scalar entering the domain is equal to the specified scalar
concentration times volume flow rate of the source fluid at the source. In
:menuselection:`Mass Source Properties --> Source --> Scalars --> User defined
scalar`, enter the scalar concentration.

.. index::
   single: Model Reference; mass-momentum sources

.. index:: mass-momentum sources

.. _massMomentumSourcesMR:


Mass-Momentum Sources
========================================================

The mass-momentum source model allows the user to introduce fluid at any
location and orientation into the computational domain at a specified 
(time-dependent) flow rate and velocity without having to model the geometry of the
actual source. A mass-momentum source is represented by an array of particles
of a special type in a planar surface. Users only need to define the location,
shape and orientation of the source surface, and the solver will generate
these particles automatically at the specified location in a pattern that
follows the user-specified shape and orientation. In addition, mass-momentum
sources can move at a user-defined velocity. They are intended to represent
objects like nozzles, ventilation air ducts, pipes, etc. This approach is
particularly useful when source dimensions are small compared to the size of
the computational domain.

A mass-momentum source can release fluid (when flow rate is positive) or
remove fluid (when flow rate is negative). In the following we will call a
mass-momentum source that releases fluid a source and one that removes fluid a
sink. Multiple sources and sinks are allowed to exist in one simulation, each
characterized by a unique set of properties such as mass or volume flow rate,
fluid type (fluid #1, #2 or their mixture), fluid density and temperature.

The placement and configuration of mass-momentum sources is discussed in 
detail in the :ref:`MassMomentumMnG` section in the :doc:`model-setup` chapter.

.. seealso::  :ref:`MassMomentumMnG` section in the :doc:`model-setup` chapter




.. index::
   single: models; fluid-structure interaction
   single: models; thermal stress evolution

.. index:: fluid structure interaction, thermal stress evolution

.. _fsiTseMR:

========================================================
Fluid-Structure Interaction (FSI)
========================================================

.. index::
   single: Model Reference; fluid-structure interaction

..


The fluid-structure interaction (FSI) model is an integrated solid mechanics
modeling capability in |prod|. This model makes use of the *finite element
method* (FEM) to simulate and analyze the stresses within solid components and
the resulting deformations. Stresses develop in the solid due to the forces
exerted by the surrounding fluid, thermal gradients within the solid, and/or
constraints imposed by walls and other components.


  .. image:: images/model-reference/fsi-thermal-stress-evolution-geometry-tree.*
     :alt: Geometry tree


.. note::

   * Only *solid* components can be FSI deformable objects.
   * Porous components cannot be FSI deformable objects. 

.. _fsiTseModelSetupMR:

Model Setup
========================================================

.. _fsipropertiesMR:

Properties
-------------------------

From the :guilabel:`Component Properties` list, select :guilabel:`FSI
Deformable Properties` to open up the FSI properties. Checking the box next to
:guilabel:`FSI Deformable Component` in :guilabel:`Component Properties`
activates the model for that component. Do not confuse this with the
:guilabel:`Simple Deforming Object` selection, which models membrane and
simple wall deformation. The minimum requirements  of the material properties
for this model are: :guilabel:`Solid Density` and at least two elastic
properties out of the :guilabel:`Bulk Modulus`, :guilabel:`Shear Modulus`,
:guilabel:`Elastic (Young's) Modulus`, and :guilabel:`Poisson Ratio`. Unless
these minimum requirements are met, the preprocessor will terminate the
simulation. Note that temperature-dependent tabular data can be specified for
any or all material properties. If more than 2 of the aforementioned
properties are specified, priority is given in order from top to bottom of the
list in the GUI.

If the :guilabel:`Heat Transfer` model (with full conduction in components) is
turned on and thermal gradients exist with the solid, the model computes
thermal stresses that can develop due to density variation within the
material; either the :guilabel:`Thermal Expansion Coefficient` or
:guilabel:`Tabular` data for :guilabel:`Solid Density` must be provided to
compute thermal stresses. Also, if the solid properties are temperature
dependent and if this information is available, the properties can be defined
with temperature dependent tables. Click on the :guilabel:`Tabular` button to
enter the temperature dependent properties directly, or :guilabel:`Import
Values` from an existing comma separated value (:file:`csv`) file. The values
can also be read directly from an external file without being copied to the
:file:`prepin.*` file (see
:ref:`temperatureDependentPropertiesMR`). These properties can also be loaded
into components from the :guilabel:`Solids Database` under the
:guilabel:`Materials` menu.

The :guilabel:`Yield Stress` input allows entry of a Yield-stress limiting
value (in units of stress). Setting this value for the component activates the
*Plastic deformation* model for that component, which predicts non-elastic
deformation locally where the local von Mises stress exceeds the specified
value.

The :guilabel:`Fluid/Solid Coupling` drop-down menu controls the coupling
between the current FSI component and the surrounding fluid:
:guilabel:`Partial` coupling means that the solid "sees" the surrounding
fluid, but the deformation of the solid does *not* affect the fluid flow. This
is the default, and the appropriate choice for when the solid deformations are
expected to be small. For simulations where the deformations are expected to
be large and/or rapid, or the acoustic vibrations of the solid are important
to the simulation, the :guilabel:`Full` coupling option will compute the fluid
motion generated by the deformation of the solid. This option will extend
computation times, and is not recommended unless actually needed.

The sub-branch entitled :guilabel:`FSI Coupling between... :` controls the
coupling between the current FSI component and neighboring FSI components.
There is a drop-down menu for each neighboring FSI component, and the default
selection is :guilabel:`No coupling`, which assumes a fixed boundary between
the components (i.e., no displacements are permitted). Alternate selections
are :guilabel:`Complete coupling` and :guilabel:`Partial coupling`. Selecting
:guilabel:`Complete coupling` causes the model to assume that the two
components are completely fused together, with no sliding or separation
possible. Selecting :guilabel:`Partial coupling` allows the components to
separate and slide past one another, but they cannot interfere. The sliding
friction is controlled by specifying a value for the :guilabel:`Friction
coefficient` below each drop-down menu. By default, sliding friction is not
limited (i.e., sliding cannot occur so long as the components are in contact);
setting this to 0.0 or greater allows for sliding. Physical values are
typically less than 1.0.

After the elastic properties are provided, it is time to generate a finite
element (FE) mesh for the solid. The preprocessor makes use of a rectangular
Cartesian mesh around the solid component to generate the *Finite Element*
(FE) mesh, which is used to solve the equation of motion throughout the solid
component. The Cartesian mesh can be the fluid mesh (default), or it can be an
independent :guilabel:`Local Input Mesh` whose purpose is only to generate the
FE mesh for the solid component.


.. _FEmeshing_FSI:

FSI meshing
-------------------------

When a deformable object is present in the domain, its deformations are captured 
using a finite element (FE) mesh. More than one FE meshes may be required depending on 
the number of deformable components and their interactions.

To generate a FE mesh, navigate to the :guilabel:`Mesh` widget in :guilabel:`Model Setup` 
using the appropriate button (|f3d_mesh_icon|). In the :guilabel:`Mesh` widget, the 
deformable component will be present as one of the meshing options under 
:guilabel:`Select meshing mode`.

  .. image:: images/model-reference/ModelReference_FEMesh_Automatic_v12.*
     :alt: Automatic FE Mesh options

By default, the :guilabel:`Finite element mesh usage` will be set to :guilabel:`Automatic`. 
This implies that the FE mesh is going to be based on the current resolution of the 
:guilabel:`Flow Mesh`. When using this option, the mesh need not be generated at this point;
it will automatically be generated during the preprocessing step.

When set to automatic, the only available option is to determine 
the selection of either :guilabel:`Hexahedron` or :guilabel:`Tetrahedron` mesh elements. Hexahedron meshes,
the default,  are based on six-sided elements, with merging of some vertices
in the vicinity of the component boundaries to allow for smooth interfaces.
Tetrahedron meshes are composed of 4-sided elements and do not require merging
of any vertices. Tetrahedral meshes are simpler, use linear basis functions,
and can result in lower runtimes. However, due to the linear basis functions,
the results may be somewhat less smooth.

The FE mesh can be generated and displayed using the :guilabel:`Preview/Display FE mesh` button. 
When using the :guilabel:`Automatic` option, the FE mesh file for this component will be overwritten every time the simulation is run.

  .. image:: images/model-reference/ModelReference_FEMesh_Custom_v12.*
     :alt: Custom FE Mesh options

If if a different mesh resolution is desired, select the :guilabel:`Specify the FE mesh` 
radio button. In this case, the mesh needs to be generated in advance. If a FE mesh is 
not already present, it can be generated using the options avaialble in the 
:guilabel:`Finite element mesh generation` box. The first step is to determine the 
source of FE mesh generation through the :guilabel:`Initialize structured input mesh with..` button. 
The available options are :guilabel:`From flow mesh`, which copies the current mesh parameters 
as defined in the :guilabel:`Flow Mesh` section, :guilabel:`Custom`, which requires a 
new rectangular mesh to be defined, and :guilabel:`Import from FE mesh`, which imports the 
mesh generation information from a previously generated FE mesh file. In all cases, the 
meshing controls are the same as those to the ones available in :guilabel:`Flow Mesh`. Once 
the required extents and resolution are specified the FE mesh can be generated and displayed 
using the :guilabel:`Preview/Display FE mesh` button. In this case, it will also be automatically 
selected in the input field under the :guilabel:`Specify the FE mesh` radio button.

Optionally, a :guilabel:`Filename` can be given fior the generated FE mesh. 
If no filename is specified, the filename for the mesh file of this component
defaults to :file:`comp#.project.FEmesh`, where :file:`project` is the project
name.

Cylindrical coordinate flow mesh can also be used to generate the FE
mesh, either axisymmetric or fully three-dimensional. The only limitation is
that for 3-D meshes, the FE mesh **cannot** contact the centerline of the
mesh; this will result in a singularity point for the FE mesh.

.. note:: 
   
   * The :guilabel:`Local input mesh` information is saved in the :file:`FE Mesh File`
     that is generated in the next step, but *not* in the
     :file:`prepin.*` file.
   * If :guilabel:`Generate FE mesh` is selected, the :guilabel:`Local input mesh` 
     information is *NOT* used, and the mesh you created will be overwritten by a 
     finite element mesh created by the default fluid mesh.
   * Conforming mesh blocks are ignored while generating FE meshes during preprocessing.
     In FE mesh generation mode, conforming mesh blocks are temporarily converted to non-conforming 
     and FE mesh is generated.
   * If only conforming mesh blocks are used for a simulation then it is recommended to 
     generate the FE mesh without conforming mesh blocks in FE mesh generation mode and 
     load the generated mesh for the simulation step.

.. _fsiTseSimulationMR:

Simulation
========================================================

The solver used for the solution of the stresses within the solid component is
similar to the Generalized Minimum Residual (GMRES) pressure solver. This is
the only solver  available, and the user can adjust the :guilabel:`GMRES
subspace size` (sometimes called the in the literature the *restart number*,
and is called  :ref:`MRSTRTFSI <ComputationalLimitsNamelistLIMITS>` in the
input file), the :guilabel:`Maximum number of iterations` and the
:guilabel:`Convergence tolerance`. Changes to these parameters are made from
the :guilabel:`FSI/TSE solver options` section of the :guilabel:`Numerics`
tab:

  .. image:: images/model-reference/ModelReference_FSITSE-Numerics_v12.*
     :alt: Fluid-Structure interaction - GMRES subspace size

The default value of the GMRES subspace size is 20. Increasing this value will
allow the solver to achieve convergence with fewer iterations; however, the
CPU time per iteration will increase and the memory usage will rise with the
subspace size. In some simulations where convergence is not being reached
(i.e., the maximum number of iterations are being done and the :guilabel:`FEA
convergence ratio` is greater than 1), increasing this value can drastically
reduce the overall CPU time.

Additionally, if the option :guilabel:`Dynamically selected subspace size` is
selected, the solver will automatically adjust the subspace size to optimize
solution efficiency. In this case, the entered (or default) value of the
:guilabel:`GMRES subspace size` becomes the **maximum** subspace size.
Therefore, setting it to a largest value possible with this option is a good
idea (up to the memory available on the computer), since it allows for greater
solver flexibility. In cases where convergence is easily achieved, the
subspace size will automatically be reduced to maintain optimum solver
efficiency.

The :guilabel:`Maximum number of iterations` limits the number of iterations
used by the solver; the default value is 25 which should be more than enough
for most simulations. If the FSI iteration count in the solver is repeatedly
reaching the limit (as seen in the :guilabel:`Simulation` messages), this
limit or the subspace size can be increased. It is recommended (up to the
limit of available memory) to try increasing the subspace size first.

The option :guilabel:`Additional memory (in GB) for storing FSI data
structures` specifies the amount of additional memory that may be used for
storing data structures that can significantly speedup the FSI solver. In the
prepin file, this parameter may be specified by setting the variable,
:envvar:`FSI_MEMORY` in the :envvar:`XPUT` namelist. The FSI solver solves a
system of linear equations (represented by a sparse matrix) for the x, y and z
displacements at all FE mesh nodes. The FSI matrix elements corresponding to
each node can either by computed dynamically for every iteration loop of the
FSI solver or computed and stored once for each cycle and re-used within the
iteration loops in the solver. While storing all the FSI matrix elements can
result in up to 7 times speedup (more often around 3-4 times speedup) of the
FSI solver, it comes with a memory penalty.  Matrix storage for 1 million FE
mesh nodes requires an additional 7 GB of RAM memory. While small FE meshes
benefit from this approach with only a small memory penalty, large FSI problems
involving several million FE mesh nodes would require prohibitively high
additional memory to store the complete FSI matrix. To resolve this problem,
FSI matrix elements are stored only up to a specified memory limit (defaulting
to 7 GB).  Storage for FE mesh nodes that cannot be accommodated within this
memory limit, are dynamically computed within the FSI solver iteration loops.
This retains the performance advantages of storing the FSI matrix without
increasing the memory penalty to prohibitive levels. The amount of additional
memory required for storing a given number of FE mesh nodes can be estimated by
multiplying the number of nodes (in millions) by 7 GB. If the user has enough
RAM memory on his computer to store the entire FSI matrix, he can increase the
default memory limit and improve the computational performance. The additional
memory requirements for tetrahedral meshes are twice that of hexahedral meshes
and the performance gains are typically not as high as for hexahedral meshes.

The :guilabel:`Convergence tolerance` specifies the maximum residual permitted
in the solution of the solid dynamics equations. This value is dimensionless
independent of the mesh size and time step. The value represents a relative
error in the computed strain. The default value is 10\ :sup:`-3`, which should
work well for most simulations. However, if the goal of the simulation is to
get a final-time stress result, rather than accurate time-dependent results,
raising this value will not greatly harm the accuracy of the end result. For
simulations where the displacements and stresses are needed to be highly
accurate during the course of the simulation, lowering this value can help.
Note that convergence generally becomes increasingly slow for values of the
convergence tolerance smaller than 10\ :sup:`-8` for reasons of machine
precision round-off.

The option :guilabel:`Preconditioning of FSI GMRES` (on by
default) uses a preconditioning algorithm prior to running the GMRES
algorithm, with the goal of reducing the number of GMRES iterations. The
preconditioning algorithm is only used when:

1. The option :guilabel:`Preconditioning of FSI GMRES` is activated, and
#. The average number of iterations needed to solve the solid dynamics equations during the previous 10 computational cycles exceeded 4.

The FSI model solves the equations of solid dynamics incrementally, so
theoretically, large deformations can be predicted with reasonable accuracy.
Although fluid motion due to displacements at the solid-fluid interface is
predicted by the model, |prod| volume and area fractions (|favor| fractions)
are *not* updated, so the geometry changes of the solid components are not
seen by the fluid. Therefore, in simulations, where significant deformations
are modeled, the solid dynamics are accurately represented, its effects on the
fluid are not.

Components must be in contact somewhere with fluid mesh boundaries or other
components during a simulation so that they are constrained. If not
constrained, the solid dynamics equations will predict rigid-body motion for
the components, and this motion will not be represented in the fluid. For
example, an unconstrained sphere placed in the simulation with gravity present
will be predicted to exhibit free-fall out of the computational domain.

.. _fsiTsePostprocessingMR:

Post-processing
========================================================

The finite-element results produced by the model are viewed in a separate
display from the fluid regions. To access the FSI data, from the
:guilabel:`Analyze` tab, select the :guilabel:`FSI TSE` sub-tab:

  .. image:: images/model-reference/fsi-tse-solidified-fluid-region-analyze-tab.*
     :alt: Analyze tab

From this tab, select which of the components to view:

  .. image:: images/model-reference/fsi-tse-solidified-fluid-region-fsi-components.*
     :alt: Fluid-Structure Interaction Components

Also selectable are the time limits, and the data source. Note that to view
:guilabel:`Selected` data, :guilabel:`Fluid structure interaction` must have
been chosen from the :guilabel:`Selected data` list in :menuselection:`Model
Setup --> Output` during setup of the simulation. Click :guilabel:`Render`
and the :guilabel:`Display` tab appears, and from here various data variables
can be plotted for the FSI component. Other controls to zoom, rotate, etc.,
are the same as the 3-D display.

The default display is the :guilabel:`Normal displacement`. This shows the
surface displacement in the direction of the outward-pointing normal over the
entire surface of the component, relative to its original conformation.
Negative values indicate that the surface is pulled in and positive values
indicate that the surface is pushed out relative to its original position.
Individual displacements throughout the component in the x, y and z directions
can also be displayed by selecting :guilabel:`X displacement`, :guilabel:`Y
displacement`, or :guilabel:`Z displacement`, respectively.

There are 6 components of elastic stress and 6 components of strain available
for plotting. These are the 6 independent components that comprise the
symmetric elastic stress and strain tensors. These components are difficult to
conceive for most three-dimensional simulations, as even simple 1-D tension,
diagonal to the coordinates, will produce non-zero values in many of the
stress components. That is why the :guilabel:`mean iso stress` (mean isotropic
stress) and the :guilabel:`Von Mises stress` are provided. These are stress
invariants, and as such, are independent of the coordinate system chosen. The
:guilabel:`mean iso stress` is the isotropic stress -- the amount of
purely compressive (negative values) or tensile (positive values) stress in
the solid, which could indicate areas most prone to buckling or cracking. In
contrast, the :guilabel:`Von Mises stress` is a measure of shearing stresses;
its value is always positive. Regions with high shear stress are more prone to
tearing. Therefore, a solid under pure compressive or tensile stresses can
have a negligible Von Mises stress; conversely, a solid under pure shear can
have negligible tensile or compressive stress.

If a value was specified for the :guilabel:`Yield Stress`, then data will also
be available for the plastic deformation of the solid. This
data includes the independent components of the plastic strain tensor (all
non-dimensional), and the plastic strain magnitude (the second invariant of
the plastic strain tensor). These values indicate the locations within the
component where the greatest amount of plastic strain occurred.

:guilabel:`Temperature` is available for plotting as a convenience. This
temperature is the same as the wall temperature available from the fluid
3-D display. The :guilabel:`volume expansion` indicates regions of the component
that have expanded (positive values) or shrunk (negative values) during the
course of the simulation. Such expansion or contraction could be caused by
temperature changes, or by tensile or compressive stresses.

.. _fsiExportImportExodusMeshes:

Export/Import FSI Meshes
========================================================

FSI mesh and data can be imported or exported to :program:`EXODUS II` file
format, which is a random access, machine independent, binary file format.
:program:`EXODUS II` is a widely used model developed to store and retrieve
data for finite element analyses. The ability to export FSI mesh and data files
in :program:`EXODUS II` file format enhances portability and makes it possible
to view FSI results outside the |prod| GUI.  
`ParaView <http://www.paraview.org>`_ is a free, multi-platform data analysis 
and visualization application that can be used to view :program:`EXODUS II` 
files. To generate :program:`EXODUS II` output files, select :menuselection:`Model
Setup --> Output`. In the :guilabel:`Advanced` tab, select the
required option in the :guilabel:`FSI/TSE EXODUS output format` drop-down menu. 

  .. image:: images/model-reference/ModelReference_FSIMEshDataOutput_v12.*
     :alt: EXODUS II output options
     :scale: 90

The FSI mesh file stores only the FE mesh information (elements, nodes, etc.)
while the FSI data file includes FE mesh information and as well node
properties such as stress, strain, etc. at each FE mesh node. Table
:ref:`fsiDataOutputVariablesTable` provides a description of all FSI data
variables. The FSI mesh file has the extension ``.EXFEmesh.exo`` and is
written out only once, immediately after the pre-processing stage. The FSI data
file has the extension ``.EXFEdata.exo`` and is written out at the same
frequency as the restart data.  The :program:`EXODUS II` data file is a single
file (one for each FSI component) that contains FSI data at all restart output
times. In the :file:`prepin.*` file, the variable :envvar:`IEXODUSOUT` (in namelist
:envvar:`XPUT`) can be used to write out FSI mesh and data files in
:program:`EXODUS II` format (see :ref:`FileControlOptions` for details of
usage).

.. tabularcolumns:: |p{3.5cm}|p{8.5cm}|

.. _fsiDataOutputVariablesTable:

.. list-table:: FSI data variables 
   :widths: 35 55
   :header-rows: 1
   :class: longtable

   * - FE MESH VARIABLE
     - DESCRIPTION

   * - :envvar:`stressxx`
     - *xx*\ -component of Elastic stress tensor

   * - :envvar:`stressxy` 
     - *xy*\ -component of Elastic stress tensor

   * - :envvar:`stressxz` 
     - *xz*\ -component of Elastic stress tensor

   * - :envvar:`stressyy` 
     - *yy*\ -component of Elastic stress tensor

   * - :envvar:`stressyz` 
     - *yz*\ -component of Elastic stress tensor

   * - :envvar:`stresszz` 
     - *zz*\ -component of Elastic stress tensor

   * - :envvar:`DISPLX` 
     - *x*\ -component of local displacement vector

   * - :envvar:`DISPLY` 
     - *y*\ -component of local displacement vector

   * - :envvar:`DISPLZ` 
     - *z*\ -component of local displacement vector

   * - :envvar:`strainxx`
     - *xx*\ -component of symmetric strain tensor

   * - :envvar:`strainxy` 
     - *xy*\ -component of symmetric strain tensor

   * - :envvar:`strainxz` 
     - *xz*\ -component of symmetric strain tensor

   * - :envvar:`strainyy` 
     - *yy*\ -component of symmetric strain tensor

   * - :envvar:`strainyz` 
     - *yz*\ -component of symmetric strain tensor

   * - :envvar:`strainzz` 
     - *zz*\ -component of symmetric strain tensor

   * - :envvar:`rel volume expansion` 
     - Relative volume expansion. The first invariant (trace) of strain tensor

   * - :envvar:`mean iso stress` 
     - Mean isotropic elastic stress. Represents a measure of purely compressive (if negative) or tensile stresses (if negative). Equal to one-third of the trace of the elastic stress tensor.

   * - :envvar:`VM stress` 
     - Von Mises stress. Represents a measure of shearing stresses; its value is always positive. Regions with high shear stress are more prone to tearing. This is the square root of the second invariant of the elastic stress tensor.

   * - :envvar:`Temperature` 
     - Local solid temperature

   * - :envvar:`norm displ` 
     - Normal displacement of the solid component boundary. Non-zero only at component interfaces.

   * - :envvar:`Active node?` 
     - The activity state of the local node. For the FSI model, all nodes are always active.

   * - :envvar:`pstrainxx`
     - *xx*\ -component of plastic strain tensor. Valid only when yielding is specified.

   * - :envvar:`pstrainxy` 
     - *xy*\ -component of plastic strain tensor. Valid only when yielding is specified.

   * - :envvar:`pstrainxz` 
     - *xz*\ -component of plastic strain tensor. Valid only when yielding is specified.

   * - :envvar:`pstrainyy` 
     - *yy*\ -component of plastic strain tensor. Valid only when yielding is specified.

   * - :envvar:`pstrainyz` 
     - *yz*\ -component of plastic strain tensor. Valid only when yielding is specified.

   * - :envvar:`pstrainzz` 
     - *zz*\ -component of plastic strain tensor. Valid only when yielding is specified.

   * - :envvar:`pstrainmag` 
     - *xx*\ -component of plastic strain tensor. Valid only when yielding is specified. This is the square root of the second invariant of the plastic strain tensor.

   * - :envvar:`nn:T` 
     - Normal component of traction on the component interface. This is a measure of the force (due to surrounding fluid, neighboring components) on the component. Non-zero only on component interfaces.

It is also possible to import :program:`EXODUS II` meshes into |prod|. Using
this feature, :program:`EXODUS II` meshes generated by third party finite element mesh
generation software (or |prod|) can be used to specify the FE mesh instead of the
default |prod| FE mesh format. In the :guilabel:`FSI Deformable Properties`
branch of :guilabel:`Component`, select :guilabel:`Use EXODUS FE
mesh` from the :guilabel:`FE mesh file usage` drop-down menu. Special care must be
taken when importing :program:`EXODUS II` meshes generated by third party
software. See Notes below.

.. note:: 

   * All element blocks in the imported :program:`EXODUS II` mesh must have the
     same element type (i.e., tetrahedral or hexahedral, but not mixed).
   * The imported finite element mesh and the |prod| component must coincide with each other.
     Importing an :program:`EXODUS II` mesh does not imply generation of an
     equivalent component in |prod|. Rather, these are two separate steps and the
     user must ensure that the two match in space.

.. seealso:: \ :ref:`ComponentPropertiesFluidStructureInteractionFSImodel`.

.. _flow_optionsMP:

========================================
Free Surface vs. Confined Flows
========================================

.. index::
   single: Model Reference; confined flow

.. index:: confined flow

.. _confinedFlowMR:


Confined Flow
========================================================

  .. image:: images/model-reference/ModelReference_ModelReferenceNoSharpInterface_v12.*
     :alt: Confined flow

Confined homogeneous fluid can be simulated by employing the one-fluid flow
model with the interface tracking algorithm turned off. Select
:menuselection:`Physics --> No sharp interface` and
:menuselection:`Physics --> One fluid`. In this case, all open space in
the mesh is filled by fluid #1 at all times. Pressure, velocity, and
temperature and other fluid quantities can be initialized in the
:guilabel:`Initial` tab.

.. note:: 
   * For confined one-fluid compressible flow the two-fluid model has to be used and 
     then only fluid #2 should be defined in the initial and boundary conditions by setting 
     :guilabel:`Fluid fraction` to 0.0 everywhere.

.. seealso:: \  :doc:`model-reference` ->  :ref:`compressibleFlowMR`


.. index::
   single: Model Reference; free-surface flow
   single: models; one-fluid sharp interface

.. index:: free-surface flow, one-fluid sharp interface model

.. _freeSurfaceFlowMR:

Free Surface Flow
========================================================

  .. image:: images/model-reference/ModelReference_ModelReferenceSharpInterface_v12.*
     :alt: Interface tracking

Flows with free surfaces are simulated using the one-fluid, sharp interface
models. Select :menuselection:`Physics` and :guilabel:`Free surface
or sharp` interface.

The properties of the fluid are defined in Fluids with the properties of fluid
#1. All open space in the mesh is assumed to be initially empty, unless
otherwise specified by the user, e.g., by setting fluid Elevation or Volume in
Initial.

Each void region is described with unique volume, pressure and temperature that
can vary with time. The default void region Pressure and Temperature are
initialized in Initial > Void initial state and stay constant during the
calculation, unless one of the bubble models is used (see Adiabatic
Bubbles).

.. note:: 

   Mesh boundary conditions for fluid fraction in :guilabel:`Boundaries` at velocity and
   pressure boundaries default to 1.0, allowing fluid to enter the mesh domain
   if other conditions permit. Fluid fraction at fixed-pressure mesh boundaries
   should be set to 0.0 to model ambient gas with no fluid entering the domain.


.. index::
   single: Model Reference; granular flow
   single: models; granular flow

.. index:: granular flow

.. _granularFlowMR:

========================================================
Granular Flow
========================================================

Granular flow is a mixture of solid particles and a fluid that can be either gas 
or liquid, *e.g.*, sand and air or sand and water. This mixture of granular solid 
and fluid is treated as an incompressible fluid
that may be bounded by free surfaces. Density variations in the mixture fluid
can exist initially and may arise during a flow because of a relative velocity
of the solid and fluid that is computed using the Drift-Flux model. Gas escape
from a free surface may occur as solid compacts forcing the gas out from between
the grains. In the case of a liquid, regions of pure liquid can form as solid material 
compacts.

To activate this model select :menuselection:`General --> One fluid option` and
:menuselection:`Physics --> Granular Flow --> Granular Flow in Gas` or 
:menuselection:`Physics --> Granular Flow --> Granular Flow in Liquid (Slurry)`. 
A granular flow window appears in which the diameter and microscopic density of the grains, and
the density and viscosity of the fluid must be defined. 


  .. image:: images/model-reference/granular-flow-activate.*
     :alt: Granular Flow


If necessary, :guilabel:`Close packing volume fraction`, :guilabel:`Mechanical jamming volume fraction`
and :guilabel:`Loose packing volume fraction`, which all relate to the flow characteristics of the solid material,
can be changed from their default values of 0.63, 0.61 and 0,55,
respectively. Also, :guilabel:`Angle of repose` for granular medium can be changed if the
default value of 34° is not suitable for the solid material to be modeled. 

Another auxiliary input quantity is :guilabel:`Friction angle` , which is typically 2 to 8 degrees 
larger than the angle of retention. The friction angle is important in the case of a fluid being
liquid, where it influences the dispersive pressure arising in shearing flow from the collision 
between solid particles.

When the granular flow option is selected this automatically activates several
other models in the program that are used in the model. Also, it should be
remarked that it is unnecessary to define a mixture viscosity because this is
automatically computed as part of the model. In fact, it is not necessary to
define any of the fluid properties in the :guilabel:`Fluids` widget.

.. note:: 
   If a granular material is to enter a computational region through a mesh
   boundary, it is necessary to define the :guilabel:`Density` of the solid/fluid mixture in 
   the boundary condition window. To avoid flow blockage, the entered density should represent 
   a solid fraction less than that for close packing. For example, if the :guilabel:`Fluid density` is 
   :math:`1000 \frac{kg}{m^3}` and the :guilabel:`Grain density` and :guilabel:`Close packing volume fraction` 
   (given in :menuselection:`Physics --> Granular Flow`) are :math:`1540 \frac{kg}{m^3}` and 0.63, respectively, then 
   the :guilabel:`Density` values entered in the boundary conditions window should be between 1000, 
   *i.e.*, :guilabel:`Fluid density`, and 1340.2, *i.e.*, close packing density, 1540*0.63+1000*0.37.

Two auxiliary input variables are available. One is the :guilabel:`Multiplier
in threshold packing velocity` and the other is the :guilabel:`Multiplier in packing drag`.
The :guilabel:`Multiplier in threshold packing velocity` is the
speed above which flow will set into motion packed solid material. The
:guilabel:`Multiplier in packing drag` is used to bring a flow to zero when
the grains pack to a sufficiently high density. Both of these variables should
be left at their default values unless the user knows that the granular
material has cohesive or other forces that could change these quantities.


.. index::
   single: Model Reference; core blowing
   single: models; core blowing

.. index:: core blowing
.. index::
   single: models; granular flow model
.. index:: granular flow model
.. index:: density evaluation model
.. index:: bubble and phase change model

.. index::
   single: models; density and phase change

.. index::
   single: models; density evaluation

.. _coreBlowingMR:


Granular flow application example:  Core Blowing
========================================================

The core blowing process involves the high speed filling of a core mold with
air/sand mixture. |prod| models core blowing as a two-phase continuum, not as individual
particles of sand. The two-phase effects (air/sand coupling) are modeled using the :ref:`driftFluxMR` model. 
The sand/air mixture is modeled as a single fluid with sharp
interfaces with pure air. The pure air is represented with adiabatic bubbles.
Vents are defined as :guilabel:`valves`. For more information about how these
models are implemented, refer to Flow Science Technical Note 88 at |tn|.

The steps for creating a core blowing simulation are:

1. Import or create the relevant geometry from STL files or create geometry using |prod| primitives on 
   the :guilabel:`Model Setup --> Geometry` tab.
#. Activate the following physics and define parameters in the
   :menuselection:`Model Setup --> Physics` tab:

   a. Use the :guilabel:`Gravity and non-inertial reference frame` model to define
      gravity in the correct direction.
   #. Activate :guilabel:`Viscosity` and :guilabel:`Laminar` flow
      from the :guilabel:`Viscosity and Turbulence` dialog:
   #. Activate the :guilabel:`Granular Flow` model.

      * The :guilabel:`Granular Flow in Gas` selection sets the :guilabel:`Granular Flow`
        model to assume that the sand particles are much more dense than the surrounding
        media.  
      * A :guilabel:`Global vent` controls the overall venting of air through the sand.
        The :guilabel:`Global vent coefficient` is a multiplier that accounts for an
        average flow losses through sand plus reduction in area vents due to blockage of the
        sand. It also takes an average of all the valve external pressures and the sum
        of all the valve coefficients. An estimate can be calculated by the following
        equation: :math:`C_{v,g} = {\left( {\frac{{2{{(1 - f_s^{mx})}^4}}}{{3f_s^{mx}}}} \right)^{1/2}}{\left( {\frac{d_g}{L}} \right)^{1/2}}`
        where :math:`C_{v,g}` is the :guilabel:`Global vent coefficient`, 
        :math:`f_x^{mx}` is maximum possible solid volume fraction, 
        :math:`L` is the average distance between the air pocket and the vents, and 
        :math:`d_g` is the :guilabel:`Average grain diameter`.
      * The :guilabel:`Mechanical jamming volume fraction` is the volume fraction of
        sand above which the flow experiences resistance due to grain-grain
        interaction. A good value to use is 0.61.
      * :guilabel:`Close packing volume fraction` describes the sand volume fraction
        at which flow becomes frozen. When the volume fraction exceeds 0.995(\
        :guilabel:`Close packing volume fraction`\ ) the velocity of that element is
        set to zero. This is typically 0.63 when the sand grains are spheres.
      * The random :guilabel:`Loose packing volume fraction` occurs when the grains are
        touching just enough to support their weight under gravity provided there is no
        disturbance that drives them into a close packed arrangement. This is typically
        0.55 when the grains are spheres. 
      * The :guilabel:`Average grain diameter` and :guilabel:`Grain density` need to be
        defined and can be found from the manufacturer. :guilabel:`Gas density` and
        :guilabel:`Gas viscosity` also must be defined. Typical values for air in CGS
        units are 0.001225 g/\ |cm3| and 0.00017 *poise*, respectively.
      * The :guilabel:`Multiplier in packing drag`, :guilabel:`Multiplier in threshold
        packing velocity`, and the :guilabel:`Angle of repose` are **not** needed for
        modeling core blowing.
      * The grain restitution coefficient is used to estimate the amount of energy
        that is retained by a sand grain after a collision with a solid surface.  

        .. image:: images/model-reference/granular-flow-core-blowing-example.*
           :alt: Granular flow

   #. Activate the :guilabel:`Density Evaluation` model.  Once :guilabel:`Granular Flow`
      is activated, :guilabel:`First order approximation to density transport equation`
      is automatically enabled.  This is needed to compute the transport of sand. For 
      greater spatial accuracy, the 
      :guilabel:`Second order monotonicity-preserving approximation to density transport equation` 
      can be selected. This can be useful for simulations where
      steep gradients in sand concentration are expected.
   #. Activate the :guilabel:`Bubble and Phase Change` model to allow gas to 
      escape.  This is a prerequisite for using vents and valves.

#. Initial and boundary conditions can be added in the :guilabel:`Model Setup` tab. 
   Initial conditions of the void region or bubble region have
   already been defined when the :guilabel:`Adiabatic bubble` model was activated
   from the :guilabel:`Bubble and phase change` model. The boundary conditions
   are defined in the :menuselection:`Model Setup --> Boundaries`.
   Sand is carried through the core box by air pressure so a pressure boundary
   condition and an air/sand mixture density need to be applied at the boundary.
   Select the appropriate boundary box with an S (stands for symmetry boundary)
   and a boundary dialog box will appear. Select :menuselection:`Specified
   pressure` radio button, define the inlet :guilabel:`Pressure`,
   :guilabel:`Fluid fraction` of 1.0, and the :guilabel:`Density`.

   .. image:: images/model-reference/mesh-block-1.*
      :alt: Mesh block 1

#. Add valves if there are only a few vents or use geometry defined as
   :menuselection:`Flow Vent` if there are too many vents to add as valves. Valve
   flow losses are derived from Bernoulli's obstruction theory. Details on
   creating valves can be found in :ref:`ValvesMnG`. To add vents as geometry
   components, create a separate component in the :guilabel:`Geometry` list, and
   select :menuselection:`Flow Vent` from the :menuselection:`Type` drop down.
   When modeled this way, vents do not occupy volume. If the vents are the same
   size then they can be modeled with one STL or modeled using primitives in the
   same component. If they are different sizes, then they need to be modeled
   separately. Once the type has been set, the properties must be defined. Define
   the :guilabel:`Vent Flow Area`, :guilabel:`Diameter of Vent Channel`,
   :guilabel:`Vent External Pressure` and other vent properties in
   :menuselection:`Model Setup --> Geometry --> Component --> Component
   Properties --> Flow Vent Properties`. Refer to :ref:`flowventcomptype` for more 
   information about flow vent and its properties.

   .. image:: images/model-reference/vent-properties.*
      :alt: Vent properties

.. seealso:: 
   * :ref:`adiabaticBubblesMR`
   * :ref:`flowWithDensityVariationsMR` 
   * :ref:`granularFlowMR`.

.. index::
   single: Model Reference; gravity

.. index:: gravity

.. _gravitySectionMR:

========================================================
Gravity
========================================================

Gravity vector components in a Cartesian coordinate system can be simply set in
:menuselection:`Physics --> Gravity`. The direction of the gravity vector is
constant during a simulation.

  .. image:: images/model-reference/gravity-vector-components.*
     :alt: Gravity Components

For constant gravity in Cartesian coordinates, ensure that :guilabel:`Activate
Gravity` is selected and enter the appropriate values for the gravity vector
components in the :guilabel:`X component`, :guilabel:`Y component` and
:guilabel:`Z component` boxes.
 
If a cylindrical coordinate system is used, then the :guilabel:`Z component`
of gravity can still be used for a constant gravity vector completely aligned
with the z-axis. However, non-zero values of :guilabel:`X component` and
:guilabel:`Y component` are aligned with radial and azimuthal coordinate
directions at every point in the mesh, making little physical sense. For a
gravity vector not aligned with the z-axis in a cylindrical coordinate system,
select :guilabel:`Activate non-inertial reference frame` in
:menuselection:`Physics --> Gravity`, and provide the appropriate values for
the gravity vector under :guilabel:`Initial gravity`. Ensure that the standard
gravity components are set to zero; otherwise, gravity will be doubled.

.. seealso::
   * :ref:`NirfTh` notation
   * :ref:`RigidBodyDynamicsAlgorithmTh`  
   * :ref:`NonInertialReferenceFrameTh` equations
   * :ref:`RigidBodyDynamicsNIRFTh`
   * :ref:`gravitySectionMR`
   * :ref:`impulsiveMotionMR`
   * :ref:`nonInertialReferenceFrameMotionMR`
   * :ref:`smoothTabularMotionMR`


.. index:: 
   single: Model Reference; Heat transfer

.. _heattransferMR:

========================================================
Heat Transfer
========================================================

.. index::
   single: Model Reference; transport of heat in fluid

.. index:: transport of heat in fluid

.. _transportOfHeatInFluidMR:


Transport of Heat in Fluid
========================================================

Energy transport options are accessed via :menuselection:`Physics --> Heat Transfer`:

  .. image:: images/model-reference/transport-of-heat-in-fluid-heat-transfer.*
     :alt: Heat transfer - First order method

Fluid internal energy advection must be activated before any other heat
transfer option can be used. There are two advection options available. The
:guilabel:`First-order` option is efficient and robust and is suitable for
most heat transfer problems, but can lead to artificial (numerical) diffusion
of heat for simulations where high thermal gradients are expected. The
:guilabel:`Second-order monotonicity-preserving` option is appropriate in
situations where resolving temperature gradients is of primary importance, for
example, in buoyancy-driven flows. The default setting is :guilabel:`No heat
transfer model`, which is used for isothermal simulations. For fluid/component
heat transfer see :ref:`heatTransferAndConductionsInComponentsMR`.

Whenever a :guilabel:`Heat transfer` option is used, at the very minimum the
:guilabel:`Specific Heat` and :guilabel:`Thermal Conductivity` must be
provided for the fluid:

  .. image:: images/model-reference/ModelReference_FluidThermal_v12.*
     :alt: Fluid 1 tree - Setting fluid internal energy advection

.. note:: 

   No energy transport is allowed in one-fluid problems with
   :menuselection:`Physics --> Density evaluation --> Solve transport equation`
   activated.

.. seealso:: \  \ :ref:`EnergyAdvectionMR` and :ref:`heatTransferAndConductionsInComponentsMR`.


.. index::
   single: Model Reference; heat sources

.. index:: heat sources

.. _heatSourcesMR:


Heat Sources
========================================================

.. _heat_sources_fluid_MR:

Heat sources in fluid
----------------------------

Uniform heat sources in both fluid #1 and #2 can be set in
:menuselection:`Fluids --> Properties for --> Fluid # --> Thermal --> Power source
per unit mass`. When defined, each of those variables represents a constant heat
source uniformly distributed in the fluid. The units are energy per unit mass of
the corresponding fluid.

Components can be used as power sources for a particular region of fluid
rather than the entire domain. If defined as 100% porous they determine a
space to apply thermal energy and don't occupy the space as a solid. To do so,
use porous components with :guilabel:`Porosity` set to 1.0,
:menuselection:`Prescribed Uniform Temperature`, and :menuselection:`Total
amount, surface` or :menuselection:`Specific amount, surface`.  In that case
fluid and heat flows are not obstructed by the component, but energy is
deposited evenly into the fluid at every point of the porous component
location.

  .. image:: images/model-reference/ModelReference_FluidThermal_v12.*
     :alt: Fluid 1 tree - Power Source per unit mass


.. _heat_sources_components_MR:

Heat sources in components
----------------------------

Time-dependent and localized heat sources can be associated with components.
The component energy source can either be specified as a 
:guilabel:`Total amount` (\ *power*\ ), or a :guilabel:`Specific amount` 
(\ *power*\ /\ *unit area* or \ *power*\ /\ *unit volume*\),
chosen by the drop-down menu next to :guilabel:`Heat source type` in
:menuselection:`Model Setup --> Geometry --> Component --> Solid
Properties`. Power at a heat source can be positive or negative.

  .. image:: images/model-reference/heat-sources-component-1.*
      :alt: Component 1 tree - Heat Source

The energy source can be either deposited evenly inside the component or distributed as a
flux over its surface. The choice is governed by the selection in the drop-down menu next
to :guilabel:`Heat source type`. If :menuselection:`Total amount, volumetric` or 
:menuselection:`Specific amount, volumetric` is selected, then the source energy is deposited 
inside the component leading to a change in its temperature. In that case, the component 
must be of type :menuselection:`Full Heat Transfer` or :menuselection:`Dynamic Uniform Temperature`,
found in the drop-down menu next to :guilabel:`Heat Transfer Mode`.

If :menuselection:`Total amount, surface` or :menuselection:`Specific amount, surface` 
is selected instead, then the energy is distributed evenly along the component's open 
surface, and is deposited directly into the fluid that is in contact with the component. 
In that case, no thermal solution is computed within the component itself.

General moving object (GMO) components can participate in heat transfer just
like any stationary solid component. When defining specific heat of a GMO
component, the :guilabel:`Density*Specific heat` product should be used and not
the total heat capacity (only available in the input file) because the volume
of a GMO component may change as it moves through the grid, and even move 
in and out of it.

When the :guilabel:`Total amount` :guilabel:`Heat source type` option is used,
the heat fluxes along the open surface of the moving object are adjusted at
every time step to maintain a constant total power. If the surface area varies
significantly with time, so will the heat fluxes. When the :guilabel:`Specific
amount` option is used, the fluxes will be constant (equal to value defined in
:guilabel:`Specific amount`\ ), but the total power may vary.

Heat sources can also be defined at mesh boundaries of type :guilabel:`Wall`,
similar to component heat sources. These are defined in
:menuselection:`Model Setup --> Boundaries` and within each
boundary side dialog box from the :guilabel:`Thermal information` button under
:guilabel:`Power`.

.. note:: 

   * Uniform heat sources require that :menuselection:`Physics --> Heat transfer
     --> Fluid internal energy advection` is activated. Also, they are ignored
     when the :menuselection:`Numerics --> Use zero velocity field` option is
     activated.
   * Heat sources from components require an option in 
     :menuselection:`Physics --> Heat transfer --> Fluid to solid heat transfer` 
     be activated.
   * Since the :guilabel:`Total amount` of power denotes the total power source
     of a component, care must be taken when using heat sources in 2-D
     simulations. For example, in an axisymmetric problem with the y-direction
     grid covering 30 degrees, the :guilabel:`Total amount` must be reduced by a
     factor of 1/12 to account for the fact that only that fraction of the total
     component volume (covering 360 degrees) is included in the grid. Similarly,
     in 2-D Cartesian meshes, the :guilabel:`Total amount` must take into
     account the width of the domain used in the dimension into the plane of
     solution.

.. index::
   single: Model Reference; heat transfer across baffles

.. index:: heat transfer, baffles

.. _heatTransferAcrossBafflesMR:


Heat Transfer across Baffles
========================================================

  .. image:: images/model-reference/ModelReference_HTBaffles_v12.*
     :alt: Baffle 1 - Heat Transfer Coefficient to Fluid 1
     :scale: 90

Baffles can have thermal resistance for fluid-to-fluid and fluid-to-void heat
exchange, although baffles themselves do not posses any heat capacity. The
default setting is no heat transfer through baffles.

Cross-baffle heat transfer is enabled when :menuselection:`Physics --> Heat
Transfer --> Fluid to solid heat transfer` is activated. The heat transfer
coefficients are defined in :menuselection:`Model Setup --> Baffles --> 
Properties` for each baffle (image above). For example, if a
baffle has Fluid 1 on one side and Fluid 2 on the other side, then the
resulting cross-baffle heat transfer coefficient between fluid #1 and #2 is:

.. math:: 

   H_{\text{total}} = 2.0 \frac{H_1 H_2}{H_1 + H_2}

where :math:`H_1` and :math:`H_2` are the :guilabel:`Heat transfer Coefficient
to Fluid 1` and :guilabel:`Heat transfer Coefficient to Fluid 2`,
respectively.

Similarly, cross-baffle heat transfer coefficients between Fluid 1 and voids of
heat transfer type *n* (see :ref:`heatTransferToVoidsMR`) can also be defined in
:menuselection:`Model Setup --> Baffles --> Heat Transfer Properties`.

.. index::
   single: Model Reference; heat transfer and conduction in components

.. index:: heat transfer, conduction, components


.. _heatTransferAndConductionsInComponentsMR:


Heat Transfer and Conduction in Components
========================================================

To enable heat transfer between fluid and components of all types activate one
of the options in :menuselection:`Physics --> Heat transfer --> Fluid to solid heat transfer`:

  .. image:: images/model-reference/heat-transfer-and-conduction-heat-transfer.*
     :alt: Heat Transfer

.. _component_HT_modes_MR:

Component heat transfer modes
--------------------------------------------

Different heat transfer modes can be selected for each component in
:guilabel:`Heat Transfer Mode` under each component's branch in the :guilabel:`Geometry` widget:

  .. image:: images/model-reference/heat-transfer-in-individual-components.*
     :alt: Heat Transfer

If :menuselection:`Dynamic Uniform Temperature` or :menuselection:`Prescribed Uniform Temperature` 
is selected, no conduction equation is solved within the component. The component is treated as a 
lumped temperature body for the former selection, and as having a time-prescribed uniform temperature 
for the latter selection. The time-prescribed temperature of the component is specified in 
:menuselection:`Model Setup --> Geometry --> Component --> Initial Conditions`:

  .. image:: images/model-reference/heat-transfer-and-conduction-in-components-initial-conditions.*
      :alt: Component 1 tree - Initial conditions

Time-dependent values can be specified by entering data into a table by
clicking on :guilabel:`Tabular`.

If the :menuselection:`Static Temperature` option is activated, the
temperature in the component is allowed to vary in space, but still no
conduction equation is solved within the solids. Therefore, the temperatures
remains constant in time, irrespective of the thermal properties of the
component. However, the thermal properties of the component are used when
computing the heat flux so they are required.  The spatial variation of the
solid temperature can be defined either in :menuselection:`Model Setup -->
Initial --> Fluid regions --> Solid temperature` or from restart data (for
restart simulations only -- see :ref:`Restarts`\ ).

When :menuselection:`Full Heat Transfer` is
selected (default), the thermal conduction within the component is included in the
simulation. In this case, both :guilabel:`Thermal Conductivity` and
:guilabel:`Density*Specific Heat` must be specified in the components'
:guilabel:`Solid Properties`.

When the conduction within the component is computed and the
:guilabel:`Maximum Thermal Penetration Depth` is specified,
only the portion of the component volume within that depth along the component
surface, the *thermally active layer*, is computed,
typically resulting in a more efficient calculation. For example, during
high pressure die casting, where the typical filling time is 100\ *ms*, heat
penetrates only a few millimeters into the die. Therefore, ignoring the part
of the die beyond that depth provides significant memory and CPU savings.

A practical value for the thickness of the thermally active layer in casting
problems depends on the properties of the mold material, component/fluid heat
transfer coefficient and on the simulation time. The figure below shows the
thermal penetration depth for H13 steel die and a silica sand mold as a function
of time. The values are estimated from the exact one-dimensional heat
penetration solution into a semi-infinite medium. The temperature cutoff used to
calculate the depth is 1% of the difference in metal/mold initial temperatures.
In other words, beyond the thermally active layer, the component temperature
varies by less than 1% of the initial temperature difference. The actual value
selected should take into account the shape of the interface.

  .. image:: images/model-reference/heat-transfer-and-conduction-thermal-boundary-layer-thickness.*
     :alt: Thermal Boundary layer thickness graph
 
To view the thermally active layer, select :menuselection:`Simulate -->
Preprocess Simulation`, and then open the :file:`prpgrf`.\ *project* file in
the :guilabel:`Analyze` tab and plot the iso-surface of :guilabel:`Thermally
active component volume`.

.. _HTCs_MR:

Heat transfer coefficients
---------------------------------

Heat transfer coefficients between components and fluids and voids are defined
in :menuselection:`Model Setup --> Geometry --> Component --> Surface Properties`. 

  .. image:: images/model-reference/heat-transfer-and-conduction-component-1.*
     :alt: Component 1 - Surface Properties

If a value is specified for the :guilabel:`Heat transfer coefficients to --> Fluid 1` or
:guilabel:`Heat transfer coefficients to --> Fluid 2` then that heat transfer coefficient
defines the thermal resistance of the interface defined in terms of a heat transfer coefficient.
In this context the heat transfer coefficient should be a large number if it is in perfect 
contact with the component. If the fluid does not perfectly wet the surface 
(as might happen due to the presence of oxide layers, trapped
bubbles, or semi-solidified fluid) then the thermal resistance can be significant and the
input heat transfer coefficient will be smaller.

If the :guilabel:`Heat transfer coefficients to --> Fluid 1` and 
:guilabel:`Heat transfer coefficients to --> Fluid 2` are not specified then the heat
transfer coefficient is evaluated in each cell based on the flow conditions
and properties of the materials in each cell using the maximum of the
following correlations for the Nusselt number, :math:`Nu`:

* :math:`Nu_{lam} = 0.664 Re^{\frac{1}{2}} Pr^{\frac{1}{3}}`
* :math:`Nu_{turb} = \left( 0.036 Re^{0.8} - 836 \right)  Pr^{\frac{1}{3}}`
* :math:`Nu_{nat,low \ Gr} = 0.57 \left( Gr Pr \right) ^ \frac{1}{4}` for :math:`Gr \leq 1E+09`
* :math:`Nu_{nat,high \ Gr} = 0.14 \left( Gr Pr \right) ^ \frac{1}{3}` for :math:`Gr>1E+09`

where :math:`Re` is the Reynolds number, :math:`Pr` is the Prandtl number, and
:math:`Gr` is the Grashof number.  The Nusselt number is then transformed back to a
heat transfer coefficient using the length scale defined by :envvar:`OBSL` 
(see :ref:`ComponentPropertiesThermalandHeatTransfer`).

Fluid/component heat transfer can be enhanced, or reduced, for a given component
by using the :guilabel:`Surface Area Multiplier`, which serves as a multiplier for the
interfacial area. If the multiplier is equal to zero for a specific component,
then no heat transfer is calculated between fluid and that component.

The other heat transfer coefficients (e.g. 
:guilabel:`Heat transfer coefficients to --> Void type 1` or 
:guilabel:`Heat transfer coefficients to --> Heat transfer coefficient from solidified fluid to component`) 
are evaluated as heat transfer coefficients.  The heat transfer coefficients to voids
are described in detail below in :ref:`heatTransferToVoidsMR`.


.. _thermal_contact_resistance_MR:

Thermal contact resistance
----------------------------------

Heat transfer between any two components :envvar:`N` and :envvar:`M` can be specified
using :ref:`HTCOB(N,M) <ComponentPropertiesHeatTransferCoefficients>` (in
namelist :envvar:`OBS`) to define a thermal resistance at the contact surface
between the two components, in addition to thermal conduction. This lets the
user take into account gaps between components. If :ref:`HTCOB(N,M)
<ComponentPropertiesHeatTransferCoefficients>` is not specified, the
components are assumed to have perfect contact, and the effective conductivity
between the two components will be used in the conduction equation.

.. seealso:: \  :ref:`heatTransferToVoidsMR`

.. index::
   single: Model Reference; heat transfer and conduction in porous components

.. index:: heat transfer, conduction, porous components, components

.. _heatTransferConductionPorousCompMR:


Special considerations for heat transfer in porous components
-------------------------------------------------------------------------------------

First activate the heat transfer model by selecting one of the options in
:menuselection:`Physics --> Heat transfer --> Fluid to solid heat transfer`:

  .. image:: images/model-reference/heat-transfer-and-conduction-heat-transfer.*
     :alt: Heat Transfer


When heat transfer between fluid and a porous component is desired,
:guilabel:`Specific Surface Area` of the porous component should be specified
in :menuselection:`Model Setup --> Geometry --> Component --> Porous Properties`,
which defines the surface area per unit bulk volume of the
component. If the :guilabel:`Specific Surface Area` is not used, then the
interfacial area at the external surface of the component will be evaluated by
the preprocessor from the volume and area fractions.
Set :guilabel:`Specific Surface Area` for the porous component in
:menuselection:`Model Setup --> Geometry --> Component --> Porous
Properties`. In |prod|, the :guilabel:`Specific Surface Area` can be non-zero
even if the component is 100% porous, i.e., completely open. This is used to
define mass and/or energy sources in any region of the flow.

Set thermal-physical properties under :menuselection:`Model Setup --> Geometry -->
Component --> Solid Properties` for the pure solid of the medium.
The effect of the open volume in the media is already included in the heat
transfer equations.

.. seealso:: \  

   * :ref:`heatTransferAndConductionsInComponentsMR`
   * :ref:`heatSourcesMR`


.. index::
   single: Model Reference; heat transfer to voids

.. index:: heat transfer, voids

.. _heatTransferToVoidsMR:


Heat Transfer to Voids
========================================================

Heat transfer to void regions can be used only in one-fluid, free-surface
problems, *i.e.*, selected in :menuselection:`Model Setup --> Physics`:

  .. image:: images/model-reference/heat-transfer-to-voids-interface-tracking.*
     :alt: Interface tracking

Also, one of the options under 
:menuselection:`Physics --> Heat transfer --> Fluid to solid heat transfer` 
must be activated if heat transfer between solid
components and voids is to be considered:

  .. image:: images/model-reference/heat-transfer-and-conduction-heat-transfer.*
     :alt: Heat Transfer

Additionally, in order to simulate heat transfer from a void to a solid or
from a void to fluid, a :guilabel:`Void pointer` must be specified somewhere within an
existing void region in order to set the properties of that void region.  See
:ref:`pointers_MnG` for details on how to do this. Once the void pointer is
placed inside an existing void region all mesh cells that are initially part
of that void region have the same heat transfer properties. Complete the void
pointer definition by defining  the void :guilabel:`Temperature`,
:guilabel:`Pressure` and :guilabel:`Heat transfer type`. Three heat transfer
types are allowed:  :menuselection:`Type 1`, :menuselection:`Type 2`, and
:menuselection:`Type 3`.  The :guilabel:`Heat transfer type` simply defines
which heat transfer properties defined in the fluid properties
(:guilabel:`Fluids --> Properties for --> Fluid # --> Thermal Properties`) and  the 
:guilabel:`Component Properties` will be used when computing heat transfer to this void region.
For example, the image below shows the correlation between the void pointer
properties and the component properties.

  .. image:: images/model-reference/heat-transfer-to-voids-pointers.*
     :alt: Heat transfer types

The :guilabel:`Heat transfer coefficients` between components and voids are
defined under each :menuselection:`Model Setup --> Geometry --> Component 
--> Heat transfer coefficients to` :guilabel:`Void type k`, where *k* is the
void type number specified in :menuselection:`Model Setup --> Initial`. 
The type variable allows the user to have up to three different
types of void regions, each with a unique heat transfer coefficient. 
Time-dependent heat transfer coefficients can be defined by clicking on
:guilabel:`Tabular` and providing data on the heat transfer coefficient as a
function of time.

Radiative heat transfer to voids from components is defined by setting the
:guilabel:`Emissivity` values for the appropriate void types.

  .. image:: images/model-reference/ModelReference_FluidThermal_v12.*
     :alt: Fluid 1 - Heat transfer to void type 1

Heat transfer to and from voids and the fluid free surface are defined in
:menuselection:`Fluids --> Properties for --> Fluid 1 --> Thermal Properties`. There are the
convective :guilabel:`Heat transfer coefficients`, and the radiative
:guilabel:`Emissivity` values for each of the void region types. Radiation heat
flux is proportional to the fourth power of the emitting body temperature.
Those fluxes are only computed at the emitting surfaces, therefore, the
radiation energy is lost once it leaves the surfaces.

.. note:: The Stefan-Boltzmann constant is :math:`5.6697 \times 10^{-8} \ \frac{W}{m^{2}K^{4}}` in SI units.



.. index::
   single: Model Reference; heat transfer only

.. index:: heat transfer

.. _heatTransferOnlyMR:


Heat Transfer Only
========================================================

When heat transfer is the only important mechanism to be modeled the fluid flow 
solution can be skipped by selecting  
:menuselection:`Numerics --> Fluid flow solver options --> Use zero velocity field`
or :guilabel:`Use constant velocity field`. The latter option is
useful when doing a restart heat transfer calculation in a steady-state flow
field, while the former is useful when modeling solidification after filling. If
either of the two options is selected, the fluid velocities and pressures are
not computed, resulting in substantial CPU time savings.

.. note:: Power source per unit mass in fluid are ignored when :guilabel:`Use zero velocity field` is selected.


.. index::
   single: Model Reference; lost foam casting

.. index:: lost foam casting

.. _lostFoamMR:

========================================================
Lost Foam Casting Process
========================================================

.. _lost_foam_model:

Lost foam model
=========================

In the Lost Foam casting process, a sand mold is filled with an expanded foam
material, typically polystyrene. When liquid metal is poured into the mold, it
must remove the foam by melting or vaporizing it before it can fill the cavity.
The filling is primarily controlled by heat transfer from the metal to the foam.

To use the Lost Foam casting model in |prod|, the first step is to turn on the
model via :menuselection:`Model Setup --> Physics --> Lost foam`:

  .. image:: images/model-reference/lost-foam-casting-physics.*
     :alt: Physics panel - Lost foam casting

Within this window, the full model is turned on by selecting :guilabel:`Full
Lost Foam Model`. The :guilabel:`Simplified Lost Foam Model`, can be used to
quickly determine general filling patterns and locate possible sources of
defects arising from the convergence of metal fronts. This model, however,
gives no information about temperature or velocity distributions, surface
defects, or solidification.

If a positive value is set for the :guilabel:`Gravity effect on metal/foam heat
transfer`, the orientation of the metal-foam interface with respect to gravity
is taken into account. The heat transfer coefficient between metal and foam is
larger where metal is above foam than when it is below, therefore, making it
easier for the metal to advance downwards than upwards. When using this
feature, the recommended value for :guilabel:`Gravity effect on metal/foam
heat transfer` is 0.5.

The options under :guilabel:`Foam residue` are related to defect tracking and
surface contamination in casting. For more information, refer to
:ref:`surfaceContaminationMR`.

To represent foam as disappearing solid, |prod| uses a special "free" or
"phantom" component, which does not contribute to area/volume blockages. The
mold cavity is defined by the usual |favor| technique for the Standard
components and is then filled with foam. Solid components always take precedence
over phantom components, which can only fill open spaces. Additional component
properties can be assigned to define the heats-of-transformation of foam.

  .. image:: images/model-reference/lost-foam-casting-process-add-component.*
     :alt: Add component - Foam Engine Block

Foam components are defined like any other component, e.g., by importing from
a geometry file in Stereolithography (STL) format or using |prod|'s standard
geometry creation. When adding a foam component, specify the type of the new
component as :guilabel:`Lost Foam`. Alternatively, an already created
component can be made into a lost foam component by selecting :guilabel:`Lost
Foam` under :menuselection:`Model Setup --> Geometry --> Component -->
Component Type`. Since foam will not replace neighboring :guilabel:`Standard`
components, its geometric definition does not need to conform exactly to the
mold cavity. Usually a simple box or cylinder shape is sufficient to fill a
cavity with foam. Lighteners (i.e., holes) can be cut in foam, as in ordinary
components, by selecting the type of the subcomponent defining a lightener as
:guilabel:`Hole`.

The foam component must be assigned values in :menuselection:`Model Setup --> Geometry --> 
Component --> Lost Foam Properties` for
:guilabel:`Density*Specific Heat` (specific heat per unit volume),
:guilabel:`Density*Melting energy` (per unit volume), :guilabel:`Melting Temperature`,
:guilabel:`Density*Vapor Energy` (the energy needed per unit volume to vaporize
the melted foam, and :guilabel:`Vaporization Temperature`, the temperature at
which the molten foam is vaporized.

  .. image:: images/model-reference/lost-foam-casting-process-component-properties.*
     :alt: Component 2 tree - Lost foam pattern

The :guilabel:`Heat Transfer Coefficient` is the specified heat transfer
coefficient at the interface between the melting foam and the liquid metal. A
crude estimate of the average speed at which metal moves into foam is
given by:

.. math::

   U_{front} \approx \frac{ h_{m,f} \ \delta T} { \rho C_p \delta T + \rho h_{s,f} + \rho h_{f,g} }

where 

* :math:`U_{front}` is the average metal front speed
* :math:`h_{m,f}` is the :guilabel:`Heat Transfer Coefficient` between the metal and the foam
* :math:`\delta T` is the temperature difference between the metal and foam.
* :math:`\rho C_p` is the :guilabel:`Density*Specific Heat` defined above for the foam component.
* :math:`\rho h_{sf}` is the :guilabel:`Density*Melting Energy` defined above for the foam component.
* :math:`\rho h_{fg}` is the :guilabel:`Density*Vapor Energy` defined above for the foam component.
  This should only be included if the metal temperature is higher than the vaporization temperature
  of the foam.

Since filling of the molten metal is controlled by heat transfer, inlet
conditions at domain boundaries must be specified by pressure and not velocity
boundary conditions. Other considerations when using the :guilabel:`Lost Foam
Casting` model are:

* Fluid cannot be initialized in the regions already occupied by foam.
* Foam can be viewed by plotting the :guilabel:`Free obstacle volume` variable.

For better pressure iteration convergence it is recommended to use a small
degree of limited compressibility by setting the compressibility of Fluid 1 (\
:menuselection:`Fluids --> Properties for --> Fluid 1 --> Density --> Compressibility`) to a value in the
range from 1.0 :math:`\times` 10\ :sup:`-7` to 1.0 :math:`\times` 10\
:sup:`-6` cm s\ :sup:`2` g\ :sup:`-1` (CGS units), or to a value on the order of 0.1/(maximum fluid
pressure). 

.. note:: The lost foam model can be used only in one-fluid flows with a sharp interface and heat transfer.

.. seealso:: \  
   
   * :ref:`solidificationSectionMR`
   * *Modeling the Lost Foam Process with Defect Prediction-Progress Report: 
     Lost-Foam Model Extensions, Wicking* (TN-45) and *Lost Foam Variable Pattern Density* (TN-67) at |tn|.
   * :ref:`acousticWavesMR` for more information on the limited compressibility model.




.. index::
   single: Model Reference; surface contamination during casting

.. index::
   triple: surface contamination during casting; casting; surface defects

.. _surfaceContaminationMR:

Lost foam residue tracking
========================================================

In metal casting, it is possible for impurities on the liquid surface to be
folded into the interior of a cast part as the liquid metal fills the mold.
These impurities may result in a mechanical weakness in the final part. The
:guilabel:`Lost foam residue tracking` model tracks the location of surface
impurities that arise from carbon residue remaining after the melting or
vaporization of foam by metal.   Activate the :guilabel:`Lost foam residue
tracking` by selecting :menuselection:`Physics --> Lost foam` and select
:guilabel:`Track foam residue`:

  .. image:: images/model-reference/surface-contamination-defect-tracking-lost-foam.*
     :alt: Defect Tracking for Lost Foam

The lost foam residue prediction algorithm in |prod| consists of a source term for
residue generation formation, which is proportional to the amount of
degraded foam. A transport equation is used to track the movement of defect
material with the flowing metal. The rate of lost foam residue formation is controlled by the
:guilabel:`Residue generation rate` and defaults to
1.0. The actual magnitude of the generation rate is unimportant, especially
in the absence of experimental data quantifying the 
contamination. The distribution of the contaminant in the
filled mold can be interpreted as the distribution of the probability of
defects. For example, locations of local maximums of the foam residue 
concentration are more likely to be the locations of defects.

The :guilabel:`Molecular diffusion coefficient` controls the
rate of molecular diffusion (i.e., Brownian-motion based) of the 
residue after it has been generated, during transport. The
:guilabel:`Turbulent diffusion coefficient multiplier` controls the rate of
diffusion due to turbulence: a value of 1.0 means that the residue
diffuses at the same rate as the momentum, while values less than 1.0 mean
that the diffusion of defect is slower than that of momentum. Values greater
than 1.0 make no physical sense.

An additional defect-tracking variable can be used in the lost foam model to
track lost foam residue that attaches, or wicks, to mold walls and cannot be
moved by the liquid metal flow. These stationary defects are described by
activating :guilabel:`Allow residue wicking into mold`. These defects are
converted to the stationary defects near mold walls at a rate defined by the parameter
:guilabel:`Residue wicking rate`.

.. note:: 
   * Lost foam residue is represented by the 
     :menuselection:`Surface defect concentration` flag in the :guilabel:`Selected` 
     data output area.

.. seealso::  The :ref:`defectTrackingMR` is a related model for 
   approximating defects generated by 
   the oxide formation on the free surface.

.. index::
   single: Model Reference; Mesh boundary conditions

.. _mesh_bcs_MR:

==========================================
Mesh Boundary Conditions
==========================================


.. index::
   single: Model Reference; outflow type of pressure boundary

.. index:: outflow pressure boundary

.. _outflowPressureBoundaryMR:

Outflow Type of Pressure Boundary
========================================================

The purpose of a pressure boundary is to maintain a prescribed pressure or
fluid elevation and allow dynamically varying flow rate at the boundary. At a
pressure boundary, pressure distribution can be either uniformly or
hydrostatically distributed. When gravity is defined and fluid elevation at
the boundary is specified, hydrostatic pressure distribution is calculated by
the code. A pressure boundary can be either a regular or an outflow type.

At a regular type of pressure boundary, fluid can enter or leave the domain.
Fluid density and all the advecting scalars are prescribed at the boundary.
Hydrostatic pressure distribution at the boundary is code-calculated using the
prescribed density. For a variable density problem, since density is
calculated and varies with time inside the domain, a sharp pressure gradient
near the boundary can be formed, causing unphysically high fluid velocity as
well as other issues near the boundary, e.g., over-predicted high erosion rate
in scour simulations.

At an outflow type of pressure boundary, fluid can leave but is not allowed to
enter the domain. If the calculated velocity points inwards the domain, it is
set to zero. Density and all the advecting scalars at the boundary are
calculated at each time step using zero normal gradients. Hydrostatic pressure
distribution at the boundary is code-calculated using the updated density. As
a result, unphysically high pressure gradient and fluid velocity and other
related issues such as over-prediction of erosion rate can be avoided near the
boundary.

It is recommended that the outflow type of pressure boundary is used for
variable density simulations such as sediment scour simulations and other
cases where scalars are transported with fluid flow. Note it can only be used
at an outlet or downstream boundary where fluid does not move in.

.. image:: images/model-reference/outflow-pressure-boundary.*
     :alt: outflow pressure boundary

.. index::
   single: Model Reference; rating curve

.. index:: rating curve

.. _rating_curves:

Rating curve
=======================

A rating curve is the relation between water elevation and water volume flow
rate at a cross section of a river.  A user-provided rating curve can be
applied to a volume flow rate boundary or a pressure boundary at
:guilabel:`XMIN`, :guilabel:`XMAX`, :guilabel:`YMIN` or :guilabel:`YMAX`. At
such a boundary, water elevation is calculated in accordance to the user-given
volume flow rate  (for volume flow rate boundary) or code- calculated volume
flow rate (for pressure boundary) using the rating curve.

To use the rating curve to specify water elevation, go to
:menuselection:`Model Setup --> Boundaries` and select the mesh block and the boundary. 
Select :guilabel:`Use fluid elevation` and click on :guilabel:`Rating curve` to
display the rating curve window. The rating curve data may be entered directly
in  its data table or defined in an external data file. To define an external
fie for rating curve, check  :guilabel:`Import from simulation directory`,
click  :guilabel:`Import values` and then choose the data file.  The data
column that represents water elevation in the file should also be selected.

  .. image:: images/model-reference/rating_curve_definition.*
     :alt: Rating curve definiton

|

  .. image:: images/model-reference/rating_curve_table.*
     :alt: Rating curve table

Since the rating curve is obtained via measurement in river with steady or
quasi-steady flow condition, it can only be used for simulations of steady
state flow or flow with slow time-variation.  When the rating curve is used at
a volume flow rate boundary, the flow rate must be a constant or  change
slowly with time.  The initial condition should be defined with fluid inside
the domain, and the initial flow should be  as close to the actual flow
condition as possible. Starting with an empty domain or a domain where fluid
is stationary may result in unphysical behavior or instability for a
simulation.

When flow rate at the boundary is equal to zero, which is possible at the beginning
of a simulation, then, instead of using the rating curve, the solver uses user-defined
fluid elevation at the boundary.


.. index::
   single: Model Reference; natural inlet

.. index:: natural inlet

.. _natural_inlets:

Natural inlet 
================

When volume flow rate boundary condition is used at an inlet boundary at
:guilabel:`XMIN`, :guilabel:`XMAX`, :guilabel:`YMIN` or :guilabel:`YMAX`, the
boundary  can be defined as a natural inlet when the rating curve is
unavailable. For a natural inlet, the code automatically sets water depth  at
the boundary to be equal to that in the adjacent mesh cells inside the domain.
With such a treatment,  significant jump of water elevation near the inlet
boundary can be avoided. Thus water surface at the inlet rises as water
surface rises inside the domain, and vice versa. Note water is required to exist initially 
inside the domain and at the inlet to make the natural inlet work. 

  .. image:: images/model-reference/natural_inlet.*
     :alt: Natural inlet settings
     :scale: 90


To define a natural inlet, :guilabel:`Use fluid elevation` 
must be selected. The flow category at the boundary can be selected as 
:guilabel:`sub-critical flow` (:math:`\text{Fr} < 1.0`), 
:guilabel:`super-critical flow`  (:math:`\text{Fr} > 1.0`), 
:guilabel:`critical flow`  (:math:`\text{Fr} = 1.0`) or 
:guilabel:`automatic flow regime`. :math:`\text{Fr}` is Froude
number defined as :math:`\text{Fr} = \frac{V}{\sqrt{gD} }`, where 
:math:`V` is water velocity, :math:`g` is magnitude of the gravitational acceleration, and :math:`D` is water 
depth. For a given velocity, water depth is the critical water depth if :math:`\text{Fr} = 1.0`. 
At a natural inlet, the |prod| code uses the critical water depth as the lower limit for :guilabel:`sub-critical flow` and 
upper limit for :guilabel:`super-critical flow`, respectively, if either of the two categories is selected. For
:guilabel:`critical flow` category, water depth at a natural inlet is always equal to the critical depth. If 
:guilabel:`automatic flow regime` is selected, water depth is not limited by the critical depth, and 
flow category at the inlet is code-calculated and can change with time. 
 
Users may define the maximum and the minimum elevations at a natural inlet
boundary to confine the upstream fluid elevation further. By default, they
are the highest and the lowest *z*-coordinate values of the computational
domain, respectively. They can be entered in the corresponding edit boxes. It is recommended to define
the minimum fluid elevation somewhat above the terrain, so that flow continues of the elevation decreases to the
minimum. If this is not done and fluid elevation drops below the terrain, then simulation will terminate
with an error assuming that this situation is inconsistent with a natural boundary condition and user intentions.

.. seealso::  :ref:`RatingCurveNaturalInlet` section in the :doc:`theory` chapter.


.. index::
   single: Model Reference; wave boundary condition
   single: boundary conditions; wave

.. index:: wave boundary condition

.. _waveBoundaryConditionsMR:


Wave Boundary Condition
========================================================

A wave boundary condition can be defined at left (:guilabel:`X Min`), right
(:guilabel:`X Max`), front (:guilabel:`Y Min`) and back (:guilabel:`Y Max`)
mesh boundaries for free-surface problems in Cartesian coordinate system. At
such a boundary, a surface wave enters the computational domain and propagates
in the direction normal to the boundary. The wave can be :guilabel:`Linear`,
:guilabel:`Stokes`, :guilabel:`Stokes and Cnoidal` wave, :guilabel:`Solitary`,
or :guilabel:`Random`.

A simulation with a wave boundary condition requires the gravitational
acceleration to be directed in the negative z-direction, which is a negative
number defined in :menuselection:`Model Setup --> Physics --> Gravity --> Gravity components --> Z component`. 
To set up a wave boundary, go to :menuselection:`Model Setup --> Boundaries`. 
Click on the button next to the desired mesh
boundary to bring up the boundary condition window. Check the :guilabel:`Wave` 
boundary type, which disables :guilabel:`Use fluid fraction` and enables 
:guilabel:`Use fluid elevation` in the drop down menu. Specify the :guilabel:`Fluid elevation` 
at the boundary as the z-coordinate of the undisturbed fluid surface that the wave
motion is superimposed on.

  .. image:: images/model-reference/wave-boundary-conditions-mesh-block.*
     :alt: Mesh block 1 [X Min Boundary]

It is very important that the selected wave generator represent the physical
wave conditions at the boundary.  The image below can be used to identify
the appropriate generator given the wave height (twice the amplitude),
the wave period, the fluid depth, and gravity: 

.. image:: images/theory/applicability-ranges-of-various-wave-theories.*
   :alt: Applicability ranges of various wave theories
   :width: 4.1 in

.. note::  The above chart applies to waves with a single frequency and 
   is not representative of scenarios where a combination of linear waves   
   are used to define a more complex waveform.


.. index:: linear wave

.. index::
   single: waves; linear

.. _waveBoundaryConditionLinearWaveMR:

Linear Wave
---------------------------------------------------

A linear wave has a sinusoidal surface profile, and its amplitude is small
compared to the wavelength and fluid depth. It is generated using Airy's
linear wave theory. At the linear wave boundary, in addition to a regular
linear wave, users can also define an irregular wave using multiple (up to
1000) sinusoidal linear component waves with independent frequencies,
amplitudes and initial phases (another method to generate an irregular wave is
to use the random wave generator based on a wave energy spectrum, as described
in the :ref:`waveBoundaryConditionRandomWaveMR` section). The elevation of a
linear component wave is expressed as

.. math:: \eta  = Asin(\omega t + \varphi )

where :math:`A`, :math:`\omega` and :math:`\varphi` are wave amplitude,
angular frequency and initial phase, respectively.

To define a linear wave or an irregular wave consisting of several linear waves,
in the boundary condition window, go to :guilabel:`Wave Definition` and select
:guilabel:`Linear` in the dropdown box and then click on :guilabel:`Definition`
to bring up the :guilabel:`Wave Definition` window. In the :guilabel:`Wave
Attributes` area, specify the total number of sinusoidal wave components in the
input box for :guilabel:`Number of wave components` (it is 1 for a single linear
regular wave). Then enter the :guilabel:`Wave amplitude`, :guilabel:`Wave
period` and :guilabel:`Phase shift` (i.e., the initial phase, in degrees) for
each component wave in the data table. The default phase shift is zero, which
means at time t=0 the wave elevation is zero and is on the rise.

  .. image:: images/model-reference/linear-wave-definition.*
     :alt: Linear Wave Definition

The linear wave solution is derived for an infinite reservoir with flat bottom,
which is assumed to exist outside the computational domain and immediately
adjacent to the mesh boundary. In this model, the :guilabel:`Mean fluid depth`
defines the undisturbed fluid depth in the reservoir. It defaults to the
difference between the :guilabel:`Fluid elevation` (the z-coordinate of the
undisturbed surface) and the minimum z-coordinate of the computational domain.
If the :guilabel:`Mean fluid depth` is different from its default, the user
needs to provide the appropriate value in its input box.

At the wave boundary, the model allows for existence of a constant net current
(inflow or outflow) in any horizontal direction, but the current must be slower
than the wave speed for the linear wave solution to be valid. Find
:menuselection:`Current velocities --> X Velocity and Y velocity`, and enter the
velocity components of the current in the x and y directions, respectively. The
current is assumed uniform across the boundary.

.. seealso:: \  \ :ref:`PeriodicLinearWaveGeneratorTh` in the Theory manual.

.. index:: Stokes wave, cnoidal wave

.. index::
   single: waves; Stokes
   single: waves; cnoidal

.. _waveBoundaryConditionStokesWaveCnoidalWaveMR:

Stokes Wave and Cnoidal Wave
---------------------------------------------------

Stokes wave is a nonlinear wave in deep water and possesses sharper crests and
flatter troughs than a linear wave. In |prod|, it is generated using either
Fenton's Fourier series method or Fenton's fifth-order theory. The former
provides higher order accuracy than the latter thus is the recommended Stokes
wave generator. To define Stokes wave at the mesh boundary, in the boundary
condition window, go to :guilabel:`Wave Definition` and choose
:guilabel:`Stokes and Cnoidal (Fourier series method)` or :guilabel:`Stokes
(Fenton's fifth-order theory)` and then click on :guilabel:`Definition` to
bring up the :guilabel:`Wave Definition` window.

  .. image:: images/model-reference/stokes-cnoidal-wave-definition.*
     :alt: Solitary Wave Definition

A Cnoidal wave is a nonlinear wave in shallow water. It has even sharper crests
and flatter troughs than the Stokes wave. In |prod|, it is generated using
Fenton's Fourier series method. To define a cnoidal wave, choose
:guilabel:`Stokes and Cnoidal (Fourier series method)` in the boundary condition
window and then click on :guilabel:`Definition` to bring up the :guilabel:`Wave
Definition` window.

In the :guilabel:`Wave Attributes` area of the wave definition window, specify
:guilabel:`Wave height` (the vertical distance from trough to crest) and
:guilabel:`Wave period` or :guilabel:`Wavelength` in their input boxes. Wave
period and wavelength are not independent variables thus cannot be given at the
same time.

Similar to the linear wave, the Stokes and cnoidal wave solutions are derived
for an infinite reservoir with flat bottom, which is assumed to exist outside
the computational domain and immediately adjacent to the mesh boundary. The
:guilabel:`Mean fluid depth` at the boundary defines the undisturbed fluid depth
in the reservoir. It defaults to the difference between the :guilabel:`Fluid
elevation` (the z-coordinate of the undisturbed surface) and the minimum
z-coordinate of the computational domain. Users need to define the
:guilabel:`Mean fluid depth` if it is different from its default value.

The model allows for existence of a constant net current (inflow or outflow)
in any horizontal direction at the wave boundary, but the current must be
slower than the wave speed for the wave solution to be valid. Find
:menuselection:`Current velocities --> X velocity and Y velocity`, and enter
the x and y velocity components of the current, respectively. The current is
assumed uniform across the boundary.

During one wave period for all oscillatory waves, including
:guilabel:`Linear`, :guilabel:`Stokes and cnoidal` waves, more fluid moves
into the domain at the wave boundary than out of the domain. This is because
fluid has a higher elevation when moving in than when moving out. Moreover,
for :guilabel:`Stokes and cnoidal` waves, fluid moves faster at the wave crest
than at the trough. This may result in a net increase of fluid volume in the
domain over time in certain circumstances. As an option, users can choose to
automatically compensate for the net fluid volume influx induced by the wave
motion at the boundary by going to :menuselection:`Numerics --> Wave boundary
condition` and checking :guilabel:`Eliminate net volume flux`. Otherwise,
check :guilabel:`Include net volume flux at wave boundaries`. This selection
applies to all wave boundaries in the simulation.

.. seealso:: \  \ :ref:`StokesWaveGeneratorTh` and :ref:`StokesCnoidalWavesGeneratorTh` in the Theory manual.


.. index:: solitary wave

.. index::
   single: waves; solitary

.. _waveBoundaryConditionSolitaryWaveMR:

Solitary Wave
---------------------------------------------------

To define a solitary wave at the mesh boundary, in the mesh boundary window, go
to :guilabel:`Wave Definition` and choose :guilabel:`Solitary` and then click on
:guilabel:`Definition` to bring up the :guilabel:`Solitary Wave Definition`
window. In the :guilabel:`Wave attributes` area, specify :guilabel:`Wave height`
which is the vertical distance from the undisturbed water level to the wave
crest. Similarly to the other types of waves, solution of the solitary wave is
derived for an infinite reservoir with flat bottom, which is assumed to exist
outside the computational domain and immediately adjacent to the mesh boundary.
The :guilabel:`Mean fluid depth` defines the undisturbed fluid depth in the
reservoir. It defaults to the difference between the :guilabel:`Fluid elevation`
(i.e., the z-coordinate of the undisturbed surface) and the minimum z-coordinate
of the computational domain. Users need to define the :guilabel:`Mean fluid
depth` if it is different from its default value.

  .. image:: images/model-reference/solitary-wave-definition-with-values.*
     :alt: Solitary Wave Definition showing values

The solitary wave is initially located outside the computational domain. By
default, the initial distance from the crest to the wave boundary is one half of
the wavelength. The wavelength of a solitary wave is the extent of the wave in
its propagation direction. It is measured between two points at opposite sides
of the crest where the surface displacement is 1% of the wave height. If that
distance is different from its default value, specify it in its input box.

The solitary wave model allows for existence of a constant net current (inflow
or outflow) in any horizontal direction at the wave boundary, but the current
must be slower than the wave speed for the solitary wave solution to be valid.
If such a current exists, in :menuselection:`Current velocities --> X velocity
and Y velocity`, enter the x and y velocity components of the current,
respectively. The current is assumed uniform across the boundary.

.. seealso:: \  \ :ref:`SolitaryWavesGeneratorTh` in the Theory manual.

.. index:: random wave

.. index::
   single: waves; random

.. _waveBoundaryConditionRandomWaveMR:

Random Wave
---------------------------------------------------

A random wave is treated as a superposition of many linear component waves with
different wave periods, amplitudes and initial phases. In |prod|, the code
automatically generates 1000 linear component waves at the wave boundary for a
random wave simulation. The periods are evenly distributed from 0.5s to 50s. The
initial phases are randomly selected between 0 to 2\ |pi|. The wave amplitudes
are calculated using wave energy spectrum. Two internally defined energy spectra
are available for users to choose: :guilabel:`Pierson-Moskowitz (P-M) spectrum`
and :guilabel:`JONSWAP spectrum`. Users can also define their own wave energy
spectrum in an external data file.

  .. image:: images/model-reference/random-wave-definition.*
     :alt: Random Wave Definition

To specify a random wave, in the boundary condition window, go to
:guilabel:`Wave Definition` and select :guilabel:`Random` then click on
:guilabel:`Definition` to bring up the :guilabel:`Random Wave Definition`
window. Under :guilabel:`Energy spectrum type`, select the type of wave energy
spectrum. If the :guilabel:`Pierson-Moskowitz (P-M)` or :guilabel:`JONSWAP`
spectra are used, specify wind speed **10 m** above the sea level in the
wind speed input box. For :guilabel:`JONSWAP` spectrum, users also need to
define :guilabel:`Fetch length` and :guilabel:`Peak enhancement factor`. The
default value of the peak enhancement factor is 3.3. The :guilabel:`Fetch
length` must be defined as there is no default. Details on this and another
parameters is found in :ref:`RandomWavesGeneratorTh`.

If users want to use their own wave energy spectrum, select :guilabel:`Energy
spectrum file` and load the existing data file that defines the wave spectrum.
There should be two columns of data in the file. The left one is a series of
angular frequencies of waves (in :math:`rad/time`), and the right is the corresponding
energy values (in :math:`Length^2/time`). The file should not have a header or title line, 
and the total number of rows of data should not exceed 1000. The delimiter for the columns 
can be a space, comma, or tab. There is no restriction on the extension of the file name.

.. seealso:: \  \ :ref:`RandomWavesGeneratorTh` in the Theory manual.

.. index:: wave motion

.. _waveBoundaryConditionInitializationWaveMotionMR:

Initialization of Wave Motion
---------------------------------------------------

Wave motion can also be defined as an initial condition. This is to allow the
wave to initially exist throughout the computational domain so that
computation time to reach steady wave motion can be shortened. The initial
wave elevation and fluid velocity are generated using the same wave generator
and the same wave parameters as those at the wave boundary. To initialize wave
motion, go to :menuselection:`Model Setup --> Initial --> Global --> Fluid initialization` 
and select :guilabel:`Use wave boundary` in
the drop-down input box. In :guilabel:`Reference mesh block` and
:guilabel:`Reference mesh boundary`, select the mesh block and the wave
boundary which are used to define the initial wave motion.

  .. image:: images/model-reference/initialization-wave-motion-fluid-initialization.*
     :alt: Fluid initialization

.. index:: wave reflection

Minimizing Wave Reflections from Mesh Boundaries
---------------------------------------------------

All outlet boundaries will reflect some portion of an incident wave, regardless of the selected boundary 
condition, and the reflected portion of the wave can have a negative impact on the solution. Wave
reflections can be minimized by placing a wave-absorbing layer (sponge layer) before the outlet boundary. 
Refer to the section :ref:`waveAbsorbingLayerMR` for how to set up a wave-absorbing layer.   

.. index:: volume gain at wave boundary

Using the shallow water model for wave simulations
---------------------------------------------------

The shallow water model requires that the horizontal scale of fluid flow is much longer than water 
depth. Typically in wave simulation, the flow horizontal scale is the wave length rather than the 
horizontal length of the domain. More specifically, only shallow water wave (defined as 
:math:`d/\lambda<20`, where  :math:`d` and  :math:`\lambda` are water 
depth and wavelength, respectively) can be simulated using the shallow water model. Significant errors may be 
introduced if intermediate water wave or deep water wave is simulated using the shallow water model. 



.. index::
   single: Model Reference; wave-absorbing layer; sponge layer

.. index:: wwave-absorbing layer; sponge layer

.. _waveAbsorbingLayerMR:

Wave-absorbing Layer (Sponge Layer) at Outflow Boundary
========================================================

When periodic traveling waves reach an outflow boundary, undesired wave
reflection occurs more or less  depending on the boundary condition. As a
result, the waveform in the region of interest may become  irregular, and
fluid volume in the computational domain may experience significant
conservation problem. A  wave-absorbing layer or sponge layer is a special
region installed before an outflow boundary to absorb  wave motion, which
reduces wave reflection from the boundary. As described in the :doc:`theory`
manual section :ref:`spongeLayerTh`, the absorption is implemented by an
artificial linear damping force to dissipate wave motion. It works most
effectively if the outflow boundary condition (radiation boundary condition)
is used at the boundary at the same time.

There are two methods for defining a wave absorbing region; 1) wave-absorbing
component, 2) wave-absorbing boundary. Both methods are described below.

.. _waveAbsorbingComponentMR:

Wave-absorbing Component
------------------------------

A wave-absorbing layer is defined by a special geometry component called a 
wave-absorbing component. It is created using the same methods for other geometry 
components (See :ref:`geometryms`), but the :guilabel:`Type` must be selected 
as :guilabel:`Wave absorbing`. It is completely open to fluid flow but applies damping to wave motion. 
Its area and volume fractions are equal to 1. The component must
extend to or beyond the outflow boundary. For flexibility, the component can
be defined with multiple subcomponents using both STL and primitive types and
its shape can be arbitrary. In most applications, however, only a simple
rectangular block is needed. It is recommended the layer thickness in the
downstream direction be one wavelength. 

To define the wave-absorbing parameters, a point on the starting plane of the
absorbing layer must be specified as well as the downstream direction of wave
motion (toward the outflow boundary). The starting plane is a vertical plane
going through the user-defined point and parallel to the outflow boundary,
while the end plane is the outflow boundary. Wave damping occurs only in the
region covered by the absorbing component between the two planes. 

Properties are defined in the :guilabel:`Geometry` widget by selecting the wave absorbing component and navigating 
to the :menuselection:`Wave absorbing properties` in the :guilabel:`Component Properties` window. 

 .. image:: images/model-reference/Wave-absorbing_1.*
     :alt: Wave-absorbing component

In the edit boxes, enter the x, y and z coordinates for the :guilabel:`Starting Point` 
(the point on the starting plane) and the downstream direction vector.
Users need to define the damping coefficient values at both the starting and
end planes of the wave-absorbing layer. Inside the absorbing layer, the
damping coefficient is evaluated by the code via linear interpolation. It is
found that a linear increase of the damping coefficient in the downstream
direction works more effectively to reduce wave reflection. In the edit boxes
enter the damping coefficient at the starting and the end planes.
Their default values are 0.0 and 1.0 1/s, respectively.

The wave-absorbing layer is designed not to damp a background stream. If the
stream velocity in the wave-absorbing layer is known, for :guilabel:`Background Stream Velocity` 
select :menuselection:`User prescribed` and enter the x, y and z
velocity components. If this value us unknown, select the option for 
:menuselection:`Code calculated` to allow the code to calculate the background stream velocity. 
Only select this last option when the stream exists and its velocity is unknown in the wave-absorbing
layer. Note the code-calculated background stream velocity may introduce
error.

.. seealso:: \  Theory manual sections :ref:`OutflowBoundaryConditionsTh` and :ref:`spongeLayerTh`.

.. index:: wave absorbing boundary

.. index::
    single: Model Reference; wave absorbing boundary

.. _waveAbsorbingBoundaryMR:

Wave-absorbing Boundary
--------------------------------

A wave-absorbing boundary is defined by selecting an :menuselection:`Outflow` or :menuselection:`Continuative`
boundary condition and then checking the :guilabel:`Wave absorbing layer`
check box. Required is a length, which at a minimum, should be at least one
wave length. Choosing this boundary type will automatically
connect the wave absorbing layer that exists within the computational domain
to the boundary face in which the wave-absorbing boundary condition is
applied.

The damping coefficients and the :guilabel:`Background Stream velocity` are
the same as described above in the section on :ref:`waveAbsorbingComponentMR`.

  .. image:: images/model-reference/wave_absorbing_boundary.*
     :alt: Wave-absorbing Boundary Definition
     :width: 4.09 in

.. seealso:: \  Theory manual sections :ref:`OutflowBoundaryConditionsTh` and :ref:`spongeLayerTh`.




.. index::
   single: Model Reference; moisture drying model
   single: models; moisture drying

.. index:: moisture drying model

.. _moistureDryingMR:

========================================================
Moisture Drying Model
========================================================

Porous materials and sand molds may have moisture distributed throughout. This
moisture will evaporate due to temperature changes or due to exposure to dry air.
An example is during metal casting in sand molds, where the mold temperature
increases during solidification of the casting. The latent heat released
during evaporation may significantly affect the temperature evolution in the
mold and the cooling rate of the casting.

To use the model, go to :menuselection:`Physics --> Moisture` and the
following window appears:

  .. image:: images/model-reference/moisture-drying-physics-window.*
     :alt: Moisture drying window

The simpler model is the :guilabel:`Isothermal moisture drying model`, which
assumes that the moisture in the component evaporates at a constant
temperature (i.e., the resulting affects on saturation temperatures due to
pressure changes are minimal). When using this model, data *must* be provided
here for the moisture :guilabel:`Density`, :guilabel:`Specific heat`,
:guilabel:`Evaporation temperature`, and :guilabel:`Latent heat of
evaporation`. Note that these values do not have to correspond to any data
provided for any existing fluid in the simulation. The default values provided
are for water in CGS units -- enter different values if needed for your
simulation.

Under :guilabel:`Moisture Content` on the right side of the window are the
options on how the initial conditions of moisture within the component(s) are
to be entered. The default is :guilabel:`Percent weight fraction`, where the
initial data is the percentage of the total weight of the component that is
moisture. Select :guilabel:`Weight per bulk component volume` if data on the
mass of moisture per unit volume of the component is preferable.

The :guilabel:`Two-phase moisture drying model` option is more complex, and
can only be used for two-fluid simulations with compressible flow and the non-\
condensable gas model (see
:ref:`condensationEvaporationTwoFluidsNonCondensableGasMR`). Confirm here the
:guilabel:`Gas constant` and :guilabel:`Specific heat` data for the non-\
condensable component of Fluid 2 -- the default values are for air in CGS
units.

The :guilabel:`Isothermal moisture drying model` in |prod| assumes that the
vapor escapes from the component immediately after evaporation and no re-\
condensation occurs. This significantly simplifies the model since no separate
vapor transport equation has to be solved. The model can be used only if
:menuselection:`Physics --> Heat transfer --> Solve full energy equation in
solids model` is activated. Moisture can only exist in components with non-\
zero values of :guilabel:`Density*Specific heat` and :guilabel:`Thermal
Conductivity`, that is, in components that can have a distribution of
temperature within them. Porosity of moist components need not be set, and the
:guilabel:`Density*Specific heat` and :guilabel:`Thermal Conductivity` values
are *macroscopic*: the porosity is included in the values.

The :guilabel:`Two-phase moisture drying model` requires that moist components
be porous; the vapor produced by the moisture drying model becomes part of the
vapor fluid 2, and thus is transported through the porous component.
Additionally, it is necessary to activate the :guilabel:`Two-\ fluid phase
change` model in :menuselection:`Physics --> Bubble and phase change`, along
with checking the option for :guilabel:`Non-\ condensable gas model`.
Therefore, the evaporation of moisture is controlled by the local saturation
pressure and local pressure within the pore space, and the partial pressure of
the vapor within the pore space. The latent heat of vaporization and specific
heat are defined in the phase change model (see
:ref:`condensationEvaporationTwoFluidsMR`). This model can only be used for
components with non-\ zero values of :guilabel:`Density*Specific heat` and
:guilabel:`Thermal Conductivity`, that is, in components that can have a
distribution of temperature within them. However, with this model, the
:guilabel:`Density*Specific heat` and :guilabel:`Thermal Conductivity` values
are microscopic values for the solid part of the component only (i.e., not
including the porosity, since the assigned porosity is used to compute the
values used in the computation).

  .. image:: images/model-reference/moisture-drying-component-setup.*
     :alt: Moisture drying component setup

The initial uniform moisture content for a component is set in
:menuselection:`Model Setup --> Geometry --> Component --> Moisture
Properties`. Select :guilabel:`Yes` from the drop-down menu next to
:guilabel:`Contains Moisture`, and specify the :guilabel:`Moisture content` as
either the :guilabel:`Percent weight fraction` (dimensionless value between 0
and 100) or :guilabel:`Weight per bulk component volume` (units of
mass/volume), as defined in :menuselection:`Physics --> Moisture`.

It is necessary also to provide data for the :guilabel:`Dry Density` of the
component. For the :guilabel:`Isothermal moisture drying model` this is the
*macroscopic* value of the density (i.e., including the porosity), while for
the :guilabel:`Two-phase moisture drying model` it is the microscopic value
(i.e., not considering the porosity).

Moisture can be viewed by plotting :guilabel:`Moisture content` from
:menuselection:`Analyze --> 2-D` or :menuselection:`3-D`. The
total moisture volume can also be plotted as a function of time in
:guilabel:`History` data in :menuselection:`Analyze --> Probe`, similar to the
total fluid volume.

.. note:: 

   * The :guilabel:`Specific heat` of the moisture is added to that of the "dry"
     component, but the component conductivity is not adjusted for moisture
     content.
   * For the :guilabel:`Isothermal moisture drying model` in |prod| the presence
     of moisture implies that the component is porous. However, the user does
     not need to employ the porous component model to use the moisture model,
     although moisture bearing components can be porous. In the latter case the
     bulk component volume is defined as
     :math:`V_{\text{BULK}}=V_{\text{OBS}}/(1-\phi)` where :math:`\phi` is the
     component porosity and :math:`V_{\text{OBS}}` is the actual (solid)
     component volume.


.. _moving_objects_top:

=======================
Moving objects
=======================


.. index::
   single: Model Reference; general moving objects (basics)
   single: models; general moving objects

.. index:: general moving objects, prescribed motion, coupled motion

.. _gmoBasicsMR:


General Moving Objects
========================================================

Basics
--------------

The general moving objects (GMO) model in |prod| can simulate rigid body
motion, which is either user-prescribed (prescribed motion) or dynamically
coupled with fluid flow (coupled motion). If an object's motion is prescribed,
fluid flow is affected by the object's motion, but the object's motion is not
affected by fluid flow. If an object has coupled motion, however, the object's
motion and fluid flow are coupled dynamically and affect each other. In both
cases, a moving object can possess six degrees of freedom (DOF), or rotate
about a fixed point or a fixed axis. The GMO model allows the location of the
fixed point or axis to be arbitrary (it can be inside or outside the object
and the computational domain), but the fixed axis must be parallel to one of
the three coordinate axes of the space reference system. In one simulation,
multiple moving objects with independent motion types can exist (the total
number of moving and non-moving components cannot exceed 500). Any object
under coupled motion can undergo simultaneous collisions with other moving and
non-moving objects and wall and symmetry mesh boundaries (See
:ref:`gmoCollisionMR`). The model also allows the existence of multiple (up to
100) elastic linear and torsion springs, elastic ropes and mooring lines 
which are attached to moving objects and apply forces or torques to them 
(See :ref:`gmoSpringsRopesMR` and :ref:`gmoMooringLinesMR`).

In general, the motion of a rigid body can be described with six velocity
components: three for translation and three for rotation. In the most general
cases of coupled motion, all the available velocity components are coupled
with fluid flow. However, the velocity components can also be partially
prescribed and partially coupled in complex coupled-motion problems (e.g., a
ship in a stream can have its pitch, roll and heave to be coupled but yaw,
sway and surge prescribed). For coupled motion only, in addition to the
hydraulic, gravitational, inertial and spring forces and torques which are
calculated by the code, additional control forces can be prescribed by the
user. The control forces can be defined either as up to five forces with their
application points fixed on the object or as a net control force and torque.
The net control force is applied to the GMO's mass center, while the control
torque is applied about the mass center for 6-DOF motion, and about the fixed
point or fixed axis for those kinds of motions. The inertial force and torque
exist only if the Non-inertial Reference Frame model is activated.

In |prod|, a GMO is classified as a geometry component that is either porous or
non-porous. As with stationary components, a GMO can be composed of a number
of geometry subcomponents. Each subcomponent can be defined either by
quadratic functions and primitives, or by STL data, and can be solid, hole or
complement. If STL files are used, since GMO geometry is re-generated at every
time step in the computation, the user should strive to minimize the number of
triangle facets used to define the GMO to achieve faster execution of the
solver while maintaining the necessary level of the geometry resolution. For
mass properties, different subcomponents of an object can possess different
mass densities.

In order to define the motion of a GMO and interpret the computational results
correctly, the user needs to understand the body-fixed reference system (body
system) which is always fixed on the object and experiences the same motion. In
the |prod| preprocessor, the body system (x', y', z') is automatically set up
for each GMO. The initial directions of its coordinate axes (at t=0) are the
same as those of the space system (x, y, z). The origin of the body system is
fixed at the GMO's reference point which is a point automatically set on each
moving object in accordance with the object's motion type. The reference point
is:

* the object's mass center for the coupled 6-DOF motion;
* the fixed point for the fixed-point motion;
* a point on the fixed axis for the fixed-axis rotation;
* a user-defined reference point for the prescribed 6-DOF motion. 

If the reference point is not given by users for the prescribed 6-DOF motion, it is set by the code at the mass center (if mass properties are given) or the geometry center (if mass properties are not given) of the object.

The reference pressure for a GMO is a component-specific parameter. It is the pressure on the blocked
surface of a GMO and also the pressure on the GMO surface outside the computational domain. For example, 
for an initially closed valve, the reference pressure is the pressure applied at the contact (blocked) 
surface of the valve. When a GMO is partially or completely outside the computational domain, the 
reference pressure is the pressure on the GMO surface outside the domain. Without the reference 
pressure, the contact surface of a valve will have zero pressure and the valve may be impossible to 
open, and a GMO with coupled motion can be sucked out of the domain by the zero outside pressure if it 
is located at the domain boundary. 

The reference pressure can be either user-specified (default) or code-calculated. If user-specified, its 
default value is the initial vapor void pressure :envvar:`PVOID`; otherwise it is calculated by the code as the 
average pressure on open surface of the GMO inside the domain.  

The GMO's motion can be defined through the GUI using four steps:

1. Activate the GMO model;
#. Create the GMO's initial geometry;
#. Specify the GMO's motion-related parameters, and
#. Define the GMO's mass properties.

Without the activation of the GMO model in step 1, the object created as a GMO
will be treated as a non-moving object, even if steps 2 to 4 are accomplished.

.. index:: 
   single: general moving objects; activate
   single: implicit options; general moving objects

.. _step1activateGMOmodelMR:

Step 1: Activate the GMO Model
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

To activate the GMO model, go to :menuselection:`Model Setup --> Physics -->
Moving and simple deforming objects` and check the :guilabel:`Activate general
moving objects (GMO) model` box.

  .. image:: images/model-reference/gmo-basics-moving-and-simple-deforming-objects.*
     :alt: Moving and simple deforming objects

The GMO model has two numerical methods to treat the interaction between fluid
and moving objects: an *explicit* and an *implicit* method. If no coupled
motion exists, the two methods are identical. For coupled motion, the explicit
method, in general, works only for heavy GMO problem, i.e., all moving objects
under coupled motion have larger mass densities than that of fluid and their
added mass is relatively small. The implicit method, however, works for both
heavy and light GMO problems. A light GMO problem means at least one of the
moving objects under coupled motion has smaller mass densities than that of
fluid or their added mass is large. The user may change the selection on the
:guilabel:`Moving and deforming objects` window from the :guilabel:`Physics` widget 
or at :menuselection:`Numerics --> Other explicit/implicit solver options --> Moving object/fluid coupling`.

.. index::
   single: general moving objects; initial geometry

.. _step2createGMOinitialGeometryMR:

Step 2: Create the GMO's Initial Geometry
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

In the :guilabel:`Model Setup --> Geometry` widget, create the desired geometry for the
GMO components using either primitives and/or imported STL files in the same
way as is done for any stationary component. The component can be either
:guilabel:`standard` or :guilabel:`porous`. To set up a porous component,
refer to :ref:`flowInPorousComponentsMR`. Note that the :guilabel:`Copy`
function cannot be used with geometry components representing GMOs.

.. index::
   single: general moving objects; motion related parameters

.. _step3specifyGMOmotionRelatedParametersMR:

Step 3: Specify the GMO's Motion Related Parameters
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

The following section discusses how to set up parameters for prescribed and
coupled 6-DOF motion, fixed-point motion and fixed-axis motion. The user can
go directly to the appropriate part.

.. index::
   pair: 6 DOF; six degrees of freedom
   single: prescribed motion; 6 DOF

.. _prescribed6DOFMR:

Prescribed 6-DOF Motion 
""""""""""""""""""""""""""""""""""""""""""

In :menuselection:`Model Setup --> Geometry --> Component (the desired
GMO component) --> Component properties --> Moving object --> Type of Moving Object`, select :guilabel:`Prescribed
motion`. Then navigate to :menuselection:`Moving Object Properties --> Edit --> Motion Constraints`. Under
:guilabel:`Type of Constraint`, select :guilabel:`6 Degrees of Freedom` in the
combo box.

  .. image:: images/model-reference/geometry-gmo.*
     :alt: Geometry tree -Type of moving object - prescribed motion

Clicking on :guilabel:`Moving Object Properties --> Edit` opens the motion definition dialog:

  .. image:: images/model-reference/gmo-basics-motion-constraints-6dof-moving-object-setup.*
     :alt: Moving Object Setup - Motion constraints - 6 DOF 

To define the object's velocity, go to the :guilabel:`Initial/Prescribed
Velocities` tab in the :guilabel:`Moving object setup` window. The prescribed
6-DOF motion is described as a superimposition of a translation of a reference
point and a rotation about the reference point. The reference point can be
anywhere inside or outside the moving object and the computational domain. The
user needs to enter its initial x, y and z coordinates (at t=0) in the provided
edit boxes. By default, the reference point is determined by the preprocessor in
two different ways depending on whether the object's mass properties are given:
if mass properties (either mass density or integrated mass properties) are
given, then the mass center of the moving object is used as the reference point;
otherwise, the object's geometric center will be calculated and used as the
reference point. 

With the reference point provided (or left for the code to calculate), users
can define the :guilabel:`translational velocity components` for the reference
point in space system and the :guilabel:`angular velocity components` (in
radians/time) in body system. Each velocity component can be defined either as
a sinusoidal or a piecewise linear function of time by making a selection in
the corresponding combo box. For a constant velocity component, choose
:guilabel:`Non-Sinusoidal` and simply enter its value in the corresponding
input box (the default value is 0.0). If a velocity component is 
Non-sinusoidal and time-dependent, click on the corresponding :guilabel:`Tabular`
button to open a data table and enter values for the velocity component and
time. Alternatively, the user can also import a data file for the velocity
component versus time by clicking :menuselection:`Tabular --> Import Values`.
The file must have two columns of data which represent time and velocity from
left to right and must have a :file:`csv` extension. If the velocity component
is sinusoidal in time, then enter the values for :guilabel:`Amplitude`,
:guilabel:`Frequency` (in Hz) and :guilabel:`Initial Phase` (in degrees) in
the input boxes. The expression for the sinusoidal velocity component is

.. math:: v = A\sin (2\pi ft + {\varphi _0})

where:

* :math:`A` is the amplitude, 
* :math:`f` is the frequency, and 
* :math:`{\varphi _0}` is the initial phase.

  .. image:: images/model-reference/gmo-basics-initial-prescribed-velocities-moving-obj-setup.*
     :alt: Moving Object Setup - Initial/Prescribed Velocities tab 

|

  .. image:: images/model-reference/gmo-basics-time-edit-table.*
     :alt: Time edit tables 

Users can set limits for the translational displacements of the object's
reference point in both negative and positive x, y and z directions in space
system. The displacements are measured from the initial location of the
reference point. During motion, the reference point cannot go beyond these
limits but can move back to the allowed range after it reaches a limit. To set
the limits for translation, go to the :guilabel:`Motion Constraints` tab and
enter the maximum displacements allowed in the corresponding input boxes,
using absolute values. By default, these values are infinite. Note the
:guilabel:`Limits for rotation` is only for fixed-axis rotation thus cannot be
set for 6-DOF motion.

.. index::
   single: prescribed motion; fixed point

.. _prescribedFixedPointMotionMR:

Prescribed Fixed-point Motion
""""""""""""""""""""""""""""""""""""""""

In :menuselection:`Model Setup --> Geometry --> Component (the desired
GMO component) --> Type of Moving Object`, select
:guilabel:`Prescribed motion`. Go to :menuselection:`Moving object properties
--> Edit --> Motion Constraints`. Under :guilabel:`Type of Constraint`, select
:guilabel:`Fixed point rotation` in the combo box and enter the x, y and z
coordinates of the fixed point in the corresponding input boxes.

To define the velocity of the object, go to the :guilabel:`Initial/Prescribed
Velocities` tab in the :guilabel:`Moving object setup` window. The velocity
components to be defined are the x, y and z components of the angular velocity
(in radians/time) in the body system. Each velocity component can be defined as
either a sinusoidal or a piecewise linear function of time by making a
selection in the corresponding combo box. For a constant velocity component,
choose :guilabel:`Non-Sinusoidal` and simply enter its value in its input box
(the default value is 0.0). If a velocity component is time-variant and
:guilabel:`Non-sinusoidal`, click on the :guilabel:`Tabular` button to open a
data table and enter the values for the velocity component and time.
Alternatively, the user can also import a data file for the velocity component
versus time by clicking :menuselection:`Tabular --> Import Values`. The file
must have two columns of data which represent time and velocity component from
left to right and must have a :file:`csv` extension. If the velocity component
is sinusoidal in time, then enter the values for :guilabel:`Amplitude`,
:guilabel:`Frequency` (in cycles/time) and :guilabel:`Initial Phase` (in
degrees) in the corresponding input boxes. The expression for a sinusoidal
angular velocity component is

.. math:: \omega  = A\sin(2\pi ft + {\varphi _0})

where: 

* :math:`A` is the amplitude, 
* :math:`f` is the frequency, and 
* :math:`\varphi _0` is the initial phase.

.. index::
   single: prescribed motion; fixed axis

.. _prescribedFixedAxisMotionMR:

Prescribed Fixed-Axis Motion
""""""""""""""""""""""""""""""""""""""""""

In :menuselection:`Model Setup --> Geometry --> Component (the desired
GMO component) --> Component properties --> Moving object --> Type of Moving Object`, select
:guilabel:`Coupled motion`. Then navigate to :menuselection:`Moving Object Properties --> Edit --> Motion Constraints`. Under
:guilabel:`Type of Constraint`, select
:guilabel:`Fixed X-Axis Rotation` or :guilabel:`Fixed Y-Axis Rotation` or
:guilabel:`Fixed Z-Axis Rotation` in the combo box depending on which coordinate
axis the rotational axis is parallel to.

Coordinates of the rotational axis need be given in two of the three input boxes
for :guilabel:`Fixed Axis/Point X Coordinate`, :guilabel:`Fixed Axis/Point Y
Coordinate` and :guilabel:`Fixed Axis/Point Z Coordinate`. For example, if the
rotational axis is parallel to the z-axis, then the x and y coordinates for the
rotational axis must be defined. Users can also set limits for the object's
rotational angle in both positive and negative directions. The rotational angle
(i.e., angular displacement) is a vector and measured from the object's initial
orientation based on the right-hand rule. Its value is positive if it points in
the positive direction of the coordinate axis which the rotational axis is
parallel to. The object cannot rotate beyond these limits but can rotate back to
the allowed angular range after it reaches a limit. To set the limits for
rotation, in :menuselection:`Motion Constraints --> Limits for rotation`, enter
the :guilabel:`Maximum rotational angle` allowed in negative and positive
directions in the corresponding input boxes, using absolute values in degrees.
By default, these values are infinite.

  .. image:: images/model-reference/gmo-basics-motion-constraints-moving-object-setup.*
     :alt: Moving Object Setup (note: BETA image) - motion constraints

To define the angular velocity of an object (in radians/time), go to
:guilabel:`Initial/Prescribed Velocities`. The angular velocity can be defined
either as a sinusoidal or a piecewise linear function of time by making a
selection in the corresponding combo box. For a constant angular velocity,
choose :guilabel:`Non-Sinusoidal` and simply enter its value in its input box
(the default value is 0.0). If it is Non-sinusoidal in time, click on the
corresponding :guilabel:`Tabular` button to open a data table and enter the
values for the angular velocity and time. Alternatively, the user can also
import a data file for the velocity component versus time by clicking
:menuselection:`Tabular --> Import Values`. The file must
have two columns of data which represent time and angular velocity from left to
right and must have a :file:`csv` extension. If the angular velocity is
sinusoidal in time, then enter the values for :guilabel:`Amplitude`,
:guilabel:`Frequency` (in cycles/time) and :guilabel:`Initial Phase` (in
degrees) in the corresponding input boxes. The expression for a sinusoidal
angular velocity is 

.. math:: \omega  = A\sin (2\pi ft + {\varphi _0})

where:

* :math:`A` is the amplitude, 
* :math:`f` is the frequency, and 
* :math:`\varphi _0` is the initial phase.

.. index::
   pair: 6 DOF; six degrees of separation

.. index::
   single: coupled motion; 6 DOF

.. _Coupled6DOFMR:

Coupled 6-DOF motion
""""""""""""""""""""""""""""""""""

In :menuselection:`Model Setup --> Geometry --> Component (the desired
GMO component) --> Component properties --> Moving object --> Type of Moving Object`, select
:guilabel:`Coupled motion`. Then navigate to :menuselection:`Moving Object Properties --> Edit --> Motion Constraints`. Under
:guilabel:`Type of Constraint`, select :guilabel:`6 Degrees of Freedom` in the combo box.

Users need to define the initial velocities for the object. Go to the
:guilabel:`Initial/Prescribed Velocities` tab. Enter the x, y, and z components
of the initial velocity of the GMO's mass center in :guilabel:`X Initial
Velocity`, :guilabel:`Y Initial Velocity` and :guilabel:`Z Initial Velocity`,
respectively. Enter the x', y' and z' components of the initial angular velocity
(in radians/time) in the body system in :guilabel:`X Initial
Angular Velocity`, :guilabel:`Y Initial Angular Velocity` and :guilabel:`Z
Initial Angular Velocity`, respectively. By default, the initial velocity
components are zero.

For coupled 6-DOF motion, user-prescribed control force(s) and torque exerting
on the object can be defined either in the space system or the body system. They
are combined with the hydraulic, gravitational, inertial and spring forces and
torques to determine the object's motion. There are two different ways to define
control force(s) and torque: prescribe either a total force and a
total torque about the object's mass center or multiple forces with their
application points fixed on the object. By default, all the control force(s) and
torque are equal to zero.

To prescribe total force and total torque, in the :guilabel:`Control Forces
and Torques` tab, choose :guilabel:`Define Total Force and Total Torque` in
the combo box. Further select :guilabel:`In Space System` or :guilabel:`In
Body System` depending on which reference system the control force and torque
are define in. If a component of the force or the torque is a constant, it can
be specified in the corresponding edit box (default is zero). If it varies
with time, then click on the :guilabel:`Tabular` button to bring up a data
input table and enter the values for the component and time. The time-variant
force and torque are treated as piecewise-linear functions of time during
simulation. Alternatively, instead of filling the data table line by line, the
user can also import a data file for the :guilabel:`force/torque component
versus time` by clicking :menuselection:`Tabular --> Import Values`. The file
must have two columns of data which represent time and the force/torque
component from left to right and must have a :file:`csv` extension.

  .. image:: images/model-reference/gmo-basics-controled-forces-define-total-force-tabular-data-moving-object-setup.*
     :alt: Moving Object setup (BETA icon) - Component 1: wood sphere - Controlled Forces and Torques

If, instead, control forces and their application points need to be defined,
then in the :guilabel:`Control Forces and Torques` tab choose
:guilabel:`Define Multiple Forces and Application Points` in the combo box.
Users can specify up to five forces. For each force, in the editor boxes,
choose the force index (1 to 5) and then select :menuselection:`Force
components in -->` :guilabel:`Space System` or :guilabel:`Body System`
depending on which reference system the force is defined in. In field on the
left, enter the initial coordinates (at t=0) for the force's application
point. In the field on the right, prescribe components of the force in x, y
and z directions of the body or space system. For a constant force component,
enter its value in the corresponding edit box. If it varies with time, then
click on the :guilabel:`Tabular` button to bring up a data input table and
enter values for the force component versus time. Tabular force input is
approximated with a piecewise-linear function of time. Alternatively, the user
can import a data file for the force versus time by clicking
:menuselection:`Tabular --> Import Values`. The file must have two columns of
data which represent time and from left to right and must have a :file:`csv`
extension.

  .. image:: images/model-reference/gmo-basics-controled-forces-define-multiple-forces-moving-object-setup.*
     :alt: Moving Object Setup - Control Forces and Torques - Space System

Motion constraints can be imposed to the object to decrease the number of the
degrees of freedom to less than six. This selection is made by setting part of
its translational and rotational velocity components as 
:guilabel:`Prescribed motion` while leaving the other components to :guilabel:`coupled motion` in
:menuselection:`Motion Constraints tab --> Translational and Rotational
Options`. Note that the translational and rotational components are in the
space system and the body system, respectively. Then go to the
:guilabel:`Initial/Prescribed Velocities` tab to define their values. A
prescribed velocity component can be defined as either a sinusoidal or
piecewise linear function of time in the combo box. For a constant velocity
component, choose :guilabel:`Non-Sinusoidal` and enter its value in its input
box (the default value is 0.0). If the velocity component is time-dependent
and non-sinusoidal, click on the :guilabel:`Tabular` button to open a data
table and enter the values for the velocity component and time. Alternatively,
the user can import a data file for the velocity component versus time by
clicking :menuselection:`Tabular --> Import values`. The file must have two
columns of data which represent time and the angular velocity component from
left to right and must have a :file:`csv` extension. It is treated as a
piecewise-linear function of time in the code. If it is a sinusoidal function
of time, instead, enter its :guilabel:`Amplitude`, :guilabel:`Frequency` (in
Hz) and :guilabel:`Initial Phase` (in degrees) in the edit boxes. The
expression for a sinusoidal velocity component is

.. math:: v = A\sin (2\pi ft + {\varphi _0})

where:

* :math:`A` is the amplitude, 
* :math:`f` is the frequency, and 
* :math:`{\varphi _0}` is the initial phase.

Users can also set limits for displacements of the object's mass center in
both negative and positive x, y and z directions in the space system, measured
from its initial location. The mass center cannot go beyond these limits but
can move back to the allowed motion range after it reaches a limit. To specify
these limits, open the :guilabel:`Motion Constraints` tab and in the
:guilabel:`Limits for translation` area, enter the absolute values of maximum
displacements in the desired coordinate directions. There are no
:guilabel:`Limits for rotation` for an object with 6-DOF coupled motion.

.. index::
   single: coupled motion; fixed point

.. _coupledFixedPointMotionMR:

Coupled Fixed-Point Motion
""""""""""""""""""""""""""""""""

In :menuselection:`Model Setup --> Geometry --> Component (the desired
GMO component) --> Component properties --> Moving object --> Type of Moving Object`, select
:guilabel:`Coupled motion`. Then navigate to :menuselection:`Moving Object Properties --> Edit --> Motion Constraints`. Under
:guilabel:`Type of Constraint`, select
:guilabel:`Fixed point rotation` in the combo box and enter the x, y and z
coordinates of the fixed point in the corresponding input boxes. The
:guilabel:`Limits for rotation` and :guilabel:`Limits for translation` cannot
be set for fixed-point motion.

Definition of the initial velocity for the object is required. Go to the
:guilabel:`Initial/Prescribed Velocities` tab and enter the x, y and z
components of initial angular velocity (in rad/time) in the boxes for
:guilabel:`X Initial Angular velocity`, :guilabel:`Y Initial Angular velocity`
and :guilabel:`Z Initial Angular velocity`. Their default values are zero.

Further constraints of motion can be imposed to the object to decrease its
number of degrees of freedom. This is done in the :guilabel:`Motion
Constraints` tab by setting part of its rotational components as prescribed
motion while leaving the others as coupled motion in the combo box for
:guilabel:`Translational and rotational options`. Note that the rotational
components are in the body system. By default, the prescribed velocity
components are equal to zero. To specify a non-zero velocity component, go to
the Initial/Prescribed Velocities tab. It can be defined as either a
sinusoidal or a piecewise linear function of time by making selection in the
corresponding combo box. For a constant velocity component, choose :guilabel:`Non-Sinusoidal` and simply enter its value in the input box (the default
value is 0.0). If it is non-sinusoidal time-dependent, click on the
:guilabel:`Tabular` button to open a data table and enter the values for the
velocity component and time. Alternatively, the user can import a data file
for the velocity component versus time by clicking :menuselection:`Tabular -->
Import values`. The file must have two columns of data which represent time
and the angular velocity component from left to right and must have a
:file:`csv` extension. If the velocity component is a sinusoidal function of
time, enter the values for :guilabel:`Amplitude`, :guilabel:`Frequency` (in
Hz) and :guilabel:`Initial Phase` (in degrees) in the input boxes. The
expression for a sinusoidal velocity component is

.. math:: \omega  = A\sin (2\pi ft + {\varphi _0})

where:

* :math:`A` is the amplitude, 
* :math:`f` is the frequency, and 
* :math:`\varphi _0` is the initial phase.

User-prescribed total torque exerting on the object can also be defined. They
are combined with the hydraulic, gravitational, inertial and spring torques to
determine the object's rotation.

In the :guilabel:`Control Forces and Torques` tab, choose :guilabel:`Define
Total Force` and :guilabel:`Total Torque` in the combo box. Further, select
:guilabel:`In Space System` or :guilabel:`In Body System` depending on which
reference system the control torque is define in. If the torque is constant,
it can be simply set in the provided edit box for its x, y and z components.
For a time-dependent control torque, click the :guilabel:`Tabular` button to
bring up data tables and then enter the values of time and the torque
components. The control torque is treated as a piecewise-linear function of
time. As an option, instead of filling the data table line by line, the user
can also import a data file for the angular velocity versus time by clicking
:menuselection:`Tabular --> Import Values`. The file must have two columns of
data which represent time and velocity from left to right and must have a
:file:`csv` extension.

.. index::
   single: coupled motion; fixed axis

.. _coupledFixedAxisMotionMR:

Coupled Fixed-Axis Motion
""""""""""""""""""""""""""""""""""""""""""""

In :menuselection:`Model Setup --> Geometry --> Component (the desired
GMO component) --> Component properties --> Moving object --> Type of Moving Object`, select
:guilabel:`Coupled motion`. Then navigate to :menuselection:`Moving Object Properties --> Edit --> Motion Constraints`. Under
:guilabel:`Type of Constraint`, select
:guilabel:`Fixed X-Axis Rotation` or :guilabel:`Fixed Y-Axis Rotation` or
:guilabel:`Fixed Z-Axis Rotation` in the combo box depending on which coordinate
axis the rotational axis is parallel to.

Coordinates of the rotational axis need be given in two of the three input boxes
for :guilabel:`Fixed Axis/Point X Coordinate`, :guilabel:`Fixed Axis/Point Y
Coordinate` and :guilabel:`Fixed Axis/Point Z Coordinate`. For example, if the
rotational axis is parallel to the z-axis, then the x and y coordinates for the
rotational axis must be defined. Users can also set limits for the object's
rotational angle in both positive and negative directions. The rotational angle
(i.e., angular displacement) is a vector and measured from the object's initial
orientation based on the right-hand rule. Its value is positive if it points to
the positive direction of the coordinate axis which the rotational axis is
parallel to. The object cannot rotate beyond these limits but can rotate back to
the allowed angular range after it reaches a limit. To set the limits for
rotation, in :menuselection:`Motion Constraints --> Limits for rotation`, enter
the maximum rotational allowed in negative and positive directions in the
corresponding input boxes, using absolute values in degrees. By default, these
values are infinite.

A definition of the initial angular velocity for the object is required. In the
:guilabel:`Initial/Prescribed Velocities` tab, enter the initial angular
velocity (in radians per time) in x, y or z direction in the corresponding input
box in the :guilabel:`Angular velocity components` area, depending on the
orientation of the rotational axis. The default value is zero.

User-prescribed total torque exerting on the object can be defined. They are
combined with the hydraulic, gravitational, inertial and spring torques to
determine the object's rotation. In the :guilabel:`Control Forces and Torques`
tab, choose :guilabel:`Define Total Force and Total Torque` in the combo box.
If the torque is constant, it can be simply set in the provided edit box for
x, y or z component of the torque, depending on direction of the coordinate
axis which the rotational axis is parallel to. For a time-dependent control
torque, click the corresponding :guilabel:`Tabular` button to bring up a data
table and then enter the values of time and the torque. The control torque is
treated as a piecewise-linear function of time in computation. As an option,
instead of filling the data table line by line, the user can also import a
data file for the torque versus time by clicking :menuselection:`Tabular -->
Import Values`. The file must have two columns of data which represent time
and torque from left to right and must have a :file:`csv` extension. The
torque about the fixed axis is the same in the space and body systems, thus
the choice of :guilabel:`In space system` or :guilabel:`In body system`
options makes no difference to the computation. User-prescribed total control
force and multiple forces are not allowed for the fixed-axis motion.

  .. image:: images/model-reference/gmo-basics-controled-forces-torques-moving-object-setup.*
     :alt: Moving Object Setup - Control Forces and Torques - Define Total Force and Total Torque - Space System 

.. index::
   single: general moving objects; mass properties

.. _step4specifyGMOmassProperties:

Step 4: Specify the GMO's Mass Properties
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Definition of the mass properties is required for any moving object with
coupled motion and is optional for objects with prescribed motion. If the mass
properties are provided for a prescribed-motion object, the solver will
calculate and output the residual control force and torque, which complement
the gravitational, hydraulic, spring, inertial and user-prescribed control
forces and torques to maintain the prescribed motion. To specify the mass
properties, click on :guilabel:`Mass Properties` to open the dialog window.
Two options are available for the mass properties definition: provide mass
density or the integrated mass properties including the total mass, mass
center and the moment of inertia tensor.

  .. image:: images/model-reference/gmo-basics-mass-properties-moving-object-setup.*
     :alt: Moving Object Setup - Define density 

The option to provide mass density is convenient if the object has a uniform
density or all its subcomponents have uniform densities. In this case, the
preprocessor will calculate the integrated mass properties for the object. In
the :guilabel:`Mass Properties` tab, select :guilabel:`Define Density` in the
combo box and enter the density value in the :guilabel:`Mass Density` input
box. By default, each subcomponent of the object takes this value as its own
mass density. If a subcomponent has a different density, define it under that
subcomponent in the geometry widget, :menuselection:`Geometry --> Component -->
Subcomponent (the desired component) --> Mass Density`.

The option to provide integrated mass properties is useful if the object's mass,
mass center and moment of inertia tensor are known parameters regardless of
whether the object's density is uniform or not. In the :guilabel:`Mass
Properties` tab, choose :guilabel:`Define Integrated Mass Properties` in the
combo box and enter the following parameters in the input boxes depending on the
type of motion:

* Total mass, initial mass center location (at t=0) and moment of inertia tensor about mass center for 6-DOF and fixed-point motion types;
* Total mass, initial mass center location (at t=0) and moment of inertia about fixed axis for fixed-axis motion type.

.. _PropertiesTransformation:

Transformation of GMO Properties
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Similarly to a regular stationary component, component transformations can be applied to a GMO 
component during its initial geometry setup following the order of magnification, rotations
(first in x, then y, and then z, in degrees) and translations. Magnification and rotations are made 
about a user-defined transformation center with its default location at the origin of the space 
coordinate system. Component transformations are independent of the subcomponent transformations 
and are applied after all its subcomponent transformations are complete. 

  .. image:: images/model-reference/GMO_transform.*

As an option, the component transformations can be applied to the body-fixed coordinate system of the GMO,
which otherwise is initially the same as the space coordinate sdystem. Certain GMO properties are defined
in the body system, such as:

1.  Motion constraints, including fixed-point location (for fixed-point motion) and fixed-axis 
location (for fixed axis rotations). Note the fixed axis *direction* is *not* affected by component 
transformation. 

2.  Mass properties. If mass density is the specified mass property, it does not change with 
component transformation. BUt if integrated mass properties are used, then the total mass, 
mass center location, moment of inertia tensor, and moment-of-inertia about fixed axis can change 
with component transformations. Mass is proportional to GMO volume, and moment-of-inertia are 
proportional to mass and square of length during the transformation. 

The moment-of-intertia tensor is defined in the GMO body system, therefore, depends on its orientation.

3.  Initial and prescribed velocities. The initial location of reference point and direction of 
translational velocity are transformed with component transformation.

4. Prescribed rotational velocities since they are always defined in the body system.

5.  Control force and torque, if defined in the GMO body system.

Applying component transformations to the GMO's body-fixed coordinate system can provide a convenient way of
defining its properties and analysing the output. Imagine running a series of simulations of flow around a 
boat at different drift angles. If this is modeled in a coordinate system in which the boat's horizontal
velocity is zero, then the initial location of the GMO can be such that it's main axes coincide with those
of the space system. In that case the moment-of-inertia tensor, which is always defined in the body system,
is easily defined. Now component transformations can be defined to place the boat to the desired orientation.
If those transformations are also applied to the GMO's body system, then the moment-of-interia tensor does not have
to be changed. The same applies to any other attributes - forces, for example, - defined in the GMO's body system.
Furthermore, the output quantities computed in the body system, *e.g.*, angular velocities, forces and torque (see below), 
are easer to interprete
as they will be computed relative to the boat's main symmetry axes, irrespective of the drift angle.

.. _step4output:

Output
^^^^^^^^^^^^^^^^^^

For each GMO component, the solver outputs time variations of several solution
variables that characterize the object's motion. These variables can be
accessed during post-processing in the :guilabel:`General history` data
catalog and can be viewed either graphically or in a text format. For
both prescribed and coupled types of motion with the mass properties provided,
the user can find the following variables:

1. Mass center coordinates in space system
#. Mass center velocity in space system
#. Angular velocity in body system
#. Hydraulic force in space system
#. Hydraulic torque in body system
#. Combined kinetic energy of translation and rotation

There will be no output for items 1, 2 and 6 for any prescribed-motion GMO if
the mass properties are not provided. Additional output of history data include:

* Location and velocity of the reference point for a prescribed 6-DOF motion
* Rotational angle for a fixed-axis motion 
* Residual control force and torque in both space and body systems for any prescribed motion and a coupled motion with constraints (fixed axis, fixed point and prescribed velocity components)
* Spring force/torque and deformation
* Mooring line extension and maximum tension force
* Mooring line tension forces at two ends in the x, y and z directions

As an option, the history data for a GMO with 6-DOF motion can also include
the buoyancy center and the metacentric heights for rotations about x and y
axes of the space system, which is useful for stability analysis of a floating
object. Go to :menuselection:`Output --> Geometry data` and check the respective box for 
:guilabel:`Buoyancy Center and Metacentric Height` for any component of interest. 
The buoyancy center is defined as the mass center of the
fluid displaced by the object. The metacentric height (GM) is the distance
from the gravitational center (point G) to the metacenter (point M). It is
positive (negative) if point G is below (above) M.

GMO components can participate in heat transfer just like any stationary solid
component. When defining specific heat of a GMO component,
:menuselection:`Component properties --> Solid Properties --> Density\*Specific
Heat` must be given.

Two options are available when defining heat sources for a GMO component: use
the specific heat flux, or the total power. When the total power is used, the
heat fluxes along the open surface of the moving object are adjusted at every
time step to maintain a constant total power. If the surface area varies
significantly with time, so will the heat fluxes. When the specific heat is used
instead, then the fluxes will be constant, but the total power may vary as the
surface area changes during the object's motion. To define heat source for a GMO
component, go to :menuselection:`Component porperties --> Solid Properties -->
Heat Source type --> Total amount or Specific amount`.

Mass sources/sinks can also be defined on the open surfaces of a GMO component.
Details can be found in :ref:`massSourcesMR`.

Although the GMO model can be used with most physical models and numerical
options, limitations exist. **To use the model properly, it is noted that**

* For coupled motion, the explicit and implicit GMO methods perform differently. 
  The implicit GMO method works for both heavy and light moving objects. The
  explicit GMO method, however, only works for heavy object problems (i.e.,
  the density of moving object is higher than the fluid density).
* When the explicit GMO method is used, solution for fully coupled moving 
  objects may become unstable if the added mass of the fluid surrounding the 
  object exceeds the object's mass. 
* If there are no GMO components with coupled motion, then the implicit and 
  explicit methods are identical and the choice of one makes no difference 
  to the computational results.
* The implicit method does not necessarily take more CPU time than the explicit 
  method, even though the former required more computational work, because it
  improves numerical stability and convergence, and allows for larger time
  step. It is thus recommended for all GMO problems.
* It is recommended that the limited compressibility be specified in the fluid 
  properties to improve numerical stability by reducing pressure fluctuations in the fluid.
* In the simulation result, fluctuations of hydraulic force may exist due to numerical 
  reasons. To reduce these fluctuations, the user can set :guilabel:`No
  f-packing` for free-surface problems in :menuselection:`Numerics --> Volume
  of fluid advection --> Advanced options` and set :guilabel:`FAVOR
  tolerance` to 0.0001 in 
  :menuselection:`Numerics --> Time-step controls --> Advanced Options --> Stability enhancement`.
  It is noted that an unnecessarily small |favor|
  tolerance factor can cause small time steps and slow down the computation.
* In order to calculate the fluid force on a moving object accurately, the 
  computational mesh needs to be reasonably fine in every part of the domain 
  where the moving object is expected to be in contact with fluid.
* An object can move completely outside the computational domain during a 
  computation. When this happens, the hydraulic forces and torques vanish, but
  the object still moves under actions of gravitational, spring, inertial and
  control forces and torques. For example, an object experiences free fall
  outside the domain under the gravitational force in the absence of all other
  forces and torques.
* If mass density is given, then the moving object must initially be placed completely 
  within the computational domain and the mesh around it should be reasonably fine so 
  that its integrated mass properties (the total mass, mass center and moment of 
  inertia tensor) can be calculated accurately by the code.
* If a moving object is composed of multiple subcomponents, they should have overlap 
  in places of contact so that no unphysical gaps are created during motion when the 
  original geometry is converted to area and volume fractions. If different subcomponents 
  are given with different mass densities, this overlap should be small to avoid big 
  errors in mass property calculation.
* A moving object cannot be of a phantom component type like lost foam or a deforming object.
* The GMO model works with the electric field model the same way as the stationary 
  objects, but no additional forces associated with electrical field are computed for moving objects.
* If a GMO is porous, light in density and high in porous media drag coefficients, then the 
  simulation may experience convergence difficulties. 
* A Courant-type stability criterion is used to calculate the maximum allowed time-step 
  size for GMO components. The stability limit ensures that the object does
  not move more than one computational cell in a single time step for accuracy
  and stability of the solution. Thus the time step is also limited by the
  speed of the moving objects during computation.

.. note:: 
   * Time-Saving Tip:  For prescribed motion, users can preview the object motion in a so-called
     "dry run" prior to the full flow simulation. To do so, simply remove all
     fluid from the computational domain to allow for faster execution. Upon the
     completion of the simulation the motion of the GMO objects can be previewed
     by post-processing the results.
   * The residual forces (and torques) are computed for the directions in which the motion of
     the object is prescribed/constrained.  They are defined as the difference
     between the total force on an object (computed from the prescribed
     mass*acceleration) and the computed forces on the object from pressure,
     shear, gravity, specified control forces, etc.  As such, they
     represent the force required to move the object as prescribed.



.. index::
   single: Model Reference; collisions
   single: models; general moving objects

.. index:: collision

.. _gmoCollisionMR:


Collision
-------------------

The GMO model allows users to have multiple moving objects in one problem, and
each of them can possess independent type of coupled or prescribed motion. At
any moment of time, each object under coupled motion can collide with any other
moving objects (of a coupled- or prescribed-motion type), non-moving objects as
well as wall- and symmetry-type mesh boundaries. Without the collision model,
objects may penetrate and overlap each other.

  .. image:: images/model-reference/gmo-moving-and-simple-deforming-objects.*
     :alt: Moving and simple deforming objects

The GMO collision model is activated by selecting :menuselection:`Physics -->
Moving and simple deforming objects --> Activate collision model`. It requires
the activation of the GMO model first, done in the same panel. For a GMO
problem with only prescribed-motion objects, it is noted that the collision
model has no effect on the computation: inter-penetration of the objects can
still happen.

The model allows each individual collision to be fully elastic, completely
plastic, or partially elastic, depending on the value of Stronge's energetic
restitution coefficient, which is an input parameter. In general, a collision
experiences two phases: compression and restitution, which are associated with
loss and recovery of kinetic energy. The Stronge's restitution coefficient is
a measure of kinetic energy recovery in the restitution phase. It depends on
the material, surface geometry and impact velocity of the colliding objects.
The range of its values is from zero to one. The value of one corresponds to a
fully elastic collision, i.e., all kinetic energy lost in the compression is
recovered in the restitution (if the collision is frictionless). Conversely, a
zero restitution coefficient means a fully plastic collision, that is, there
is no restitution phase after compression thus recovery of the kinetic energy
cannot occur. A rough estimate of the restitution coefficient can be conducted
through a simple experiment. Drop a sphere from height :math:`h_0` onto a
level anvil made of the same material and measure the rebound height
:math:`h`. The restitution coefficient can be obtained as :math:`\sqrt{^h/_{h_0}}`.
In this model, the restitution coefficient is an object-specific
constant. A global value of the restitution coefficient that applies to all
moving and non-moving objects is set in 
:menuselection:`Physics --> Moving and simple deforming objects --> Coefficient of restitution`.

Friction can be included at the contact point of each pair of colliding bodies
by defining the Coulomb's friction coefficient. A global value of the friction
coefficient that applies to all collisions is set in :menuselection:`Physics -->
Moving and simple deforming objects --> Coefficient of friction`. Friction forces apply when
the friction coefficient is positive; a collision is frictionless for the zero
value of the friction coefficient, which is the default. The existence of
friction in a collision always causes a loss of kinetic energy.

The global values of the restitution and friction coefficients are also used
in the collisions at the wall-type mesh boundaries, while collisions of the
moving objects with the symmetry mesh boundaries are always fully elastic and
frictionless.

  .. image:: images/model-reference/gmo-collision-geometry.*
     :height: 100
     :alt: GMO collision - Geometry tree

The object-specific values for the restitution and friction coefficients are
defined in the :menuselection:`Model Setup --> Geometry` widget. In the
geometry list on the left, click on :menuselection:`Geometry --> Component
(the desired component) --> Component properties --> Collision Properties` and
then enter their values in the corresponding data boxes. If an impact occurs
between two objects with different values of restitution coefficients, the
smaller value is used in that collision calculation. The same is true for the
friction coefficient.

Continuous contact, including sliding, rolling and resting of an object on top of another object, 
is simulated through a series of small-amplitude collisions, called 
micro-collisions. Micro-collisions are calculated in the same way as the ordinary
collisions thus no additional parameters are needed. The amplitude of the
micro-collisions is usually small and negligible. In case the collision strength 
is obvious in continuous contact, using smaller time step may reduce the
collision amplitude. 

If the collision model is activated but the user needs two specific objects to
have no collision throughout the computation, he can open the text editor (\
:menuselection:`File --> Edit Simulation`) and set :envvar:`ICLIDOB`\ (*m*,\
*n*) = 0 in namelist OBS, where *m* and *n* are the corresponding component
indexes. An example of such a case is when an object (component index *m*)
rotates about a pivot - another object (component index *n*). If the former
has a fixed-axis motion type, then calculating the collisions with the pivot
is not necessary. Moreover, ignoring these collisions makes the computation
more accurate and more efficient. If no collisions between a GMO component *m*
with all other objects and mesh boundaries are desired, then set
:envvar:`ICLIDOB`\ (*m*,\ *m*) to be zero. By default, :envvar:`ICLIDOB`\ (*m*,\
*n*) = 1 and :envvar:`ICLIDOB`\ (*m*,\ *m*) = 1, which means collision is allowed.

To use the model properly, users should be noted that

* The collision model is based on the impact theory for two colliding 
  objects with one contact point. If multiple contact points exist for two colliding objects 
  (e.g. surface contact) or one object has simultaneous contact with more than one objects, 
  object overlap may and may not occur if the model is used, varying from case to case. 

* To use the model, one of the two colliding object must be under coupled motion, and the other
  can have coupled or prescribed motion or no motion. The coupled motion can be 6-DOF motion, 
  translation, fixed-axis rotation or fixed-point rotation. For other constrained motion, 
  (e.g., rotation is coupled in one direction but prescribed in another direction), the
  model is not valid, and mechanical energy of the colliding objects may have conservation problem. 

* The model works with and without existence of fluid in the
  computational domain. It is required, however, that the contact point for a
  collision be within the computational domain, whereas the colliding bodies can
  be partially outside the domain at the moment of the collision. If two objects
  are completely outside the domain, their collision is not detected although
  their motions are still tracked. 

* Collisions are not calculated between a baffle
  and a moving object: they can overlap when they contact.

* The model does not calculate impact force and collision time. Instead, it calculates 
  impulse that is the product of the two quantities.  Therefore, 
  there is no output of impact force and collision time.



.. index::
   single: Model Reference; PQ^2 Analysis
   single: models; general moving objects
   
.. index:: PQ^2 analysis

.. index::
   single: Model Reference; PQ2 Analysis

.. index:: PQ2 Analysis; high pressure die casting

.. _PQ2AnalysisMR:


PQ\ :sup:`2` Analysis
-----------------------------------

PQ\ :sup:`2` analysis is important for high pressure die casting. The goal of
the PQ\ :sup:`2` analysis is to optimally match the die's designed gating
system to the part requirements and the machine's capability. PQ\ :sup:`2`
diagram is the basic tool used for PQ\ :sup:`2` analysis.

According to the Bernoulli's equation, the metal pressure at the gate is
proportional to the flow rate squared:

.. math:: P \sim Q^2
   :label: PQ2_Bernoulli

where: 

* :math:`P` is the metal pressure at the gate, and
* :math:`Q` is the metal flow rate at the gate.

The machine performance line follows the same relationship. 

Based on the die resistance, machine performance, and the part requirements,
an operating windows can be determined from the PQ\ :sup:`2` diagram, as shown
below. The die and the machine has to operate within the operating windows.

  .. image:: images/model-reference/pq2-diagram.*
     :alt: PQ2-analysis-PQ2-diagram

.. index::
   single: PQ2 analysis; model setup

Model Setup
^^^^^^^^^^^^^^^^^

PQ\ :sup:`2` analysis can only be performed on moving object with prescribed
motion. The PQ\ :sup:`2` analysis can be activated in :menuselection:`Model Setup --> 
Geometry --> Component (the desired component) --> Component properties --> Moving Object`. PQ\ :sup:`2` analysis
can only be performed on one component.

  .. image:: images/model-reference/pq2-model-setup.*
     :alt: PQ2-analysis-model-setup

The parameters :guilabel:`Maximum pressure` and :guilabel:`Maximum flow rate`
define the machine performance line.

During the design stage, the process parameters specified might not optimal,
such that the resulting pressure is beyond the machine capability. If this
happens, the option :guilabel:`Adjust velocity` can be selected so that the
piston velocity is automatically adjusted to match the machine capability. If
:guilabel:`Adjust velocity` is selected, at every time step the pressure at
the piston head will be compared with the machine performance pressure to see
if it is beyond the machine capability. If it is beyond the machine
capability, the flow rate is then reduced to match the machine capability. The
reduction is instantaneous and no machine inertia is considered. Once the
pressure drops below the machine performance line, the piston will then
accelerate to the prescribed velocity. The acceleration has to be less than
the machine :guilabel:`Maximum acceleration` specified.

If :guilabel:`Adjust velocity` is selected, the machine parameters
:guilabel:`Maximum pressure` and :guilabel:`Maximum flow rate` have to be
provided. The :guilabel:`Maximum acceleration` is also required, however, it
is by default to be infinite if not provided.

For high pressure die casting, the fast shot stage is very short. But it is
this stage that is of interest. The pressure and flow rate are written as
general history data. The data output interval has to be very small to capture
all the features in this stage. To reduce FLSGRF file size, only when flow
rate reaches :guilabel:`Minimum flow rate`, the history data output interval
is reduced to every two time steps. If :guilabel:`Minimum flow rate` is not
provided, it is default to 1/3 of the :guilabel:`Maximum flow rate`. Note that
the only purpose of :guilabel:`Minimum flow rate` is to change the history
data output frequency.

Due to the limitation of the |favor|, the piston head area computed may
fluctuate as piston pushing through the shot sleeve. As a result, the metal
flow rate computed may also fluctuate. To reduce the fluctuation,
:guilabel:`Shot sleeve diameter` is recommended to be provided, so that it can
be used to correct the metal flow rate. If only half of the domain is modeled,
the diameter needs to be scaled to reflect the real cross section area in the
simulation.

.. index::
   single: PQ2 analysis; post-processing

Post-processing
^^^^^^^^^^^^^^^^^^^^^^^^

If PQ\ :sup:`2` analysis is chosen, the pressure, flow rate, and prescribed
velocity of the specified moving object will be written to :file:`FLSGRF` file
as :guilabel:`General history` data. If :guilabel:`Adjust velocity` is
selected, the adjusted velocity will also be written as :guilabel:`General
history` data. In addition, the PQ\ :sup:`2` diagram can be drawn directly from the
history data in |fst|.

  .. image:: images/model-reference/pq2-post.*
     :alt: PQ2-post-processing


.. _simpledeformingMR:


Simple Deforming Objects
-----------------------------------


.. index::
   single: Model Reference; elastic membrane

.. index:: elastic membrane
.. _elasticMembraneMR:


Elastic Membrane
^^^^^^^^^^^^^^^^^^^^^^^^

Piezoelectric membranes are commonly used in inkjet printers to generate a pulse
of pressure to eject a droplet of ink out of a nozzle. Another application of
the model is in small pumps without moving parts other than an oscillating membrane.

The elastic membrane model simulates deformation of an elastic membrane in
response to external hydraulic and actuator forces, where *elastic membrane*
refers to a rectangular or circular thin plate with uniform thickness and
material properties. The edges of the membrane can be either simply supported
or clamped, and the membrane must be oriented perpendicular to x, y, or
z-axis. 

A membrane is created as a regular geometry component with subcomponent(s)
defined by primitive(s) or STL file(s) allowed by |prod|. The shape and
dimensions of the component do not have to exactly correspond to those of the
actual membrane, which are defined separately.  However, the membrane
definition must overlap with the component definition. For example, the
extents of the component can be made larger to overlap with the surrounding
components to prevent potential leaks in their connect regions. The thickness
of the component can also be larger than the actual membrane thickness to
allow it to be resolved in the mesh. Multiple membranes can be defined with
different geometries, locations, orientations and properties. The model is
compatible with most other models, (e.g., heat transfer across the membranes
is allowed), though an elastic membrane cannot be a porous medium or a moving
object. If a moving object collides on a membrane, the latter is treated as a
non-moving rigid object in the collision simulation.

A normal force (the :guilabel:`Actuator force`) can be applied on an area
centered on the membrane. This user-prescribed force can be defined as a
piecewise linear function of time using the tabular input or can be given as a
sinusoidal function of time.  In either case, the actuator force is uniformly
distributed over a user-specified :guilabel:`Force distribution area` which
has the same shape as the membrane, (e.g., rectangular or circular). If the
:guilabel:`Force distribution area` is set to zero, then the actuator force is
reduced to a concentrated force at the membrane center.  The following
equation is used when the force is specified as a sinusoidal  function of time:

.. math:: F = {A_f}\sin \left( {2\pi \,f\,t + {\varphi_0}} \right)

where: 

* :math:`F` is the actuator force, 
* :math:`{A_f}` is the amplitude, 
* :math:`f` is the frequency, and 
* :math:`{\varphi_0}` is the initial phase. 

To activate the elastic membrane model, open :menuselection:`Model Setup -->
Physics --> Moving and simple deforming objects` and select
:guilabel:`Activate elastic membrane and wall model`.

  .. image:: images/model-reference/elastic-membrane.*
     :alt: Elastic Membrane

Once the component representing the membrane has been created, go to
:menuselection:`Model Setup --> Geometry --> Component (desired component) --> Component properties --> Simple Deforming Object` 
and choose the :guilabel:`Type of
Simple Deforming Object` as either :guilabel:`Rectangular Membrane` or
:guilabel:`Circular Membrane`. At the :menuselection:`Deforming Object Properties` and click the :guilabel:`Edit` button to bring up
the :guilabel:`Membrane Setup` window with :guilabel:`Membrane dimensions`,
:guilabel:`Material properties` and :guilabel:`Actuator force and Reference
Pressure` tabs.

  .. image:: images/model-reference/elastic-membrane-properties.*
     :alt: Elastic membrane properties

The :guilabel:`Membrane dimensions` tab contains the inputs for defining the
size, orientation, location and edge constraint for the membrane, since these
parameters are **not** defined by the component definition.  Choose the
orientation of the membrane  (e.g., :guilabel:`Normal in X-direction`) and the
edge constraint  (e.g., :guilabel:`Clamped edges`), then define the membrane
center location using the :guilabel:`Coordinates of Membrane Center` input.
Under :guilabel:`Membrane size`, input the membrane's linear dimensions (for
rectangular membrane) or radius (for circular membrane) and thickness. As
noted above, these dimensions are about the actual size of the membrane and do
not have to correspond exactly to the dimensions of the component that is used
to define the membrane. For example, the component may represent the whole
assembly of a printer nozzle. The dimensions and the location of the membrane
can then define the part of this assembly that actually deforms. In any case,
the properties of the membrane defined in this tab are used by the model to
compute the deflections. Deflections will be zero for the part of the
component which is outside the membrane dimensions.

  .. image:: images/model-reference/membrane-setup.*
     :alt: Membrane setup

The mass density, Poisson's ratio, and Young's modulus of the membrane need to be
specified in the :guilabel:`Material properties` tab in the corresponding
input boxes.

The actuator data is specified on the :guilabel:`Actuator force` tab in the
window. In :guilabel:`Force distribution` area, insert the linear dimensions
(for rectangular membrane) or radius (for circular membrane) of the actuator
force area in the corresponding input boxes. To define a concentrated actuator
force at the membrane center instead, type zero for the area. In 
:guilabel:`Force-time function`, select :guilabel:`Sinusoidal` and input the amplitude,
frequency (in Hertz) and initial phase (in degrees) of the force.
Alternatively, select :menuselection:`Tabular --> Edit` and fill the table
with data for a piecewise linear function for the force. A time-dependent actuator force
may also be imported from a data file with a :file:`csv` extension by clicking
on :guilabel:`Import Values` and loading the file.
The file must have two columns of data which represent time and force from
left to right.

  .. image:: images/model-reference/membrane-setup-component-2.*
     :alt: Membrane setup, Component 2

Users may need to input the :guilabel:`Reference pressure` in the :guilabel:`Pressure force` tab depending on the
simulation case. The reference pressure represents the ambient pressure on the
membrane surfaces that are blocked by other components or are located outside
the domain. It is the fluid pressure at which the membrane has no deformation.
If both sides of the membrane are open (i.e., not blocked by any other
components) and are inside the computational domain, the reference pressure is
not necessary and has no effect on the simulation. By default, the reference
pressure is equal to the initial void pressure specified by :envvar:`PVOID`. Users can also choose 
:guilabel:`Code calculated`, in which case the reference pressure is calculated by the code as
the averaged fluid pressure on the membrane. 

By default, fluid pressure force on membrane surfaces is considered to determine the membrane's motion. If users decide to ignore the pressure force, in the :guilabel:`Pressure force` tab,
select :menuselection:`Fluid pressure force--> Ignored on membrane`. 

  .. image:: images/model-reference/membrane-setup-component-3.*
     :alt: Membrane setup, Component 3

In the :file:`flsgrf.*` file the membrane deflection is included as spatial
data. Its contours can be shown in 2D and 3D plots. Deflection of the membrane
center, where it is the largest, is included in the general history data and
can be viewed in both text and graphical formats. A positive/negative value of
the membrane deflection means that the deflection is in the positive/negative direction
of the coordinate axis to which the membrane is perpendicular. Note that the
geometry does not actually change in the mesh as the membrane deforms, in
accordance with the assumption that the deformations are small compared to the
size of the membrane.

.. seealso:: \  Theory manual section :ref:`ElasticMembraneAndElasticWallModelTh`

.. index::
   single: Model Reference; elastic wall
   single: models; elastic wall

.. index:: elastic wall

.. _elasticWallMR:


Elastic Wall
^^^^^^^^^^^^^^^^^^

The elastic wall model simulates deflection of elastic walls under pressure
from surrounding fluid. An elastic wall is a geometry component of arbitrary
shape, and its deflection at any point on the surface is in the direction
normal to the surface and proportional to the hydraulic pressure, namely:

.. math:: w =  - \frac{(P - P_{ref})}{K}

where: 

* :math:`w` is the local deflection and is defined positive in the direction of the outer surface normal, 
* :math:`P` is the adjacent fluid pressure, 
* :math:`{P_{ref}}` is a reference pressure, 
* :math:`K` is the stiffness coefficient per unit area. 

At the reference pressure, an elastic wall has no deflection. For the
selection of the value for :math:`K`, please refer to the :doc:`theory` chapter
(:ref:`ElasticWallTheoryTh`). The model allows for multiple elastic wall
components with independent properties. Deflections are assumed to be small
compared to the mesh size. If the local deflection is comparable to the local
cell size, the validity of the model may be adversely affected.

  .. image:: images/model-reference/elastic-wall.*
     :alt: Elastic wall

To activate the elastic wall model, open :menuselection:`Model Setup -->
Physics --> Moving and simple deforming objects` and select
:guilabel:`Activate elastic membrane and wall model`.

  .. image:: images/model-reference/elastic-wall-properties.*
     :alt: Elastic wall properties

An elastic wall component can consist of one or more subcomponents and can be
completely or partially inside the computational domain. Once the component
representing the elastic wall has been created, go to
:menuselection:`Model Setup --> Geometry --> Component (desired component) --> Component properties --> Simple Deforming Object` 
and choose the :guilabel:`Type of Simple Deforming Object` as :guilabel:`Rectangular Membrane` or :guilabel:`Elastic Wall`. In the
:menuselection:`Deforming Object Properties` and click the
:guilabel:`Edit` button to bring up the :guilabel:`Elastic wall setup` window.
Insert values for the :guilabel:`Stiffness coefficient per unit area` and the
:guilabel:`Reference pressure` and click :guilabel:`OK` to close the window.

  .. image:: images/model-reference/elastic-wall-setup.*
     :alt: Elastic wall setup

The elastic wall deflection is included as **Spatial** data in the
:file:`flsgrf.*` file. Its contours can be shown in 2D and 3D plots. Note that
the geometry does not actually change in the mesh as the wall deforms, in
accordance with the assumption that the deformations are small compared to the
computational cell size.

The model is compatible with most other models of |prod| (e.g., heat transfer
within elastic wall component is allowed) but an elastic wall component cannot be
a porous media or a moving object. If a moving object
collides with an elastic wall component, the latter is regarded as a 
non-moving rigid object in collision simulation.

.. seealso:: \  Theory manual section :ref:`ElasticMembraneAndElasticWallModelTh`


.. index::
   single: Model Reference; springs, ropes & mooring lines
   single: models; general moving objects

.. _gmoSpringsRopesMooringLinesMR:

Springs, Ropes and Mooring Lines
========================================

:guilabel:`Springs, Ropes & Mooring lines` are special objects that can be 
used to connect :ref:`gmoBasicsMR`. Each of these object types have special properties that
can be defined to affect the motion of moving objects, and are described in the following sections. 
These objects are created and edited in the :guilabel:`Springs, Ropes & Mooring line` widget that can be accessed
by clicking on the button, |springropes_icon|, on the vertical toolbar. 

.. index::
   single: springs, ropes and mooring line; springs and ropes

.. index:: springs and ropes

.. _gmoSpringsRopesMR:

Springs & Ropes
----------------------
The GMO model allows existence of elastic springs and ropes which exert forces or 
torques on objects under coupled motion. The available types of objects in |prod| include three 
types of **linear springs**: :menuselection:`Compression and Extension Spring`, 
:menuselection:`Compression Spring`, :menuselection:`Extension Spring`; 
a :menuselection:`Massless Elastic Rope`; and a :menuselection:`Torsion Spring`. Users can define 
up to 100 springs/ropes in one simulation, and each moving object can be arbitrarily connected 
to multiple springs/ropes. 

For a **linear spring**, the elastic restoring force :math:`F_e` is along the length of the spring
and satisfies Hooke's law of elasticity,

.. math:: F_e = {k_l}\,\Delta \,l

where:

* :math:`k_l` is the spring coefficient,
* :math:`\Delta \,l` is the spring's length change from its free condition, 
* :math:`F_e` is a pressure force when the spring is compressed, and a tension force when stretched.

A **linear spring** also has a block length due to the thickness of the spring coil. It
is the length of the spring at which the spring's compression motion is blocked
by its coil and cannot be compressed any further. 

A :menuselection:`Massless Elastic Rope` also obeys Hooke's law. It generates tension force only if
stretched, but when compressed it is relaxed and the restoring force vanishes as
would be the case of a slack rope. Unlike the linear springs, this object does not have a block length.

A :menuselection:`Torsion Spring` produces a restoring torque T on a moving object with fixed-axis when the spring is twisted, 
following the angular form of Hooke's law,

.. math:: T_e = {k_\theta }\,\Delta \,\theta 
 
where:

* :math:`{k_\theta }` is the spring coefficient in the unit of [torque]/degree, and 
* :math:`\Delta \,\theta` is the angular deformation of the spring. 
* It is assumed that there is no elastic limit for the springs and ropes, namely Hooke's law always holds no matter how big the deformation is. 

A linear damping force associated with a spring/rope and a damping torque associated with a :menuselection:`Torsion Spring`
may also be defined. The damping force :math:`F_d` is exerted on the moving object at the attachment point of the spring/rope.
Its line of action is along the spring/rope, and its value is proportional to the time rate of the spring/rope length, 

.. math:: F_d = -{c_l} \frac {\rm{d} l}{\rm{d} t}  

Note the damping force for a :menuselection:`Massless Elastic Rope` vanishes when the rope is relaxed. 

The damping torque :math:`T_d` can only be applied on an object with a fixed-axis rotation. 
Its direction is opposite to the angular velocity, and its value is proportional to the angular velocity value,

.. math:: T_d = -{c_d} \omega

where   :math:`\omega` (in rad/time) is the angular velocity of the moving object.

In this model, the three **linear springs** and :menuselection:`Massless Elastic Rope` 
objects can have one end attached to a moving object under coupled motion and the other 
end fixed in space or attached to another moving object under either prescribed or coupled 
motion. A :menuselection:`Torsion Spring`, however, must have one end attached to an object under coupled 
fixed-axis motion and the other end fixed in space. It is assumed that the rotation
axis of the object and the axis of the :menuselection:`Torsion Spring` are the same. As a
result, the torque applied by the spring on the object is around the object's
rotation axis, and the deformation angle of the spring is equal to the angular
displacement of the object from where the spring is in free condition.

To create a spring or rope, go to :menuselection:`Model Setup --> Meshing Geometry` tab and 
open the :guilabel:`Springs, Ropes and Mooring lines` widget. Click on the drop down arrow 
next to the green add button, and choose the option for :menuselection:`Springs and Ropes`.

  .. image:: images/model-reference/gmo-springs-and-ropes-elastic.*
     :alt: Springs and rope tree - Elastic rope

To define a spring or rope, go to 
:menuselection:`Model Setup --> Springs`. 
Click on the spring icon to bring up the 
:menuselection:`Springs and Ropes` window. Right click on 
:menuselection:`Springs and Ropes` to add a spring
or rope. In the combo box for :menuselection:`Type`, select the type for the
spring or rope.



* :menuselection:`Linear Spring` The type of linear spring selected effects whether it can be compressed or extended. 

  * :menuselection:`Compression and Extension Spring`: A spring that can be both compressed and extended. Its block length, by default, is 10% of its free length (the length of the spring in the force-free condition).
  * :menuselection:`Extension Spring`: A spring that can only be extended. Its block length is always equal to its free length.
  * :menuselection:`Compression Spring`: A spring that applies force only when it is compressed. When it is stretched, the force on the connected object vanishes. Its default block length is 10% of its free length.

  On the :guilabel:`Definition` sub-tab enter :guilabel:`Free
  Length` (the length of the spring/rope in the force-free condition),
  :guilabel:`Block Length`, :guilabel:`Spring Coefficient` (required) and
  :guilabel:`Damping Coefficient` (default is 0.0). In the :guilabel:`End` sub-tab, define the connection points 
  of the spring. :guilabel:`End 1` and :guilabel:`End 2` represent the initial coordinates of the 
  ends of the spring/rope. Select the :guilabel:`Component #` and index of the moving
  object which the spring end is connected to. If the end is not connected to
  any moving component, i.e., is fixed in space, select :guilabel:`None`. In the
  :guilabel:`X`, :guilabel:`Y` and :guilabel:`Z` edit boxes, enter the initial
  coordinates of the spring's end. Each end can be placed anywhere inside or
  outside the moving object and the computational domain. By default, the free length is set equal to the
  initial distance between the two ends.


* :menuselection:`Massless Elastic Rope` 
  Follow the same setup process used to create the :menuselection:`Linear Springs`. The only difference in the setup process is that the 
  :guilabel:`Block Length` is deactivated because the :menuselection:`Massless Elastic Rope` 
  does not have a minimum length. By default, the :guilabel:`Free length` is set equal to the initial distance between the two ends.


* :menuselection:`Torsion Spring`: 
  On the :guilabel:`definition` sub-tab, enter :guilabel:`Spring Coefficient` (required, in unit
  of [torque]/degree) and :guilabel:`Damping Coefficient` (default is 0.0), and :guilabel:`Initial Torque`. The initial
  torque is the torque of the spring applied on the moving object at t=0. It
  is positive if it is in the positive direction of the coordinate axis which
  the rotation axis of the moving object is parallel to. In the :guilabel:`End` sub-tab, :guilabel:`End 1` represents the spring's end that is 
  attached to a moving object under fixed-axis rotation, and :guilabel:`End 2`
  the end fixed in space. 

After the simulation is complete, users can display the calculated deformation
and force (or torque) of each spring and rope as functions of time. Go to
:menuselection:`Analyze --> Probe --> Data source` and check :guilabel:`General history`. 
In the variable list under :guilabel:`Data variables`, find the
Spring/rope index followed by :guilabel:`spring/rope length extension from free
state`, :guilabel:`spring/rope force` and/or :guilabel:`spring torque`. Then
check :menuselection:`Output form --> Text` or :menuselection:`Graphical` and click
:guilabel:`Render` to display the data. Positive/negative values of spring force
and length extension mean the linear spring or rope is stretched/compressed
relative to its free state and the restoring force is a tension/pressure force.
Positive/negative values of the torque of a torsion spring means its deformation
angle (a vector) measured from its free state is in the negative/positive
direction of the coordinate axis which its axis is parallel to.

It is noted that the spring/rope calculation is explicitly coupled with GMO
motion calculation. If a numerical instability occurs it is recommended that
users activate the implicit GMO model, define limited compressibility of
fluid, or decrease time step.


.. index::
   single: Model Reference; mooring lines
   single: models; general moving objects

.. index:: mooring lines

.. _gmoMooringLinesMR:


Mooring Lines
-------------------

The mooring line model allows moving objects with prescribed or coupled motion to be connected with other objects via compliant mooring lines. 
The end points of any mooring line can be defined as fixed anchors, attached to other moving objects or defined as a :guilabel:`Free end`. 
Multiple mooring lines are allowed in one simulation, and their connections to the moving objects are arbitrary. 
The mooring lines can be taut or slack and may fully or partially rest on sea/river floor. The 
model considers gravity, buoyancy, fluid drag and tension force on the mooring lines. The mooring 
lines are assumed to be cylinders with uniform diameter and material distributions, and each line can have its own length, diameter, mass density and other physical properties. The model 
numerically calculates the full 3D dynamics of the mooring lines and their dynamic interactions 
with the tethered moving objects. 

The model allows the mooring lines to be partially or completely outside the computational domain. 
When a line is anchored deep in water, depending on the vertical size of the domain, the lower part 
of the line can be located below the domain bottom where there is no computation of fluid flow. In 
this case, it is assumed that uniform water current exists below the domain for that part of 
mooring line, and the corresponding drag force is evaluated based on the uniform deep water velocity. 
Limitations exist for the model. It does not consider bending stiffness of mooring lines. Interactions 
between mooring lines are ignored. When simulating mooring line networks, free nodes are not allowed.  

To create a mooring line, go to :menuselection:`Model Setup --> Springs, Ropes and Mooring lines` widget and 
click on the drop down arrow next to the green add button, and choose the option for :menuselection:`Mooring Lines`.
Click on :menuselection:`Mooring Lines --> Deep Water Velocity` and enter x, y and z components of 
the deep water velocity (default value is zero). Click on :guilabel:`Mooring Line #` and enter the 
physical and numerical properties of the mooring line. 

To create a mooring line, go to :menuselection:`Model Setup --> Springs` tab and 
click on the drop down arrow next to the green add button, and choose the option for :menuselection:`Mooring Lines`.

  .. image:: images/model-reference/mooring-line.*
     :alt: Mooring Line

In the :guilabel:`Definition` sub-tab, define the properties of the mooring line. 
The :guilabel:`Free length` is the undisturbed mooring line length.  
:guilabel:`Linear Density` is mass per unit length of
the mooring line.  :guilabel:`Net Material Density` is the mass density of the
material that the  mooring line is made from. Buoyancy is determined by
multiplying the :guilabel:`Linear Density` times the length of the line and
then dividing by the :guilabel:`Net Material Density`. :guilabel:`Diameter`
is the effective or gross diameter of the mooring line  that is used to
provide the gross cross-sectional area of the mooring line when fluid drag
force is  calculated. The :guilabel:`Normal Drag Coefficient` and
:guilabel:`the Tangential Drag Coefficient`  are for the quadratic law of drag
in the normal and tangential directions of the line,  and their defaults are 1
and 0.3, respectively. The :guilabel:`Spring  Coefficient per Unit Length` can
be evaluated using following formula if it is known to users,

.. math:: k_{unit}=E A_{net}

where :math:`E` is Young's modulus of the mooring line material, :math:`A_{net}` is the net cross-section 
area of the mooring line. 

The :guilabel:`Minimum Breaking Load` (MBL) is the lowest amount of tension force required to break the mooring 
line. At each time step, the maximum tension force of a mooring line is computed and compared with 
the MBL. If the former is equal or greater than the latter, the mooring line breaks at the location of the maximum tension force. By default, MBL is a large number (:math:`10^{35}`) and the mooring does not break. 

The model uses a finite segment approach to calculate mooring line dynamics by dividing a mooring line 
uniformly into a certain number of discrete segments. The :guilabel:`Number of Segments` 
is an input parameter with a default value of 31. It is noted that too few segments reduces 
computational accuracy and may also cause numerical instability. Too many segments, however, may 
increase computational efforts obviously. The default value should be used if fluid flow does not 
vary significantly along the mooring line; otherwise the number of segments should be increased to 
account for the effect of the flow variation.

The attachment points of the mooring are defined in the :guilabel:`End` sub-tab. The inputs 
for :guilabel:`End 1` and :guilabel:`End 2` are used to define the initial locations of two 
ends of the mooring line. To attach the end of the mooring line to another object, 
go to :guilabel:`Component #` and select the index of component that the end is attached to. 
Select :guilabel:`None` if that end is anchored at a fixed point, or select :guilabel:`Free end` 
if the end is not attached to any components or fixed point. Then enter the initial x, y and z 
coordinates of the mooring line end in the corresponding edit boxes.  

The :guilabel:`Confined Space` sub-tab is used to specify locations of  river/sea floor or walls that 
confine the mooring line motion. For example, if :guilabel:`Min Z` is defined, then any part of the 
mooring line cannot go below :guilabel:`Min Z`. If the gravity is in –z direction, then Min Z can be 
regarded a sea floor where a slack mooring line can rest on. By default, there is no confinement to a mooring line motion.
The :guilabel:`Deep Water Velocity` sub-tab is used to define the fluid velocity for calculating drag on portions of the 
mooring line outside of the computational domain. Enter the enter x, y and z components of the deep water velocity (default value is zero). 

After the simulation is complete, users can display history data of each mooring line including length extension
from free state (in unit of length), maximum tension force along the mooring line, and the tension forces at both 
ends in the x, y and z directions. For example, if end 1 of a mooring line is tethered at a platform, then the force 
of the mooring line applied on the platform in x, y and z directions can be found as x/y/z tension force at end 1.  

  .. image:: images/model-reference/mooring-line-history.*
     :alt: Mooring Line History


.. index::
   single: Model Reference; moving components

.. index:: moving components, tangential surface velocity

.. _movingComponentsMR:


Moving Components with Tangential Surface Velocity
========================================================

====================  ======  ========================================================================
MAIN VARIABLES:       OBS:    :ref:`IMO, UTOBS, VTOBS, WTOBS <MovingWebComponents>`
====================  ======  ========================================================================

Users can define a tangential velocity at a geometrical component surface by
customizing function subroutine :file:`velobs.F90`. This is particularly useful for
modeling moving webs. Note that the geometry of the component with this model
does not change or move with time, but rather, a tangential velocity is applied
at the component surface.

This model is separate from the :ref:`General Moving Objects <gmoBasicsMR>`
model. It is simpler and requires less computation effort. It requires editing
of the input file (\ :file:`prepin.*`) by selecting
:menuselection:`File --> Edit Simulation ...`.

When this type of component is defined, it is identified as having a moving
surface by setting the variable :ref:`IMO <MovingWebComponents>`\(*N*) = 2 in, where
*N* is the component number.

For components with a flat geometry, only the appropriate value for the
tangential motion need to be defined by setting :ref:`UTOBS, VTOBS, WTOBS
<MovingWebComponents>`. Time-\ dependent values can be specified as well.

In order for this model to be able to accommodate complex geometries, the user
must specify the velocity at the component surface in function :file:`velobs.F90`. This
function is called for each component identified by :ref:`IMO
<MovingWebComponents>`\(*N*) = 2. In this function subroutine, the user has
access to the component number, and x, y and z coordinates where the
tangential velocity is to be calculated. Note that these coordinates are the
closest cell intersections to the surface, and may not lie exactly on the
component surface.

.. note::
  
   If the :file:`velobs.F90` subroutine is not modified, the velocities at the
   component surface will be defined by :ref:`UTOBS, VTOBS, WTOBS
   <MovingWebComponents>`.

.. seealso:: 
   * Input variable summary section :ref:`MovingWebComponents`.
   * :ref:`rotatingComponentsMR`
   * :ref:`gmoBasicsMR` for computing the motion of non-axisymmetric objects.
   * :ref:`nonInertialReferenceFrameMotionMR` for accelerating reference frames.
   



.. index::
   single: Model Reference; rotating axisymmetric components

.. index:: rotating axisymmetric components

.. _rotatingComponentsMR:


Rotating Axisymmetric Components
========================================================

Tangential velocities in the form of a pure rotation may be assigned to solid,
axisymmetric components such as cylinders, spheres and cones. Velocity
components must be tangential to the surface so that these components always
occupy the same physical space. These components must have the solid type and
are defined just like regular components. Transformation, including
magnification, rotation and translation, is allowed to transform these
components to any locations and any orientations.

After the geometry of the axisymmetric component is defined, open
:menuselection:`Model Setup --> Geometry --> Component --> Axisymmetric
Spinning Object`:

  .. image:: images/model-reference/rotating-components-properties.*
     :alt: rotating-components-properties

Check the :guilabel:`Enabled` checkbox. Define two points on the rotation axis
(i.e., the central axis of the component after geometry transformation). Also
define the :guilabel:`Spin rate`. Note that this is the angular velocity, in
units of radians/time (typically :envvar:`rad/s`\ ).

.. note:: 
   
   * The orientation of the axis does matter: objects rotate in right handed
     sense about the axis. Therefore, looking down the axis from point 1 to
     point 2, objects rotate clockwise for positive values of :guilabel:`Spin
     rate`.
   * Objects must be axisymmetric about the spinning axis. If not, the model 
     will not correct assign velocities to the entire surface of the component.

.. seealso:: 
   * Impeller and Fan components: :ref:`fanAndImpellerMR`.
   * :ref:`gmoBasicsMR` for computing the motion of non-axisymmetric objects.
   * :ref:`nonInertialReferenceFrameMotionMR` for accelerating reference frames.
   * :ref:`movingComponentsMR` for non-axisymmetric cases with simple motion.




.. index::
   single: Model Reference; non-inertial reference frame motion
   single: models; spin and shake
   single: implicit options; non-inertial reference frame motion

.. index:: non-inertial reference frame motion, spin and shake model

.. _nonInertialReferenceFrameMotionMR:

========================================================
Non-Inertial Reference Frame Motion
========================================================

Non-inertial coordinate systems can experience non-zero linear accelerations
and rotations. Activate the :guilabel:`Non-inertial reference frame` motion model in
:menuselection:`Physics --> Gravity and non-inertial reference frame`:

  .. image:: images/model-reference/non-inertial-reference-frame.*
     :alt: Non-inertial reference frame

There are numerous :guilabel:`Non-inertial reference frame` options to choose
from. The simplest, the :guilabel:`Shake and spin model`, simulates that the
computational domain undergoes shaking and spinning motions only. Selection of
this option, and selecting the adjacent :guilabel:`Edit` button produces the
following window:

  .. image:: images/model-reference/shake-and-spin-model.*
     :alt: Shake and spin model

In this window the shaking motion (side-to-side oscillations in the
*x*-coordinate direction only) and spin motion (spinning about the *z*-axis
only) can be specified. :guilabel:`Magnitude` specifies the size of the
oscillation (in units of acceleration) from the centerline,
:guilabel:`Frequency` is the angular frequency of the sinusoidal motion,
typically in *rad/s*. :guilabel:`Spin rate` is the angular velocity of the
rotational motion about the x-axis, also typically in *rad/s*.

The :guilabel:`Harmonic oscillations` model allows users to define linear and
angular motion in each of the 3 coordinate directions. Clicking on the
:guilabel:`Edit` button next to :guilabel:`Harmonic oscillations` opens the
following window:

  .. image:: images/model-reference/harmonic-oscillations.*
     :alt: Harmonic oscillations

In each of the 6 degrees of freedom, users control the acceleration
:guilabel:`Magnitude`, :guilabel:`Frequency` (rad/time) and :guilabel:`Phase
angle` offset. With this model, these values are constant throughout the
simulation.

Alternatively, time-dependent data on accelerations can be directly If time-varying magnitudes are needed, time-dependent data can be entered by selecting one of the :guilabel:`Tabular` options. Details on these options are available in :ref:`smoothTabularMotionMR` and :ref:`impulsiveMotionMR`.

.. note:: 

   * Coriolis forces due to rotation can be accounted for with different degrees
     of implicitness. The degree of the implicitness is proportional to the
     value of :guilabel:`Coriolis acceleration implicit weighting factor` set in
     :guilabel:`Implicit/explicit solver options` in :guilabel:`Numerics`. When
     :guilabel:`Coriolis acceleration implicit weighting factor` = 0.0, the
     approximations are fully explicit. A fully implicit algorithm is used when
     :guilabel:`Coriolis acceleration implicit weighting factor` = 1.0. It is
     recommended to use the fully implicit method for better solution stability.
   * The :guilabel:`Initial gravity` option is used to maintain gravity in the
     direction in which it was oriented at :math:`t=0` regardless of the 
     motion of the reference frame.  This is different from the regular
     :guilabel:`Gravity` option, which maintains gravity in the same direction
     in the reference frame.  

.. seealso::
   * :ref:`NirfTh` notation 
   * :ref:`RigidBodyDynamicsAlgorithmTh`  
   * :ref:`NonInertialReferenceFrameTh` equations
   * :ref:`RigidBodyDynamicsNIRFTh`
   * :ref:`centrifugalCastingMR`
   * :ref:`gravitySectionMR`
   * :ref:`impulsiveMotionMR`
   * :ref:`nonInertialReferenceFrameMotionMR`
   * :ref:`smoothTabularMotionMR`

.. index::
   single: Model Reference; smooth tabular motion

.. index:: smooth tabular motion

.. _smoothTabularMotionMR:


Smooth Tabular Motion
========================================================

  .. image:: images/model-reference/smooth-tabular-motion-non-interial-reference-frame.*
     :alt: Non-inertial reference frame

Non-inertial reference frames are specified in tabular form when one of
:menuselection:`Physics --> Gravity and Non-inertial reference frame -->
Tabular angular acceleration` or :menuselection:`Tabular angular velocity` is
chosen, then smooth (i.e., linearly interpolated) motion is specified by
clicking the :guilabel:`Edit` button, modifying the text file shown in the
:guilabel:`Input file` drop-down menu, with the default name
:file:`movin.inp`. The data specified includes the time, x, y, and z linear
accelerations, x, y, and z angular velocities, and x, y, and z angular
accelerations.

  .. image:: images/model-reference/smooth-tabular-motion-table-edit.*
     :alt: smooth-tabular-motion-table-edit

If :menuselection:`Tabular angular velocity` is chosen, the angular velocities
specified are differentiated to determine the angular accelerations. If
:menuselection:`Tabular angular acceleration` is chosen, the angular
velocities are evaluated by integrating the angular accelerations, with the
angular velocities specified at time zero being evaluated from the initial
velocities.

.. seealso::
   * :ref:`NirfTh` notation
   * :ref:`RigidBodyDynamicsAlgorithmTh`  
   * :ref:`NonInertialReferenceFrameTh` equations
   * :ref:`RigidBodyDynamicsNIRFTh`
   * :ref:`centrifugalCastingMR`
   * :ref:`gravitySectionMR`
   * :ref:`impulsiveMotionMR`
   * :ref:`nonInertialReferenceFrameMotionMR`
   * :ref:`smoothTabularMotionMR`

.. note:: 

   The user interface writes the :file:`movin.inp` file for the user and
   automatically uses the correct format. It displays the data in the table.

.. index::
   single: Model Reference; impulsive motion

.. index:: impulsive motion of non-inertial reference frame

.. _impulsiveMotionMR:

Impulsive Motion of Non-inertial Reference Frame
========================================================

Non-inertial reference frames are specified in tabular form in the file
:file:`movin.inp` when :menuselection:`Physics --> Gravity and non-inertial
reference frame --> Activate non-inertial reference frame` option is activated
together with any of the :guilabel:`Tabular` options. The input can be typed
into a table that is open when clicking on the :guilabel:`Edit` button next to
the :guilabel:`Tabular` options. Impulsive motion can also be specified in the
table when Angular acceleration with impulsive motion or Angular velocity with
impulsive motion are selected above the table. For impulsive motion, the data
specified is the same as that for smooth motion (time, linear accelerations,
angular velocities, angular accelerations), except the impulse duration (the
:guilabel:`Impulse length`) is also specified. Also, the computational 
time-step size to be used at the beginning of the impulse interval can be specified
in the column entitled :guilabel:`Dt` for better accuracy in capturing the
duration of the impulse.

  .. image:: images/model-reference/impulsive-motion-tabular-input.*
     :alt: Tabular input

By clicking the :guilabel:`OK` button the data is written into the file named in the
:guilabel:`Input file` edit box of the :guilabel:`Tabular input` window; its default
is :file:`movin.inp`. 

Any time entries with a non-zero impulse duration are taken to be impulsive,
while entries with a zero impulse duration are taken to be smooth. Impulsive
accelerations are superimposed on top of the smooth data.

In the :file:`movin.inp` file shown in the table below, the *z* linear
acceleration is defined by both smooth and impulsive data. The impulse
duration is in the :guilabel:`impldt` column, and the specified time-step size is in the
:guilabel:`delt` column. Smooth accelerations are defined with points at t=0, t=9.5, and
t = 100. The *z* acceleration will be evaluated using a linear interpolation for
those points.

The z acceleration also has impulsive data specified at t = 2, t = 5, and t = 8, each
with a pulse width of 1 sec. The impulses are superimposed on top of the smooth
variation as shown in :num:`Figure#graphOfImpulsiveAndSmoothAccelerationData` below.

.. tabularcolumns:: |p{1cm}|p{0.75cm}|p{0.75cm}|p{0.75cm}|p{0.75cm}|p{0.75cm}|p{0.75cm}|p{1cm}|p{1cm}|p{1cm}|p{0.75cm}|p{1.25cm}|

.. _impulsiveSmoothAccelerationData:

.. list-table:: Example file of impulsive and smooth acceleration data
   :widths: 5 5 5 5 5 5 5 5 5 5 5 5
   :header-rows: 1
   :stub-columns: 1
   :class: longtable

   * - T
     - accx
     - accy
     - accz
     - omx
     - omy
     - omz
     - omdx
     - omdy
     - omdz
     - delt
     - impldt

   * - :math:`0.`
     - :math:`0.`
     - :math:`0.`
     - :math:`0.`
     - :math:`0.`
     - :math:`0.`
     - :math:`0.`
     - :math:`0.`
     - :math:`0.`
     - :math:`0.`
     - :math:`0.`
     - :math:`0.`

   * - :math:`2.`
     - :math:`0.`
     - :math:`0.`
     - :math:`0.1`
     - :math:`0.`
     - :math:`0.`
     - :math:`0.`
     - :math:`0.`
     - :math:`0.`
     - :math:`0.`
     - :math:`0.`
     - :math:`1.`

   * - :math:`5.`
     - :math:`0.`
     - :math:`0.`
     - :math:`0.1`
     - :math:`0.`
     - :math:`0.`
     - :math:`0.`
     - :math:`0.`
     - :math:`0.`
     - :math:`0.`
     - :math:`0.`
     - :math:`1.`

   * - :math:`8.`
     - :math:`0.`
     - :math:`0.`
     - :math:`0.1`
     - :math:`0.`
     - :math:`0.`
     - :math:`0.`
     - :math:`0.`
     - :math:`0.`
     - :math:`0.`
     - :math:`0.`
     - :math:`1.`

   * - :math:`9.5`
     - :math:`0.`
     - :math:`0.`
     - :math:`0.5`
     - :math:`0.`
     - :math:`0.`
     - :math:`0.`
     - :math:`0.`
     - :math:`0.`
     - :math:`0.`
     - :math:`0.`
     - :math:`0.`

   * - :math:`100.`
     - :math:`0.`
     - :math:`0.`
     - :math:`0.5`
     - :math:`0.`
     - :math:`0.`
     - :math:`0.`
     - :math:`0.`
     - :math:`0.`
     - :math:`0.`
     - :math:`0.`
     - :math:`0.`
   
.. _graphOfImpulsiveAndSmoothAccelerationData:

.. figure:: images/model-reference/impulisve-motion-acceleration-data.*
   :alt: Graph of impulsive and smooth acceleration data

   Graph of impulsive and smooth acceleration data

.. tabularcolumns:: |p{2cm}|p{10cm}|

.. _variableDefinitionsAndUnits:

.. list-table:: Variable Definitions and Units
   :widths: 20 90
   :class: longtable

   * - **t**
     - = time

   * - **accx**
     - = acceleration along x-axis [L/t\ :sup:`2`]

   * - **accy**
     - = acceleration along y-axis [L/t\ :sup:`2`]

   * - **accz**
     - = acceleration along z-axis [L/t\ :sup:`2`]

   * - **omx**
     - = rotational velocity about x [Rad/t]

   * - **omy**
     - = rotational velocity about y [Rad/t]

   * - **omz**
     - = rotational velocity about z [Rad/t]

   * - **omdx**
     - = rotational acceleration about x [Rad/t\ :sup:`2`]

   * - **omdy**
     - = rotational acceleration about y [Rad/t\ :sup:`2`]

   * - **omdz**
     - = rotational acceleration about z [Rad/t\ :sup:`2`]

   * - **delt**
     - = time-step size [t]

   * - **impldt**
     - = impulse duration [t]

.. note:: 

   The basic format of the :file:`movin.inp` file is described in :ref:`smoothTabularMotionMR`.
   For impulsive motion, the time-step size and the impulse duration are
   included after the *z* angular acceleration. As with the smooth data,
   "placeholders" must be entered for all data quantities, even if that data is
   not used (i.e., enter zero for time-step size if it is not to be specified).

.. index::
   single: Model Reference; cg for non-inertial reference frame

.. index:: cg for non-inertial reference frame

.. _cgnirfMotionMR:

Center of Gravity for Non-inertial Reference Frame
==================================================================

  .. image:: images/model-reference/smooth-tabular-motion-non-interial-reference-frame.*
     :alt: Non-inertial reference frame

The rotation center, or center of gravity (CG), for non-inertial reference frames
can be specified with a single :math:`x`, :math:`y`, and :math:`z` location or by using an external file
for a time-dependent location. In the latter case the CG location is specified in a tabular form in the
file (with the default name :file:`cg.inp`) with any of the :guilabel:`Tabular` non-inertial frame types. 
The input can be typed into a table that opens after clicking on the :guilabel:`Edit` button next to
the :guilabel:`Use external file to specify CG location` check-box. This
checkbox needs to be selected to use the external file. 

  .. image:: images/model-reference/cg-tabular-input.*
     :alt: Center of Gravity/Rotation Location

External files with the CG locations can also be loaded using this dialog. 
Clicking on the :guilabel:`OK` button writes the data into the file 
named in the :guilabel:`Filename` edit box of the :guilabel:`Center of Gravity/Rotation Location`
window; its default name is :file:`cg.inp`.

.. note:: 

   The basic format of the :file:`cg.inp` file is described in :ref:`smoothTabularMotionMR`.
   For importing external files with CG locations, the column delimiters can be Tab/Comma/Space 
   and must be specified in the :guilabel:`Column delimiter` drop-down. The file format
   for :file:`cg.inp` is similar to :file:`movin.inp`.
 
.. seealso::
   * :ref:`NirfTh` notation
   * :ref:`RigidBodyDynamicsAlgorithmTh`  
   * :ref:`NonInertialReferenceFrameTh` equations
   * :ref:`RigidBodyDynamicsNIRFTh`
   * :ref:`centrifugalCastingMR`
   * :ref:`gravitySectionMR`
   * :ref:`impulsiveMotionMR`
   * :ref:`nonInertialReferenceFrameMotionMR`
   * :ref:`smoothTabularMotionMR`


.. index::
   single: Model Reference; rigid body dynamics

.. index:: rigid body dynamics

.. _rigidBodyDynamicsMR:


Rigid Body Dynamics
========================================================

+----------------------------+-------------------+-------------------------------------------------------+
| MAIN VARIABLES:            | :envvar:`XPUT`:   | :ref:`IACCF <GravityAndNIRFOptions>`                  |
+============================+===================+=======================================================+
|                            | :envvar:`RBDATA`: | :ref:`ALL VARIABLES <RigidBodyNamelistRBDATA>`        |
+----------------------------+-------------------+-------------------------------------------------------+   

The rigid body dynamics model is activated by setting :envvar:`IACCF`\ =2 in the
input file :file:`prepin.*`. In that case the :envvar:`RBDATA` input
section must be present in the input file following the :envvar:`BCDATA`
section.

.. seealso:: \  \ :ref:`RigidBodyDynamicsNIRFTh`, :ref:`CoupledRigidBodyDynamicsTh` in the Theory manual for a detailed description of the model, its use and related input parameters.

=========================  ========  =========================================================================================================================
Related variables:          MOTN:     :ref:`IATYPE <RigidBodyDynamicsForceFlag>`, :ref:`other variables <RigidBodyDynamicsNumericalOptions>`  
=========================  ========  =========================================================================================================================


.. index::
   single: Model Reference; centrifugal casting

.. index:: centrifugal casting

.. _centrifugalCastingMR:


Non-inertial reference frame application example:  Centrifugal Casting
============================================================================

Centrifugal casting involves a mold that is rotating around a fixed axis while
molten metal is poured into the mold. One way to model this process in |prod|
is to use the non-inertial reference frame model. In this approach, the
coordinate system is attached to the mold, the rotation of which is defined in
tabular fashion as angular velocity versus time. Since the computational mesh is associated with
the coordinate system, the mesh is also rigidly attached to the mold and
rotates with it.

The model is activated on the :guilabel:`Gravity and non-inertial reference
frame` dialog in  :menuselection:`Model Setup--> Physics` panel. One of the
most general options is to specify a :guilabel:`Tabular angular velocity`.
This  option allows general, time-dependent motion to be defined in all six
degrees of freedom.  To fill in the tabular data, first select the radio 
button next to the :guilabel:`Tabular angular velocity` field, then click
on the adjacent :guilabel:`Edit` button.  Then, specify the desired velocities
throughout time, choose :guilabel:`Save`, and the close the dialog.  Next,
Define the :guilabel:`Rotation Center` (the point about which the 
reference frame rotates). Also, supply the initial direction of the gravity
vector in the provided  edit boxes.

  .. image:: images/model-reference/non-inertial-reference-frame.*
     :alt: Non-inertial reference frame

If metal is entering at an inlet mesh boundary, i.e., at a fixed-pressure,
flow-rate or velocity boundary, select :guilabel:`Add counter-rotating flow
component at inlet boundaries`. This option will account for the fact that the
incoming metal is not rotating with the mold. In the rotating coordinate
system of the model, a flow component is added to the incoming metal
in the direction opposite to the mold's rotation as defined in
:guilabel:`Tabular input`.

.. seealso::
   * For another, more accurate approach to modeling processes
     like centrifugal casting, see :ref:`gmoBasicsMR`   
   * :ref:`NirfTh` notation
   * :ref:`RigidBodyDynamicsAlgorithmTh`  
   * :ref:`NonInertialReferenceFrameTh` equations
   * :ref:`RigidBodyDynamicsNIRFTh`
   * :ref:`centrifugalCastingMR`
   * :ref:`gravitySectionMR`
   * :ref:`impulsiveMotionMR`
   * :ref:`nonInertialReferenceFrameMotionMR`
   * :ref:`smoothTabularMotionMR`
   * Parameters in :ref:`NonInertialReferenceFrameMOTN`




.. index::
   single: Model Reference; particles

.. index:: particles

.. _markerAndMassParticlesMR:

========================================================
Particles
========================================================

The Lagrangian particle model is a sub-grid model can be used to track the motion 
of spherical particles with different attributes and sizes smaller than a 
computational cell. The particles can be completely massless (i.e. marker particles),
they could represent a solid sphere (i.e. mass particles), a spherical droplet of 
fluid (i.e. fluid particles) or a spherical bubble of gas (i.e. gas and void particles).
The particle model was developed to track the motion of these objects in the computational
domain and their interactions with other elements such as walls, fluid or void regions
without the need of mesh refinement for explicit modeling of such objects.
In this section, the general simulation setup process for certain particle classes will be described along with a short explanation 
of the parameters. More information on the details of the particle model can also be found in the :doc:`theory` section.

.. seealso:: :ref:`DiscreteParticleDynamicsTh` 

.. index:: 
   pair: particles; setup 
   pair: particles; dependencies 

.. _particle_setup: 

Setup and dependencies 
================================================================ 

The particle model can be accessed from :menuselection:`Physics --> Particles`. 
This window offers the option to enable/disable different particle classes by clicking on 
the :guilabel:`Enable` checkbox in the respective particle type tab, edit their name, define the 
maximum number of particles for each class and their properties.

Introducing particles in the computational domain is a two-stage process. 
First, the particle parameters must be defined in :menuselection:`Physics --> Particles`. Then :guilabel:`Particle Source(s)` and/or :guilabel:`Particle Block(s)` 
are defined in the particle widget in the :menuselection:`Model Setup --> Particles` tab. In the event 
of a restart simulation, it should be specified whether previous 
particle solution should be reset by checking the :guilabel:`Ignore particle data 
in restart source file` box.

.. index:: 
   pair: particles; particle definition and physics 

.. _particle_definition_physics: 

Particle definition and physics
---------------------------------

This sub-section focuses on the description of the properties and parameters of different particle types. 
The topics discussed involve :guilabel:`Marker particles`, :guilabel:`Mass particles`, :guilabel:`Fluid particles`, 
:guilabel:`Gas particles`, :guilabel:`Void particles` and :guilabel:`User Class particles`. Based on the different 
interactions that these particles may have with other objects in the computational domain, additional 
physical models may be required. These dependencies are further discussed under the following sections detailing each particle class.

.. index:: 
   pair: particles; marker particle setup 

.. _particle_setup_marker: 

Marker particles 
^^^^^^^^^^^^^^^^^^^^^^^

:guilabel:`Marker particles` are massless particles that do not influence the flow and move 
with the speed of the surrounding fluid. Hence, they can also be considered as a visualization 
of fluid molecules. By introducing :guilabel:`marker particles` in the computational 
domain, one could, in principle, visualize pathlines i.e. the paths that individual fluid 
molecules follow.

.. image:: images/model-reference/particles_marker_v12.*
     :alt: Particles marker 

To enable the use of :guilabel:`Marker particles`, navigate to :menuselection:`Physics --> Particles` 
and in the :guilabel:`Marker` tab click on the :guilabel:`Enable` checkbox. Then proceed with 
defining the :guilabel:`Title` of the particle class (optional) and set 
the :guilabel:`Maximum allowed number of marker particles`.

The properties of :guilabel:`marker particles` can be given in :guilabel:`Particle class properties`. 
For :guilabel:`marker particles` we can define the :guilabel:`Host fluid` as 
both :guilabel:`Fluid #1 and #2 (or void)`, as :guilabel:`Fluid #1` only or 
as :guilabel:`Fluid #2 (or void)`. The :guilabel:`Host fluid` determines the fluid 
regions where the :guilabel:`marker particles` can exist. If marker particles are allowed to be in the void, 
they do not move; remaining stationary until swept by fluid. Exiting 
the :guilabel:`Host fluid` will cause the :guilabel:`marker particles` to 
disappear from the computational domain.

:guilabel:`Marker particles` can be given a :guilabel:`Diffusion coeffiecient`, 
which describes the rate at which the particles diffuse in fluid, and 
an :guilabel:`Inverse Schmidt number` , which determines the rate of turbulent diffusion. 
In order to set the :guilabel:`Inverse Schmidt number`, a turbulence model needs to be activated. 
Turbulence models can be enabled at :menuselection:`Physics --> Viscosity and Turbulence`.

:guilabel:`Marker particles` can be set to stick to a solid object following a collision. 
To enable this option, click on the :guilabel:`Stick to walls` checkbox.

Finally, the :guilabel:`Ignore particle data in restart source file` option determines whether to either take into account the particle information from the 
results file of the previous simulation, when unchecked, or reset their position based on what is defined in the :guilabel:`Marker` tab, when checked.

.. seealso:: :ref:`MarkerParticlesTh` 

.. index:: 
   pair: particles; mass particle setup 

.. _particle_setup_mass: 

Mass particles 
^^^^^^^^^^^^^^^^^^^^^^^

:guilabel:`Mass particles` can be considered as solid spheres with a specific diameter and 
density. Therefore, :guilabel:`mass particles` can be readily used to model the motion of 
suspended solids in the computational domain. Other :guilabel:`material particle` classes are based on 
the :guilabel:`mass particle` class, hence some of the properties of :guilabel:`mass particles` 
discussed in this section are common with other particle classes. 

.. image:: images/model-reference/particles_mass_v12.*
     :alt: Particles mass 

To introduce :guilabel:`mass particles`, open the particle window which can be found in 
:menuselection:`Physics --> Particles` and in the :guilabel:`Mass` tab click on the 
:guilabel:`Enable` checkbox.. Then enter a name for the particle class in the :guilabel:`Title` 
field (optional) and specify the :guilabel:`Maximum allowed number of mass particles`. 

For :guilabel:`mass particles` it is also necessary to enter the :guilabel:`Number of Species` 
and their properties. The :guilabel:`Number of Species` determines the total number of different 
types of particles in terms of :guilabel:`Diameter` and :guilabel:`Density`. Once the 
:guilabel:`Number of Species` has been set, then the values for :guilabel:`Diameter` and 
:guilabel:`Density` can be entered in the table.

The various :guilabel:`mass particle` properties can be entered in the 
:guilabel:`Particle class properties` section. Similarly to other particle classes, a 
:guilabel:`Host fluid` has to be defined for :guilabel:`mass particles`. The available choices 
are :guilabel:`Fluid #1 and #2 (or void)`, :guilabel:`Fluid #1` only or :guilabel:`Fluid #2 (or void)` 
only. The :guilabel:`Host fluid` practically represents the fluid regions where the 
:guilabel:`mass particles` can exist. If a particle escapes the :guilabel:`Host fluid`, 
then it is removed from the computational domain.

In the :guilabel:`Coefficients` section, various parameters that affect particle behavior can be entered: 

* The :guilabel:`Diffusion coefficient` is a metric that specifies the rate at which particles diffuse in fluid.  

* The :guilabel:`Drag coefficient multiplier` is a variable that can be manipulated to adjust the fluid drag force acting on the particles. By default, the value of :guilabel:`Drag coeffiecient multiplier` is set to 1 which implies that the domain is populated with spherical particles. If particles have a different morphology, then their drag behavior can be modeled by varying the value of the :guilabel:`Drag coefficient multiplier`. 

* The :guilabel:`Inverse Schmidt number` describes the rate of turbulent diffusion. In order to enter a value for the :guilabel:`Inverse Schmidt number`, a turbulence model needs to be activated. Turbulence models can be enabled at :menuselection:`Physics --> Viscosity and Turbulence`. 

* The :guilabel:`Macro-particle coefficient` is a variable used for cases when the particles introduced in the simulation represent a cloud of several indentical particles. For example, setting the :guilabel:`Macro-particle coefficient` to 100 implies that each modeled particle is a representation of 100 smaller particles whose total volume equals the volume of the modeled particle. 

* Finally, the :guilabel:`Restitution coefficient` controls the behavior of the particles during collision events with solid objects and walls. Typically, the values of :guilabel:`Restitution coefficient` range from 0 to 1. A :guilabel:`Restitution coefficient` value of 1 is indicative of an elastic collision while a :guilabel:`Restitution coefficient` value of 0 implies that a plastic collision takes place. If the value of the :guilabel:`Restitution coefficient` is set to -1 then the particles will stick to the walls.

By default, :guilabel:`mass particles` are affected by the fluid flow but their 
motion does not alter the flow field. To model flow perturbations that 
might occur due to the presence of particles, under :guilabel:`Particle/fluid interaction`, 
click on the :guilabel:`Two-way momentum coupling` checkbox.

Moreover, :guilabel:`mass particles` can exchange thermal energy with 
their :guilabel:`Host fluid`. In order to model this process, first, activate the 
heat transfer model in :menuselection:`Physics --> Heat transfer` and click on 
the :guilabel:`Fluid to solid heat transfer`. This enables the particle 
:guilabel:`Thermal properties` to be specified. The required properties are 
:guilabel:`Specific heat`, :guilabel:`Thermal conductivity` and, optionally the 
:guilabel:`Heat transfer coefficient to host fluid`. If the value of the 
:guilabel:`Heat transfer coefficient to host fluid` is set at -1, then the effective 
heat transfer coefficient is automatically calculated based on Nusselt number correlations 
for solid spheres. If any non-negative value is given, then it remains constant for all host 
fluids i.e. Fluid #1 and/or Fluid #2 (or void).

Electrical forces for particles can also be accounted for. Particle 
:guilabel:`Electrical properties` can be entered after navigating to 
:menuselection:`Physics --> Electro-mechanics` and clicking on the 
:guilabel:`Activate electric potential` checkbox. If particles have any dielectric 
properties, then the :guilabel:`Dielectric constant` needs to be specified. If the 
particles carry an electric charge, then its value can be entered for 
specific :guilabel:`Particle blocks` or :guilabel:`Particle sources` in the particle 
widget of the :menuselection:`Model Setup --> Particles` tab. Modeling dielectrophoresis 
is also possible through by defining the guilabel:`Electric conductivity` for the particles.

:guilabel:`Motion properties` can also be given for :guilabel:`mass particles`. 
This allows to change the motion state of the particles between :guilabel:`Stationary` and :guilabel:`Moving`.

Finally, the :guilabel:`Ignore particle data in restart source file` option determines whether to either take into account the particle information from the 
results file of the previous simulation, when unchecked, or reset their properties based on what is defined in the :guilabel:`Mass` tab, when checked.

.. note::  The particle model is used for modeling spherical particles. In cases that involve particles of a different shape:

   * Set a particle :guilabel:`Diameter` so that it reflects the volume of the non spherical particles to be modeled.
   * Adjust the value of the :guilabel:`Drag coefficient multiplier` in order to better capture the drag behavior of the changed morphology.

.. seealso:: 

   * :ref:`transportOfHeatInFluidMR`
   * :ref:`electricFieldsMR`
   * :ref:`MassParticlesTh` and :ref:`ParticleFluidInteractionTh`

.. index:: 
   pair: particles; fluid particle setup 

.. _particle_setup_fluid: 

Fluid particles 
^^^^^^^^^^^^^^^^^^^^^^^

:guilabel:`Fluid particles` can be thought of as droplets of Fluid #1. :guilabel:`Fluid particles` can be used for a plethora of simulations 
involving modeling fluid volumes smaller than a computational cell such as fluid sprays, additive manufacturing,
welding etc. 

.. image:: images/model-reference/particles_fluid_v12.*
     :alt: Particles fluid 

To enable the use of :guilabel:`fluid particles` go to :menuselection:`Physics --> Particles` 
and in the :guilabel:`Fluid` tab check the :guilabel:`Enable` box. Optionally, a :guilabel:`Title` can 
be given for the particle class. It is also important to enter the :guilabel:`Maximum allowed number 
of particles` that will be modeled. Similarly 
to :guilabel:`mass particles`, the :guilabel:`Number of Species` has to be defined for 
:guilabel:`fluid particles`. However, in the species table, only the particle 
:guilabel:`Diameter` can be edited since :guilabel:`fluid particles` automatically inherit 
the density of Fluid #1, unless a density transport option is used (:menuselection:`Physics --> Density Evaluation`).

It is important to note that :guilabel:`fluid particles` exist in Fluid #2 (or void) and, only if  they are 
solidified, in fluid #1 as well. Upon contact with Fluid #1, :guilabel:`fluid particles` in liquid state are
automatically converted to Fluid #1. :guilabel:`Fluid particles` can also evaporate but modeling their evaporation 
is only compatible with the :guilabel:`Two-fluid phase change` model which can be activated in :menuselection:`Physics --> Bubble and Phase Change`.

Under :guilabel:`Particle class properties`, the parameters for fluid particles can be 
specified. In terms of :guilabel:`Coefficients`, :guilabel:`fluid particles` behave similarly 
to :guilabel:`mass particles`. Nevertheless, there are several differences. 

* First of all, it is important to note since that the :guilabel:`Diffusion coefficient`, :guilabel:`Drag coefficient multiplier`, :guilabel:`Inverse Schmidt number` as well as the option for :guilabel:`Two-way momentum coupling` apply for liquid :guilabel:`fluid particles` in Fluid #2 (or void) and solidified :guilabel:`fluid particles` in both Fluid #1 and Fluid #2 (or void).

* Moreover, when the values for the :guilabel:`Restitution coefficient` are set between 0 and 1, :guilabel:`fluid particles` behave similarly to mass particles in their collisions with solid objects. However, if the :guilabel:`Restitution coefficient` is set to -1, then the default behavior for :guilabel:`fluid particles` will be to turn into Fluid #1 upon impact. 

* The definition of this coefficient is further defined for cases where the fluid may solidify. By changing the values for the :guilabel:`Solidified restitution coefficient` it is possible to alter the collision behavior of solidified fluid particles. In order to edit this parameter, both Heat Transfer (accessible through :menuselection:`Physics --> Heat Transfer`) and Solidification (accessible through :menuselection:`Physics --> Solidification`) models must be activated.

For applications where thermal energy exchange between the particles and 
the fluid is of interest, :guilabel:`fluid particles` inherit their properties 
directly from Fluid #1 but it is also possible to set the :guilabel:`Heat transfer coefficient 
to host fluid` under :guilabel:`Thermal Properties` once the heat transfer model is enabled from 
:menuselection:`Physics --> Heat Transfer`. For the default value of -1, the 
:guilabel:`Heat transfer coefficient to host fluid` is computed by the solver.

When the :guilabel:`Electro-Mechanics` model is activated from 
:menuselection:`Physics --> Electro-Mechanics`, the particle :guilabel:`Electrical Properties` 
can be edited. Similarly, to their :guilabel:`Thermal properties`, :guilabel:`fluid particles` 
inherit their properties from Fluid #1. An :guilabel:`Electric charge` can also be given 
for :guilabel:`fluid particles` under :guilabel:`State` for any :guilabel:`Particle block` or 
:guilabel:`Particle source` in the particle widget found in the :menuselection:`Model Setup --> Particles` tab.

Finally, the :guilabel:`Ignore particle data in restart source file` option determines whether to either take into account the particle information from the 
results file of the previous simulation, when unchecked, or reset their properties based on what is defined in the :guilabel:`Fluid` tab, when checked.

.. seealso:: :ref:`MassParticlesTh` and :ref:`MassParticlesThermalEnergyPhaseChangeTh`

.. index:: 
   pair: particles; gas particle setup 

.. _particle_setup_gas: 

Gas particles 
^^^^^^^^^^^^^^^^^^^^^^^ 

:guilabel:`Gas particles` are used to simulate spherical bubbles of gas and their interactions 
with fluid, voids and solid objects. 

.. image:: images/model-reference/particles_gas_v12.*
     :alt: Particles gas 

:guilabel:`Gas particles` can be enabled by navigating to 
:menuselection:`Physics --> Particles` and clicking the :guilabel:`Enable` checkbox in the :guilabel:`Gas` 
tab. A :guilabel:`Title` can, optionally, be given for the particle class. The :guilabel:`Maximum allowed 
number of particles` that will be modeled can also be specified. 
Similarly to :guilabel:`mass particles` and :guilabel:`fluid particles`, it is necessary to set the 
:guilabel:`Number of Species` for :guilabel:`gas particles` In the species table, set the particle 
:guilabel:`Diameter` for each class.

In the :guilabel:`Particle class properties` section, the various parameters for 
:guilabel:`gas particles` can be given. Similarly to other particle classes, it is necessary 
to define the :guilabel:`Host fluid` for :guilabel:`gas particles`. The available options 
are :guilabel:`Fluid #1 and #2 (or void)`, :guilabel:`Fluid #1` only or :guilabel:`Fluid #2 (or void)` only. 
Practically, the :guilabel:`Host fluid` describes the fluid regions where the :guilabel:`gas particles` 
can exist. Depending on the type of :guilabel:`Host fluid`, when the particles enter a void region 
they may be automatically removed from the computational domain or 
they may add their volume to that void.

As far as :guilabel:`Coefficients`, :guilabel:`Thermal properties`, :guilabel:`Electrical properties` 
and :guilabel:`Two-way momentum coupling` are concerned, :guilabel:`gas particles` behave exactly as 
:guilabel:`mass particles`. Please refer to the :guilabel:`Mass particles` section for more details.

What differentiates :guilabel:`gas particles` from other particle classes, is their ability to carry 
gas related attributes. Gas related attributes can be specified in the :guilabel:`Void properties` section. More 
specifically, the values of :guilabel:`Gamma` and the :guilabel:`Specific gas constant` can be entered. 
This links the pressure, volume, mass and temperature of the :guilabel:`gas particles` so that 
they follow the ideal gas equation of state.

In the event that any type of bubble model is activated from 
:menuselection:`Physics --> Bubble and Phase Change`, :guilabel:`gas particles` can 
interact with void regions and add their volume to them by clicking on the :guilabel:`Add particle volume to voids` checkbox.

Finally, the :guilabel:`Ignore particle data in restart source file` option determines whether to either take into account the particle information from the 
results file of the previous simulation, when unchecked, or reset their properties based on what is defined in the :guilabel:`Gas` tab, when checked.

.. seealso:: :ref:`MassParticlesTh` and :ref:`adiabaticBubblesMR`

.. index:: 
   pair: particles; void particle setup 

.. _particle_setup_void: 

Void Particles 
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ 

:guilabel:`Void particles` can be considered as specialized :guilabel:`gas particles` used for 
tracking the movement of minute pockets of air after the collapse of void regions. 

.. image:: images/model-reference/particles_void_v12.*
     :alt: Particles void 

To activate :guilabel:`void particles` move to :menuselection:`Physics --> Bubble and Phase Change` and after, enabling a bubble model,
click on the :guilabel:`Track collapsed bubbles with void particles` checkbox. The different particle 
parameters can then be set by clicking on the :guilabel:`Advanced` button.

:guilabel:`Void particle` options are similar to those of :guilabel:`gas particles`. However, there are 
several differences that need to be addressed. More specifically, :guilabel:`void particles` can 
only be of one species since their :guilabel:`size`, :guilabel:`density` along with their :guilabel:`temperature` depend on the characteristics 
of the collapsed bubble. Also due to their nature, the :guilabel:`Host fluid` for :guilabel:`void particles` is set to :guilabel:`Fluid #1`. 
Moreover, :guilabel:`void particles` cannot have a previously defined :guilabel:`Macro-particle coefficient` since the number of 
the :guilabel:`void particles` generated can only be determined by the size of the bubble before collapsing. 

When checked, the :guilabel:`Dynamic pressure and size` option will cause void particle 
volume, mass and pressure to behave according to the ideal gas equation of state.
When :guilabel:`Intensification pressure` is defined for metal casting filling simulations, :guilabel:`Fill fraction`
is used as the termination criterion and :guilabel:`Dynamic pressure and size` option is selected, 
then at the end of filling fluid pressure is reset to the intensification pressure and the void particle
size is adjusted accordingly using the void particle equation-of-state.

By default, :guilabel:`void particles` are affected by the fluid flow but their 
motion does not alter the flow field. To model flow perturbations that 
might occur due to the presence of particles, under :guilabel:`Particle/fluid interaction`, 
ensure that the :guilabel:`Two-way momentum coupling` checkbox is checked.

Finally, the :guilabel:`Ignore particle data in restart source file` option determines whether to either take into account the particle information from the 
results file of the previous simulation, when unchecked, or reset their properties based on what is defined in the :guilabel:`Void particles` window, when checked.

.. index:: 
   pair: particles; user-customizable particle setup 

.. _particle_setup_custom: 

User-customizable particles 
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ 

In order to further expand on the potential of the particle model, new particle classes can be 
created as :guilabel:`User Class` particles. 

.. image:: images/model-reference/particles_user_v12.*
     :alt: Particles user class

To add :guilabel:`User Class` particles go to :menuselection:`Physics --> Particles` and click 
on the :guilabel:`Add Class` tab. This will generate a new tab where the properties of the 
:guilabel:`User Class` particles can be specified. Similarly to other particle classes, a 
:guilabel:`Title` can be optionally given for each :guilabel:`User Class` of particles. The 
:guilabel:`Number of Species` along with their respective :guilabel:`Diameter` and 
:guilabel:`Density` need to be entered as well.

As far as :guilabel:`Particle class properties` are concerned, :guilabel:`User Class` particles 
can be separated, based on their :guilabel:`Particle type`,  into :guilabel:`Marker particles` 
which are based on the :guilabel:`marker particle` class and :guilabel:`Material particles` which 
are based on the :guilabel:`mass particle` class. Please refer to the description of each class 
for a more thorough explanation of their properties.

The :guilabel:`Ignore particle data in restart source file` option determines whether to either take into account the particle information from the 
results file of the previous simulation, when unchecked, or reset their properties based on what is defined in the :guilabel:`User` tab, when checked.

Both available :guilabel:`Particle types`, i.e. :guilabel:`Marker particles` and :guilabel:`Material particles` can be 
customized to have additional user-defined properties.

.. note:: New particle attributes can only be given through customizing the supplied FORTRAN routines for 
   :guilabel:`User Class` particles. However, the details of this process are beyond the scope of the current section. 
   Please refer to the :doc:`customization` section for more information.

.. seealso:: :ref:`ParticleSetupPARTS` and :ref:`CustomizingUserParticles`

.. index:: 
   pair: particles; particle blocks and sources 

.. _particle_blocks_sources: 

Particle blocks and sources 
----------------------------- 

After defining the general particle properties in the :guilabel:`Physics` wideget, the particles can be introduced 
by either :guilabel:`Particle Block(s)` and :guilabel:`Particle Source(s)` lusing the :guilabel:`Particles` widget (|f3d_particle_icon|)
The process for adding :guilabel:`Particle Source(s)` and :guilabel:`Particle Block(s)` is common 
to all particle types. In the :menuselection:`Model Setup` tab, 
click on the particle icon (|f3d_particle_icon|) to bring the particle widget. A :guilabel:`Particle Block` can be thought of as a 
rectangular box, inside which the particles are generated. To create a :guilabel:`Particle Block`, on the :guilabel:`Blocks` tab, click on 
the plus icon (|f3d_particle_plus_icon|). Then, define the :guilabel:`Particle Class` and, optionally, provide a name for the block. Once a block has been created, 
particles of the selected Class will be generated within its extents. The extents of the :guilabel:`Particle Block`  can be defined under the  :guilabel:`Definition` tab, in 
the :guilabel:`Limiters` section. In the event that no :guilabel:`Limiters` are set, the block will extend up to the limits of the computational domain.
The number of particles for each :guilabel:`Particle Block` can also be given in the :guilabel:`Definition` tab, under the :guilabel:`Particle Distribution` section. 
Users can enter either the :guilabel:`Total number of particles` in the :guilabel:`Particle Block` or 
the :guilabel:`Number of particles` in each direction by choosing the :guilabel:`Total` or :guilabel:`Direction` from 
the :guilabel:`Particle distribution` menu, respectively. The :guilabel:`Generation` of particles may follow 
a :guilabel:`Random` or :guilabel:`Uniform` pattern based on the option selected in the :guilabel:`Generation` menu. 


.. image:: images/model-reference/Particle_Block_Definition_v12.*
     :alt: Particles widget block definition

The :guilabel:`Initial` tab contains the initial conditions for the generated particles. More specifically, 
initial particle velocities for each direction can be entered in the :guilabel:`Velocities` section with the exception of marker particles that automatically inherit the velocity of the fluid. 
In the :guilabel:`State` section, the :guilabel:`Initial pressure`, :guilabel:`Initial Temperature` and :guilabel:`Electric Charge` can 
be specified when applicable. The :guilabel:`Pressure Usage` and :guilabel:`Temperature Usage` menus offer the 
option to either accept the initial pressure or temperature definition from the :guilabel:`Particle Block` or assume the values 
of the :guilabel:`Local Fluid`. In the event that the heat trasnfer model is turned off the particle temperature will be equal to the :guilabel:`Reference temperature`.

.. image:: images/model-reference/Particle_Block_Initial_v12.*
     :alt: Particles widget block initial

Finally, the :guilabel:`Concentration` tab allows to determine the initial
ratio between particle species, e.g. for a simple case of 2 particle species a :guilabel:`Concentration` of 1 
for the first particle species and 3 for the second means that 25% of the particles generated will be of the 
first species and 75% will be of the second. By default, the concentration for each species is set to 1 even 
if there are multiple particle species. Hence, the default behavior is generate equal amount of particles for 
each species.

.. image:: images/model-reference/Particle_Block_Concentration_v12.*
     :alt: Particles widget block concentration

A similar process applies to creating a :guilabel:`Particle Source`. To create 
a :guilabel:`Particle Source`, on the particle widget, select the :guilabel:`Sources` tab and click on 
the plus icon (|f3d_particle_plus_icon|). The settings for a :guilabel:`Particle Source` are similar to those for a :guilabel:`Particle Block`. However 
for a :guilabel:`Particle Source`, in the :guilabel:`Definition` tab under :guilabel:`Particle distribution` one could 
define the :guilabel:`Rate of generation` which determines the number of particles 
per second that will be generated by the source. Additionally, a :guilabel:`Particle source` 
can move at prescribed translational and rotational velocities. to define the motion of a :guilabel:`Particle Source` 
on the particle widget, select the :guilabel:`Sources` tab and then navigate to the :guilabel:`Moving` tab. First, the location 
of the reference point needs to be defined. The location of the reference point can be defined in the :guilabel:`Initial location` box 
as a set of coordinates about which translational or angular velocities will be applied. Next, the :guilabel:`Translational velocity` 
and :guilabel:`Angular velocity` can be defined for each coordinate. Tabular input, i.e. values as a function of time, is available 
for both :guilabel:`Translational velocity` and :guilabel:`Angular velocity`. However, the location of the reference point cannot be 
defined as a function of time.

.. image:: images/model-reference/Particle_Source_Definition-Moving_v12.*
     :alt: Particles widget sources 

.. seealso::  :ref:`ParticleSetupSourceInitializedParticles`

Probe particles 
----------------------------- 

Probe particles can be considered as history probes with particle properties. They can be used to provide information 
from the perspective of a particle of any defined :guilabel:`Particle Class` or  :guilabel:`Species`. Probe particles can be added in 
the domain using the :guilabel:`Particles` widget. Click on the particle icon (|f3d_particle_icon|), navigate to the 
:guilabel:`Probes` tab and click on the Plus button (|f3d_particle_plus_icon|) to add a probe particle. Then, define the :guilabel:`Particle Class` 
and, optionally, provide a name for the probe. If the :guilabel:`Particle Class` represents a material particle i.e. 
:guilabel:`Mass`, :guilabel:`Fluid`, :guilabel:`Gas` or :guilabel:`User` particles, the :guilabel:`Species represented by probe` 
must first be selected from the drop-down list in the :guilabel:`Initial` tab. For all particle classes the starting 
coordinates of the particle must be specified in the  :guilabel:`Initial location` box of the :guilabel:`Initial` tab. Moreover, 
the initial velocities for each direction should be defined in the :guilabel:`Velocities`. If the probe particle refers to a material 
:guilabel:`Particle Class`, define its initial conditions in the :guilabel:`State` box. These include, the particle's :guilabel:`Initial pressure` 
:guilabel:`Initial temperature` and :guilabel:`Electric charge` if applicable. Finally, probe particles have a restart simulation 
option of :guilabel:`Ignore particle data in restart source file` to either take into account the particle information from the 
results file of the previous simulation, when unchecked, or reset their position based on what is defined in the :guilabel:`Probes` tab, when checked.

.. image:: images/model-reference/Particle_Probes_Initial_v12.*
     :alt: Particles widget sources 

.. note:: 

   * When a probe particle leaves the domain it is converted to a stationary history probe at its last location
     in the grid.  The probe continues reporting solution quantities but its x, y 
     and z coordinates are now fixed in time.


.. index:: 
   pair: particles; output 

.. _particle_output: 

Particle output
----------------------------- 

The output of the particle model varies between particle classes, but generally includes
particle-specific quantities written to Restart and Selected data catalogs, integrated
quantities written to the General History catalog and diagnostics written to the preprocessor
and solver summary files :file:`prpout` and :file:`hd3out`, respectively.

The particle specific data includes particle locations and velocities, particle life time
since their creation, and various physical attributes (for material particles) such as density, 
size and temperature. Pressure is added for particles of the Gas and Void classes. Each particle
in a class has a unique id as well as a tag telling which initial particle block or source
it came from. Each particle class can be viewed individually or in combination with other particle 
classes.

The General History data includes the total particle counts in each class and the particle
counts of each species crossing flux surfaces (see :ref:`BafflesMnG`) and located inside sampling 
volumes at any given time, if those diagnostic objects are defined. The output also includes 
the particle count of each species created at each particle source, which is useful 
when a distribution of species at a source is defined. Similarly, the number of particles
of each species created at the initial particles blocks at the beginning of simulation is written 
to the preprocessor summary file :file:`prpout`.

Along with the particle counts, the total volume and mass for material particles are also
output at flux surfaces, in sampling volumes and for the whole computational domain.

Finally, the *long* diagnostic prints to the solver summary file :file:`hd3out` include the total
current particle count in each class and the number of discarded particles, e.g., those that left
the domain through an outflow boundary. For the Fluid particle class, the number of particles 
converted to fluid is also written out, and the output for the Gas and Void particles includes 
the number of each type that escaped to void.

.. index:: 
   pair: particles; limitations 

.. _particle_limitations: 

Limitations 
================================ 

Although some of the limitations of the Lagrangian particle model have been discussed previously, a short description of each will be given in this section in order to make the description of the model more inclusive.
Some of these limitations are common to all particle classes and are due to the nature of the model itself while others are limited only to a particular particle class. More specifically:

* Particles do not displace fluid. This limitation applies to all particle classes and implies that the volume of fluid in the domain will remain unchanged, independent of the number of particles in it.
* Particles can only be active the specified host fluid. Once the particles exit the specified host fluid, they are automatically removed from the computational domain.
* Particles can only diffuse in Fluid #1 (or Fluid #2) but not in voids. This is a limitation associated with the particle diffusion model and implies that diffusion effects can only be modeled when particles are located in Fluid.
* Particles do not interact with each other. No inter-particle effects such as collisions between particles can be modeled.
* When the value of the heat transfer coefficient is manually set, it remains constant for all fluids where the particles may exist in.
* Particles of the Marker class do not have any mass attributes. In that sense, marker particles can be considered as individual fluid molecules.
* Particles of the Marker class cannot be given initial velocities in their Particle Block or Source definitions. Hence, they rely only on fluid motion to move inside the computational domain. 
* Particles of the Mass, Fluid, Gas and User classes should be smaller than the size of a computational cell. This limitations stems from the previously mentioned inability of particles to displace fluid. Hence, in cases where particle volume is equal to or larger than the size of the computational cells, fluid volume errors may occur.
* Particles of the Fluid class can only have Fluid #2 (or void) as their host fluid unless solidified. This is a limitation inherent to the nature of fluid particles which convert to Fluid #1 upon contact with a Fluid #1 fluid region.
* Particles of the Fluid class can solidify and evaporate. However, evaporation modeling is only compatible with the two-fluid phase change model.
* When particles of the Fluid class are added to added to the bulk fluid through a free surface, if the fluid fraction of that cell is below 1E-6, the fluid from the particles may be reported as volume error. This is due to the fact that |prod| does not capture fluid fractions of less than 1E-6.  There is a mechanism to accumulate that error and put it back into the cell when it exceeds the cutoff, but in the case of a a finite number of particles with small volume, the  threshold may not be reached.
* Particles of the Void class can only have Fluid #1 as their host fluid. This limitation is caused by the fact that void particles can only be created after Fluid #1 begins to occupy cells that were previously a void region.

For more information on the limitations of the particle model please refer to the :doc:`theory` section of the manual.

.. seealso:: :ref:`DiscreteParticleDynamicsTh`


.. index::
   single: Model Reference; flow in porous components

.. index:: porous components

.. _flowInPorousComponentsMR:

========================================================
Porous Media
========================================================

Porous media models are used to simulate flow through solid objects in which there are interconnected void spaces through which fluid can flow. These models can represent a wide range of permeable objects (e.g. soil, rocks, filters, packed beds, paper). This model is implemented as a sub-grid process by applying volume averaged quantities to the porous region and calculating bulk fluid velocity and pressure drop with one of the available porous media drag models in |prod|. A full description of the governing equations in the porous media model is provided in the theory section (see :ref:`PorousMediaModelsTh`).

The porous media model is activated entirely within the :menuselection:`Model Setup --> Geometry` tab. This is done by creating porous media geometry objects and assigning them porous properties. Porous geometry objects are created within the geometry widget as a :guilabel:`Porous` component type. For each individual porous component type, the user will define properties of the porous media. The :guilabel:`Drag model` specifies the method used by |prod| to calculate the drag in the porous region. This should be the first property defined as its selection will affect the availability of other properties to be defined within the porous properties window. Note that separate drag models and porous properties can be defined for each individual component within the :menuselection:`Model Setup --> Geometry` tab. 


Creating a Porous Component
========================================================

The first step in setting up a simulation with porous media is to define the shape of the porous object with subcomponents (see :ref:`subcomponentsms`) that are added to a :guilabel:`Porous` component type. 
The porous component can be specified in the :menuselection:`Model Setup --> Geometry` tab in two equivalent ways:

* When adding the subcomponment, choose to add it as a :guilabel:`New Component`. In the :guilabel:`Add Component` option window, choose the :guilabel:`Porous` component type. 

  .. image:: images/model-reference/porous-create-component.*
     :alt: First of two Ways of Adding a Porous Component

* An existing component can also be changed to a :guilabel:`Porous` component through the component :guilabel:`Type` menu in the geometry widget.

  .. image:: images/model-reference/porous-change-component.*
     :alt: Second of two Ways of Adding a Porous Component



Porous Component Properties
========================================================

Once the :guilabel:`Component Type` is set to :guilabel:`Porous`, the
parameters on the component branch :menuselection:`Model Setup -->
Geometry --> Component --> Porous Properties` become active.

  .. image:: images/model-reference/porous-component-properties-user-defined-properties.*
     :alt: User-Defined Component Porous Properties
     :scale: 80

* **Porosity:** The ratio of the open volume to the total volume (the 
  volumetric porosity). The porosity must be a positive number or the
  component will be treated as a solid. A porosity of 0.0 represents solid
  (closed) geometry and a value of 1.0 represents empty (open) geometry. The
  default porosity is 0.5. Use multiple porous components to define complex
  regions with spatially-variable porosity. Porosity is dimensionless (open
  volume per total volume), and cannot be time-dependent. Note: If the porosity
  is less than 1% (0.01 default) the variable :envvar:`EPS` causes the porosity
  to be set to zero. :envvar:`EPS` must be set to a lower value than the
  porosity assignment.
* **X-, Y-, and Z-Direction Porosity:**  The porosity can be specified
  independently in each coordinate direction, allowing for the simulation of
  anisotropic materials with preferential flow paths, as in tube bundles.
  The units of the directional porosity are open area per total area
  (dimensionless). The *volumetric* porosity must be between the maximum of 
  the directional porosities and one.
* **Capillary Pressure:** The average, constant additional resistance or
  enhancement to flow in the media as a function of capillary 
  (surface tension) effects. The capillary pressure has units of pressure (force/area, 
  mass/length/time\ :sup:`2`).  More detail on the different capillary 
  pressure models is given below in :ref:`capillarypressureMR`.
* **Specific Surface Area:** The total surface area per unit volume of the bulk media. 
  This is used only for heat transfer and defaults 
  to 1.0. Units of area per volume (length\ :sup:`-1`).
* **Drag model:** Choose the drag model to be applied in the porous media regions. Options are 
  available for both saturated and unsaturated flow. The choice of the  drag model affects the 
  dependency of the remaining properties within the :guilabel:`Porous properties` window. 
* **Darcian / Non-Darcian Permeability:** The porous media linear and non-linear
  permeabilities. The coefficients are used only when the :guilabel:`Permeability dependent saturated drag model` is active. 
* **Drag Coefficient A / B:** Coefficients that describe the
  magnitude of drag experienced by fluid in the media. The values and units of these parameters 
  depend on the selected drag model (e.g., :guilabel:`Forchheimer saturated drag`).
* **Minimum Saturation:** The volumetric fraction of porosity that cannot be 
  drained. Usually a function of capillary surface tension effects. Defaults 
  to 0.0; dimensionless.
* **Maximum Saturation:** The maximum fraction of porosity that can be filled. 
  This is less than one when there are void regions that can't be occupied by fluid
  because they are completely enclosed by solid or because of bubble
  entrapment. Defaults to 1.0; dimensionless.
* **Unsaturated Drag Function:**
  Selects a drag (i.e., permeability) relation for unsaturated porous media. 
  Options are described in detail below in :ref:`unsaturateddragMR`.
* **Unsaturated Pressure Curve:** Selects  whether the full wetting and 
  draining hysteresis relationship should be used, or if
  a simpler wetting or draining curve should be used.
* **Unsaturated Capillary Pressure Effects:** Choose between options for :guilabel:`Simplified 
  Capillary Pressure` and :guilabel:`Van Genuchten Capillary Pressure` to specify capillary pressure 
  as a function of the local saturation and one or more hysteresis functions.
* **Simplified Saturation at Max Capillary Pressure:**
  When the simplified capillary pressure model is used, this term describes the absolute saturation 
  (dimensionless) below which the capillary pressure magnitude is greatest and constant.
* **Simplified Maximum Capillary Pressure:** 
  The capillary pressure matching the absolute saturation when using the simplified capillary
  effects model. Units of pressure (force/area, mass/length/time\ :sup:`2`).
* **Pressure Curve Fitting Coefficient:** A
  dimensionless exponent used to describe the relationship between saturation, drag and capillary pressure 
  in unsaturated media when using the power law or exponential drag models.
* **Wetting and Draining Curve Parameters:** The wetting and draining curve parameters used with the
  Van Genuchten capillary pressure effects model.


.. seealso:: \  :ref:`ComponentPropertiesPorousComponents`


.. index:: porous media, drag, porous media drag
.. _porousdragmodelsMR:

Porous Media Drag Models
========================================================

The selection of the porous media drag model is a critical step in the simulation setup. The selection of the drag model will depend on the nature of the physical scenario being modeled, and will affect how all other porous media properties will be defined. From the :guilabel:`Drag model` selection menu the user can choose between an option for :guilabel:`No Drag` and options for both *saturated* and *unsaturated* porous media. Choosing :guilabel:`No drag` maintains a sharp interface in the porous media with constant capillary pressure but no drag -- basically, the fluid accelerates when it moves through the porous medium (due to mass conservation), but no additional drag is computed.

The three :ref:`saturateddragMR` in |prod| are as follows:

* :ref:`darciandragMR`
* :ref:`ForchheimersaturateddragmodelMR`
* :ref:`permeabilitydependentdragMR`

The three :ref:`unsaturateddragMR` in |prod| are as follows:

* :ref:`powerlawdragTh`
* :ref:`exponentialUnsaturatedDragModelTh`
* :ref:`mualemsUnsatDragModelRelativePermeabilityTh`


Calculating the Porous Media Drag Coefficient
----------------------------------------------------------------------------

The section provides details on how each of the porous media drag models are implemented in |prod|. In all cases, the resistance to flow in a porous medium is represented in the Navier-Stokes equations as a drag term proportional to the velocity. Note that the drag coefficient :math:`F_d` here has units of [1/t], and is calculated based on the selection of 
the :guilabel:`Drag model`:

.. math::
   :label: navierStokesEquationDragTermProportionalToVelocityMR

   {\mathbf{b}}{\text{ }} = {\text{ }}{F_d}{\mathbf{u}_{\text{microscopic}}}

The drag term (\ :math:`{F_d}{\mathbf{u}_{\text{microscopic}}}`) is added to the right side of the momentum balance (see :ref:`MomentumEquationsTh`). Here :math:`\mathbf{u}_{\text{microscopic}}` is the microscopic flow velocity, which is also reported by the postprocessor. Saturated macroscopic and microscopic velocities are theoretically related by the media effective porosity via the equation:

.. math:: 
   :label: pore_to_bulk

   \mathbf{u}_{\text{microscopic}} = \frac{ \mathbf{u}_{\text{bulk}} }{\phi}


The drag coefficient :math:`{F_d}` is calculated for each cell at each time step and converted with :math:`\Delta t` (the time-step size) as output into the dimensionless quantity :math:`\text{DRG}`:

.. math:: \text{DRG} = \frac{1}{{1 + {F_d}\Delta t}}

where :math:`\Delta t` is the time step size for the current computational cycle.
This value always varies between 0.0 (infinite drag -- no fluid flow) and 1
(zero drag -- infinite permeability). This quantity is plotted in the
output as :math:`1 - \text{DRG}` and is called the *normalized drag coefficient*.


.. index::
   single: models; Saturated porous media drag models

.. index:: Saturated porous media drag models

.. _saturateddragMR:

Saturated Porous Media Drag Models
--------------------------------------------------------

.. index::
   single: models; Darcian saturated drag model

.. index:: Darcian saturated drag model

.. _darciandragMR:

Darcian Saturated Drag Model
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

The basis of the Darcian saturated drag is the equation of Henry Darcy, in
which the unidirectional flow rate through porous media is linearly
proportional the applied pressure difference:

.. math::
   :label: darcys_law

   \mathbf{u}_{\text{bulk}} =  - \frac{K}{\mu } \nabla p 

where: 

* :math:`\mathbf{u}_{\text{bulk}}` is the apparent velocity 
  (i.e., the volume flux of fluid through the material) 
* :math:`K` is the intrinsic permeability
* |mu| is dynamic viscosity
* :math:`\nabla p` is the pressure gradient within the porous material

The permeability :math:`K` can be expressed in terms of the drag coefficient
:math:`F_d` according to:

.. math:: 
   :label: permeability_dragcoeff

   K = \frac{{\phi \mu }}{{\rho {F_d}}} \Longrightarrow F_d = \frac{{\phi \mu }}{{\rho K}} 

which, combined with Eq. :eq:`pore_to_bulk` and Eq. :eq:`darcys_law` is

.. math:: 
   :label: dragcoeff
  
   {F_d} \cdot \mathbf{u}_{\text{microscopic}}= - \frac{1}{\rho} \nabla p

Darcy's original observation holds when the pore Reynolds number :math:`Re_P`
is less than 1, and is usually reasonably accurate up to :math:`Re_P` of 10,
while the addition of the quadratic term provides better accuracy when the
velocity of fluid in the media is such that :math:`Re_P` exceeds 10. The
quadratic term is discussed in the following sub-section on the
:ref:`ForchheimersaturateddragmodelMR`.  For the Darcian model, :math:`{F_d}`
in :eq:`dragcoeff` is specified directly as :guilabel:`Drag Coefficient A` in
:menuselection:`Model Setup -->Geometry --> Component --> Porous Properties`.

.. index::
   single: models; Forchheimer saturated drag model

.. index:: Forchheimer saturated drag model

.. _ForchheimersaturateddragmodelMR:

Forchheimer Saturated Drag Model
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

The Forchheimer equation describes losses in porous materials as a combination
of viscous (linear) and form  (quadratic) drag terms. The form drag becomes
important as the pore Reynolds number (\ :math:`Re_P`) exceeds 10. In
Forchheimer's equation, the pressure drop is given:

.. math::
   :label: forchheimer_eqn_p

    - \nabla p = \left( a + b \left| \mathbf{u}_{\text{bulk}} \right| \right) \mathbf{u}_{\text{bulk}} 

where:

* :math:`a` and :math:`b` are coefficients defined by experimental data,
* :math:`\mathbf{u}_{\text{bulk}}` is the apparent velocity (i.e., the volume flux of fluid through the material),
* :math:`\nabla p` is the pressure gradient in real space within the porous material.

The linear (Darcian) and quadratic (non-Darcian) flow loss equations are 
combined into a single expression for :math:`{F_d}`:

.. math::

   F_d \mathbf{u}_{\text{microscopic}} = - \frac{1}{\rho} \nabla p = \frac{\mu }{\rho }\frac{1 - {\phi}}{\phi}\left[ {A \frac{{1 - \phi}}{\phi} + B \frac{{Re_p}}{d_{\text{pore}}} } \right] \mathbf{u}_{\text{microscopic}}

where:

* :math:`A` is the linear drag coefficient (\ :guilabel:`Drag Coefficient A`),
* :math:`B` is the non-linear drag coefficient (\ :guilabel:`Drag Coefficient B`),
* :math:`\phi` is the porosity,
* |mu| is the viscosity,
* |rho| is the fluid density.

Combining with the pressure loss equation :eq:`forchheimer_eqn_p` yields the
linear and quadratic contributions to pressure loss per unit length as a
function of bulk velocity:

.. math:: 
   :label: pressure_loss_per_unit_length

   - \nabla p = A \cdot \left| \mathbf{u}_{\text{bulk}} \right| \mu \frac{(1 - \phi )^2}{\phi^3 } + B \cdot \left| \mathbf{u}_{\text{bulk}} \right|^2 \rho \frac{(1 - \phi)}{\phi^3}

:math:`A` and :math:`B` are related to the experimentally determined coefficients :math:`a` and :math:`b` by:

.. math:: 
   :label: porousDragCoefficient

   A = a \frac{\phi^3}{\mu (1 - \phi)^2}  {\text , } \quad  B = b \frac{\phi^3}{\rho (1 - \phi)}

Equation :eq:`porousDragCoefficient` can be used to curve-fit pressure loss
testing data, where :math:`A` and :math:`B` are media-specific loss
coefficients. When test data is unavailable, they can be estimated:

.. math::

   A = \frac{\alpha }{d_{\text{fiber}}^2}  {\text , } \quad  B = \frac{\beta }{d_{\text{fiber}}}

where:

* |alpha| is a constant, typically of order 180, 
* |beta| is a roughness factor typically ranging between 1.8 and 4.0 (representing smooth through rough fibers), and
* :math:`d_{\text{fiber}}` is the average equivalent spherical diameter of the fibers, dendrites, or particles of the porous media. For randomly packed spheres, the Ergun equation uses |alpha| = 150 and |beta| = 1.75. Test data, where available, will provide better accuracy.

.. index::
   single: models; permeabiilty dependent saturated drag model

.. index:: permeability dependent saturated drag model

.. _permeabilitydependentdragMR:

Permeability Dependent Saturated Drag
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Permeability dependent saturated drag model is nothing but
:ref:`ForchheimersaturateddragmodelMR`, with porous media permeabilities as
the input, instead of :guilabel:`Drag Coefficient A` and :guilabel:`Drag
Coefficient B`. It provides a convenient way of defining saturated flow drag
models, if the porous media permeabilities are known.

In the Forchheimer's pressure drop Eq. :eq:`forchheimer_eqn_p`, the
coefficients :math:`a` and :math:`b` can be related to the porous media
permeabilities as:

.. math::

   a=\frac{\mu }{K} {\text , } \quad b=\frac{\rho }{K_2} 

where:

* |mu| is the viscosity,
* |rho| is the density,
* :math:`K` is the Darcian permeability
* :math:`K_2` is the non-Darcian or inertial permeability.

Combining with Eq. :eq:`porousDragCoefficient`, the drag coefficients
:math:`A` and :math:`B` can be related to Darcian permeability :math:`K` and
non-Darcian permeability :math:`K_2` by:

.. math::

   A = \frac{\phi^3}{(1 - \phi)^2 K} {\text , } \quad B = \frac{\phi^3}{(1 - \phi) K_2}

If the non-Darcian permeability :math:`K_2` is not provided, the :guilabel:`Drag Coefficient B` will be set to 0, and the drag model is reduced to :guilabel:`Darcian Saturated Drag Model`.

.. index:: saturated porous media in shallow water

.. _SatPorousinShallowWaterMR:
.. note:: The shallow water model is a 2-D simplification that assumes hydrostatic pressure. It can be combined with porous media, with some caveats. Details are given in the :ref:`ShallowWaterPorousMR` section.


.. index::
   single: models; Unsaturated porous media drag models

.. index:: Unsaturated porous media drag models

.. _unsaturateddragMR:

Unsaturated Porous Media Drag Models
--------------------------------------------------------

Drag losses in unsaturated porous components, like capillary pressure effects,
are primarily a function of saturation, as well as intrinsic characteristics
of the media like pore size, tortuosity, and microscopic geometry. An
unsaturated drag model can be selected for each component when the :guilabel:`Drag Model` is selected to be :guilabel:`unsaturated flow`. Within the property for :guilabel:`Unsaturated Drag Function` the user can choose between :guilabel:`Power Law`, :guilabel:`Exponential`, or :guilabel:`Mualem`.
The models are described in the theory section (see :ref:`DragCalculationsInUnsaturatedFlowsTh`)

.. note:: 
   * The :guilabel:`Exponential unsaturated drag` model and the 
     :guilabel:`Simplified unsaturated capillary pressure` model 
     both use the same value of :guilabel:`Pressure Curve Fitting Coefficient`.
   * See :doc:`input-variable-summary-units` section :ref:`ComponentPropertiesPorousComponents` for associated input file values.

.. index:: capillary pressure
.. _capillarypressureMR:

Capillary Pressure Models
===================================

.. index:: capillary effects, porous components

Saturated Capillary Effects in Porous Components
--------------------------------------------------------------------

Saturated flow in porous media is characterized by a sharp interface between
fully saturated and fully unsaturated regions. When a :guilabel:`No Drag` or 
one of the *Saturated* models are selected for the :guilabel:`Drag Model` 
property, :guilabel:`Capillary Pressure` (defined in :menuselection:`Model Setup -->
Geometry --> Component --> Porous Properties`) is a *user-defined 
constant* that is applied at the interface between the fully saturated and 
unsaturated regions only, i.e., in cells where 0.0 < fluid fraction :math:`F` < 1.0. 
The sharp interface within *saturated porous media* is computed with |prod|'s VOF 
algorithms to maintain accurate interface shapes.

The :guilabel:`Capillary Pressure` is subtracted from the void pressure at the
sharp fluid interface within the porous media. It is defined for each
component and is positive when the media is wetting and negative when the
media resists wetting. While the best way to determine the interface
capillary pressure is via laboratory experiment, the following relation
estimates the capillary pressure within a porous medium:

.. math:: p_{\text{cap,sat}} = \frac{4 \sigma \cos \theta }{d_{\text{pore}}}

where:

* |sigma| is the surface tension of the fluid, 
* |theta| is the average contact angle between fluid and solid in a pore (< :math:`90^\circ` is wetting, > :math:`90^\circ` is nonwetting), and
* :math:`d_{\text{pore}}` is the average pore diameter within the porous material.

.. index:: capillary effects, porous components

.. _UnsaturatedCapillaryEffectsinPorousComponentsMR:

Unsaturated Capillary Effects in Porous Components
--------------------------------------------------------------------

The capillary pressure model in porous media can be used only in one-fluid,
free-surface flows. There are two models that describe the relationship
between saturation and capillary pressure: the :guilabel:`Simplified capillary
pressure` model (\ :ref:`IVG = 0 <ComponentPropertiesPorousComponents>`) and a
more thorough :guilabel:`Van Genuchten capillary pressure` model :cite:`Niemi-Bodvarsson-1988`
(\ :ref:`IVG = 1 <ComponentPropertiesPorousComponents>`).

Both models allow the user to specify capillary pressure as a function the local
saturation and one or more hysteresis functions. The user may include or ignore
hysteresis effects in each component by changing the :guilabel:`Unsaturated Pressure
Curve` option under :menuselection:`Model Setup --> Geometry --> Component --> Porous Properties`:

* :guilabel:`Wetting & Draining` -- full hysteresis (\ :ref:`IOPCFD <ComponentPropertiesPorousComponents>` = 0),
* :guilabel:`Wetting only` (\ :ref:`IOPCFD <ComponentPropertiesPorousComponents>` = 1), or
* :guilabel:`Draining only` (\ :ref:`IOPCFD <ComponentPropertiesPorousComponents>` = 2)

In addition, one of three drag models can be selected for each component:

* :guilabel:`Power Law` (\ :ref:`IODFIT <ComponentPropertiesPorousComponents>` = 1)
* :guilabel:`Exponential` (\ :ref:`IODFIT <ComponentPropertiesPorousComponents>` = 2), or 
* :guilabel:`Mualem`'s model (\ :ref:`IODFIT <ComponentPropertiesPorousComponents>` = 3).

Both the :guilabel:`Simplified` and :guilabel:`Van Genuchten capillary
pressure` models use :guilabel:`Minimum` and :guilabel:`Maximum` saturation
values, which represent the irreducible and maximum absolute saturation
fraction of the media from 0 to 1. With the local fluid fraction :math:`F` they
determine the relative (effective) saturation :math:`{S_e}`:

.. math:: {S_e} = \frac{F - F_{CMN}}{F_{CMX} - F_{CMN} }

where :math:`F_{CMN}` is the :guilabel:`Minimum Saturation` and
:math:`F_{CMX}` is the :guilabel:`Maximum Saturation`.

The capillary pressure and drag models and their parameters are described
individually below.

.. index::
   single: models; simplified unsaturated capillary pressure

.. index:: simplified unsaturated capillary pressure model

.. _simplifiedUnsaturatedCapPressModelMR:

Simplified Unsaturated Capillary Pressure Model
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

The simplified form of the wetting and draining relationship between
saturation and capillary pressure is illustrated below:

  .. image:: images/model-reference/flow-in-porous-components-simplified-unsaturated-capillary-pressure-model.*
     :alt: Simplified Unsaturated Capillary Pressure Model Hysteresis 

P\ :sub:`CMX` is the :guilabel:`Simplified Maximum Capillary Pressure` and
defines the maximum capillary pressure that retains fluid in the material at
the :guilabel:`Simplified Saturation at Maximum Capillary Pressure` -- **F**\
:sub:`pcmx` in the figure above.

The shape of the curves for saturation greater than :guilabel:`Simplified
Saturation at Maximum Capillary Pressure` is given by the following relations.
The bubbling (air-entry) pressure :math:`P_b`, is the pressure at which air
can be forced into an initially saturated sample, and is the magnitude of the
separation between the wetting and draining curves in the
:guilabel:`Simplified capillary pressure` model.

.. math:: 

   {p_{cap,drain}} = {p_b}S_e^{ - P_{EXP}}

.. math::

   {p_{cap,wet}} = {p_b}\left( {S_e^{ - P_{EXP}} - 1} \right)

where

.. math:: {p_b} = P_{CMX} {\left( {\frac{{F_{PCMX} - F_{CMN}}} {{F_{CMX} - F_{CMN}}}} \right)}^{P_{EXP}}

and 

* :math:`P_{EXP}` is the :guilabel:`Pressure Curve Fitting Coefficient`,
* :math:`P_{CMX}` is the :guilabel:`Simplified Maximum Capillary Pressure`,
* :math:`F_{PCMX}` is the :guilabel:`Simplified Saturation at Maximum Capillary Pressure`,
* :math:`F_{CMN}` is the :guilabel:`Minimum Saturation`, and
* :math:`F_{CMX}` is the :guilabel:`Maximum Saturation`.

Choose values of :guilabel:`Pressure Curve Fitting Coefficient`,
:guilabel:`Simplified Maximum Capillary Pressure` and :guilabel:`Simplified
Saturation at Maximum Capillary Pressure` to fit experimental data. 

Scanning curves represent the change in :math:`p_{cap}` vs. :math:`S_e` when
alternating between filling and draining, and have an arbitrary simplified
slope of:

.. math:: \frac{\partial p_{cap}}{\partial S_e} = \frac{\partial p_{cap,drain}}{\partial S_e} + \frac{p_{cap,drain} - p_{cap,wet}}{0.1}

.. note:: See Input Variable Summary section :ref:`ComponentPropertiesPorousComponents` for associated input file values.

.. _vanGenuchtenUnsaturatedCapPressModelMR:

.. index::
   single: models; Van Genuchten unsaturated capillary pressure

.. index:: Van Genuchten unsaturated capillary pressure model

Van Genuchten Unsaturated Capillary Pressure Model
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

A more physical form of the complex relationship between saturation, capillary
pressure, and draining/wetting state of the fluid is provided by the :guilabel:`Van
Genuchten capillary pressure` model illustrated below, with arrows showing the
state path for a series of changes in wetting direction:

  .. image:: images/model-reference/flow-in-porous-components-van-genuchten-capillary-pressure.*
     :alt: Van Genuchten Capillary Pressure Model Hysteresis

The numbers on the plot are from a typical saturation path with a porous
material, which proceeds as follows:

1. Begin draining from saturated media. Capillary pressure follows envelope.
#. Reverse to filling. Capillary pressure follows 1st-order filling scanning curve.
#. Reverse to draining. Capillary pressure follows 2nd-order draining scanning curve.
#. Continue draining. Capillary pressure follows draining envelope.
#. Minimum absolute saturation. Begin filling. Capillary pressure follows envelope.
#. Reverse to draining. Capillary pressure follows 1st-order draining scanning curve.
#. Reverse to filling. Capillary pressure follows 2nd-order filling scanning curve.
#. Reverse to draining. Capillary pressure follows 3rd-order draining scanning curve.
#. Finish experiment.

The primary wetting and draining curves define the envelope of the capillary
pressure for each porous media-liquid system. If the process switches between
wetting and draining before filling or draining is complete, the capillary
pressure follows scanning curves inside the envelope. There are an infinite
number of wetting and draining scanning curves within the envelope, and the
actual curve depends on the local saturation and capillary pressure when the
reversal occurs. The model detailed by :cite:`Niemi-Bodvarsson-1988` has been
enhanced to include the first-order draining and second-order wetting
scanning curves.

.. math:: 

   p_{cap,wet} &= \alpha_w \left[ \left( \frac{1}{S_e} \right)^{\frac{1}{m_w}} - 1 \right]^{\frac{1}{n_w}} \\

   p_{cap,drain} &= \alpha_d \left[ \left( \frac{1}{S_e} \right)^{\frac{1}{m_d}} - 1 \right]^{\frac{1}{n_d}}

where:

* :math:`p_{cap,wet}` is the wetting capillary pressure
* :math:`\alpha_w` is the :guilabel:`Wetting Curve Alpha Coefficient` in units of pressure: you may need to convert literature values that are in units of inverse length (head)
* :math:`m_w` is the :guilabel:`Wetting Curve m-exponent`, for soils often assumed to be :math:`1 - \frac{1}{n_w}`
* :math:`n_w` is the :guilabel:`Wetting Curve n-exponent`
* :math:`p_{cap,drain}` is the draining capillary pressure
* :math:`\alpha_d` is the :guilabel:`Draining Curve Alpha Coefficient` in units of pressure like :math:`\alpha_w` and in soils is often assumed to equal :math:`\alpha_w`
* :math:`m_d` is the :guilabel:`Draining Curve m-exponent`, for soils often assumed to be :math:`1 - \frac{1}{n_d}`
* :math:`n_d` is the :guilabel:`Draining Curve n-exponent`, for soils often assumed to equal :math:`n_w`

The curves should be defined from experimental data and curve-fit using the
equations above. The first-, second-, and higher-order draining curves define
intermediate capillary pressure vs. saturation paths depending on whether the
direction of flow has reversed once, twice, or more than twice. The scanning
curve shapes are set by the primary curve parameters, which should be
determined experimentally. Typical values (used to generate the curves above)
are shown below:

.. tabularcolumns:: |p{9cm}|p{6cm}|

.. _TableVanGenUnsatCapPressHyst:

.. list-table:: 
   :widths: 60 40
   :header-rows: 1
   :class: longtable

   * - *Parameter*
     - *Value*

   * - :guilabel:`Minimum Saturation` (\ :ref:`OFCMN <ComponentPropertiesPorousComponents>`)
     - 0.0714

   * - :guilabel:`Maximum Saturation` (\ :ref:`OFCMX <ComponentPropertiesPorousComponents>`)
     - 0.9400

   * - :guilabel:`Wetting Curve Alpha Coefficient` (\ :ref:`ALPHWOBS <ComponentPropertiesPorousComponents>`)
     - 53316 dyne/cm\ :sup:`2`

   * - :guilabel:`Draining Curve Alpha Coefficient` (\ :ref:`ALPHDOBS <ComponentPropertiesPorousComponents>`)
     - 118630 dyne/cm\ :sup:`2`

   * - :guilabel:`Wetting Curve m-exponent` (\ :ref:`XMWOBS <ComponentPropertiesPorousComponents>`)
     - 0.6

   * - :guilabel:`Draining Curve m-exponent` (\ :ref:`XMDOBS <ComponentPropertiesPorousComponents>`)
     - 0.9091

   * - :guilabel:`Wetting Curve n-exponent` (\ :ref:`XNWOBS <ComponentPropertiesPorousComponents>`)
     - 9

   * - :guilabel:`Draining Curve n-exponent` (\ :ref:`XNDOBS <ComponentPropertiesPorousComponents>`)
     - 11


.. note::
   * See Input Variable Summary section :ref:`ComponentPropertiesPorousComponents` for associated input file values.
   * The capillary pressure models require that the porous media be resolved by at least three cells.


.. index:: flow losses, porous baffles, baffles

.. index::
   single: Model Reference; flow losses in porous baffles

.. _flowLossesInPorousBafflesMR:


Porous Baffles
========================================================

  .. image:: images/model-reference/flow-losses-in-porous-baffles-porosity-properties.*
     :alt: Baffles tree - Porosity Properties

Baffles in |prod| are used to describe thin walls. Unlike solid components,
baffles do not block any volume; they are located at boundaries between
computational cells blocking the whole face. If, for example, a spherical baffle
is defined in the input, the preprocessor will convert it to a stair-step shape
conforming to the nearest cell boundaries. Therefore baffles are ideal to
describe flat thin, flat surfaces. Additionally, a uniform porosity can be given
to each baffle to model permeable screens.

To add a baffle, open the :guilabel:`Baffles` sub-window in :guilabel:`Model Setup --> Baffles` 
and click on the *add* button. Simple shapes then can be defined
using variables in :guilabel:`Definitions` and :guilabel:`Limiters` under the
newly created baffle. Specify only *one* definition, and as many
transformations and limiters as necessary: for example, to make a circular
plate baffle, specify the definition as :guilabel:`Z = 0`, a limiter as
:guilabel:`Cylinder Outer Radius`, and then rotate and translate the baffle to
the desired location. Remember that specifying a radius as a definition or
limiter applies the radius around the z-axis, not necessarily around the
center of the baffle.

Porosity of a baffle is defined in Porosity Properties in the Baffle property
tree. Baffle porosity can take values between 0.0, for no porosity, and 1.0, for
a completely open baffle.

Flow losses in porous baffles can be linear or quadratic, or both, with
respect to the fluid velocity. Note that the flow losses are computed from the
microscopic fluid velocity, using the actual flow velocity inside the porous
baffle. The linear losses are specified using the Linear Loss Coefficient, and
quadratic flow losses are defined using the Quadratic Loss Coefficient. The
latter has no dimension, while the former has the dimension of velocity. 

If the quadratic coefficient (:envvar:`KBAF2`) is unknown, then the following are typical 
values for screens composed of rows of elements (typically cylindrical) having an open area fraction, *A*.

.. math:: KBAF2=\left(\frac{1-A}{A}\right )^2,\;\;\; if\;A<0.7
.. math:: KBAF2=\frac{1-A}{A^2},\;\;\; if\;A>0.7

.. seealso:: \  More details on how the loss terms are incorporated into flow equations in the Theory Manual: :ref:`BaffleFlowLossesTh`.


.. index:: 
   single: Model Reference; reaction kinetics

.. index:: reaction kinetics

.. _chemicallyReactingFlowsMR:

========================================================
Reaction Kinetics
========================================================

Reaction kinetics govern the rate at which reactants react to yield products. 
For instance, in the equation below, reactants :math:`A` and :math:`B` react to produce :math:`D`. The 
rate of reaction (transformation) is given by :math:`r` and is dependent on the specific reaction 
rate (:math:`k`), concentrations of the reactants (:math:`C_A` and :math:`C_B`) and the orders (:math:`n_A` and :math:`n_B`) of each reactant.

.. math:: A+B\rightarrow\ D
.. math:: -r=k{(C_A)}^{n_A}{{(C}_B)}^{n_B}

The reactants can be chemical and/or biological in nature. If the specific reaction 
rates and the orders for each reactant are known, the evolution (uncoupled, partially 
coupled or coupled) of each reactant can be accurately calculated using the |prod|
:menuselection:`Reaction Kinetics` model. See :ref:`ReactiveFlowsAlgorithmTh` for 
a more detailed description of the model theory and numerical approximations. 

In the |prod| :menuselection:`Reaction Kinetics` model, each reactant is represented as a scalar variable 
created using the :ref:`scalarsMR` model. Once these scalars have been created, a set of reaction kinetics 
parameters can be defined for each scalar within the :menuselection:`Model Setup --> Physics --> Reaction Kinetics` dialog.   
The interface for defining the specific reaction rates and the orders for each reactant is simple and intuitive. 
A sample set of partially coupled reactions, and their equivalent input into the :menuselection:`Reaction Kinetics` dialog is shown.

.. math:: \frac{\partial C_1}{\partial t}={{-k}_1C_1+k}_2C_2{C_3}^{0.5}-k_3C_1{C_4}^{0.2}
.. math:: \frac{\partial C_2}{\partial t}={-k}_4C_1C_2
.. math:: \frac{\partial C_3}{\partial t}={-k}_5C_3
.. math:: \frac{\partial C_4}{\partial t}={-k}_6C_4

.. image:: images/model-reference/reaction-kinetics.*
    :alt: scalar properties

To define the system of reactions shown, the user clicks on each term on the right side of the dialog and enters a 
value for :guilabel:`Rate coefficient` and :guilabel:`Exponent` for each scalar reactant. For example, four 
scalars were first created in the :ref:`scalarsMR` model and are now available as reactants :math:`C_{1-4}` corresponding to 
bacteria, biodegradable substrate, oxygen and chlorine. Clicking on each term for bacteria (:math:`C_1`), the specific 
reaction rates :math:`k_{1-3}` are set to 1e-6. Then clicking on :guilabel:`Term 1` for :math:`C_{2-4}`, the values of :math:`k_{4-6}` are 
set to 1e-5. The values for :guilabel:`Exponent` are defined similarly. In the example shown, we want to set 
:guilabel:`Term 2` for the bacteria (:math:`C_1`) reaction rate as a function of biodegradable substrate and oxygen concentrations. 
This is specified in the model by clicking on the input box for :guilabel:`Term 2` of :math:`C_1` and then defining the :guilabel:`Exponent` 
for biodegradable substrate (:math:`C_2`) as 1, and Oxygen (:math:`C_3`) as a value of 0.5. 


.. seealso:: \  
   
   * Parameters in :ref:`ChemistryParameters`
   * :ref:`ChemistryNamelistCHM`
   * :ref:`scalarsMR`
   * :ref:`ReactiveFlowsAlgorithmTh`

.. index:: 
   single: Model Reference; Scalars

.. _scalarsMR:

=====================================================   
Scalars
=====================================================

Description and usage
=====================================================

The :guilabel:`Scalars` model is a powerful feature that allows user-defined
scalar variables to be included in the calculation. A transport equation
is solved for each advectable scalar; non-advectable scalars are also allowed. 
These variables can be used to modify the fluid density, viscosity, elastic modulus
and viscoelastic properties as a function of the scalar concentration.  Scalars are also
useful in :doc:`customization` where they provide an advectable spatial
variable that is automatically output to the :file:`flsgrf.*` file and for which source
terms and other dependencies can be added via customization of the source code routines.


Setup and dependencies
=====================================================

The model is configured on the :guilabel:`Model Setup-->Physics-->Scalars`
dialog.  New scalars can be added by increasing the :guilabel:`Number of
Scalars` entry and then each scalar variable can be assigned
properties and behaviors.

  .. image:: images/model-reference/scalars_v12-0-1.*
     :alt: scalar properties

The different properties are:

* :guilabel:`Scalar title`:  This sets the name of the scalar for setup and post-processing.
* :guilabel:`Advection`:  
  This option defines whether the scalar variable will 
  advect with fluid 1, fluid 2, both fluid 1 and fluid 2, or not at all.  
  Most physical scalars will be advectable; non-advecting scalars are most 
  commonly used in customizations.
* :guilabel:`Density adds to fluid density`:
  This option allows the local scalar concentration (specified in dimensions of mass per unit volume)
  to add to the local fluid density.
* :guilabel:`Scalar viscosity`:  
  This option allows the local fluid viscosity to be a function
  of the local scalar concentration.  The final viscosity is a 
  density-weighted average of the fluid viscosity and the scalar viscosity.
* :guilabel:`Molecular diffusion coefficient`: 
  This defines the molecular diffusion coefficient of the scalar in terms
  of mass per length*time.
* :guilabel:`Initial uniform concentration`:  This assigns a uniform
  scalar concentration everywhere in the domain.
* :guilabel:`Turbulent diffusion multiplier`:  This allows for the adjustment 
  of the scalar diffusion relative to the turbulent diffusion of momentum.  
  A value of 1.0 means that the scalar diffuses at the same rate as the momentum, 
  while values less than 1.0 mean that the scalar diffuses slower 
  than momentum. A value of 0 indicates that no turbulent diffusion 
  of the scalar is occurring, and values greater than 1.0 make no physical sense.
* :guilabel:`Concentration for residue formation`:  This input field is used in conjunction with 
  the residue model to define the maximum packing density for the solute scalar. Once the solute is concentrated to 
  its maximum packing density, then any further concentration results in a
  residue that is fixed (see :ref:`vaporizationResidueMR`).

The :guilabel:`Activate vaporization residue model` checkbox can be used to turn the 
residue model on or off (see :ref:`vaporizationResidueMR`).


Once the scalar properties are defined, the scalar concentrations need to be
defined in the :ref:`ICs` using fluid regions (see
:ref:`fluid_regions_MnG`):

  .. image:: images/model-reference/ModelReference_FluidRegionScalars_v12.*
     :alt: scalar initialization
     :scale: 80


The scalar concentrations can also be defined in the :ref:`SettingBCs`, at
:ref:`mass sources <defineScalarsAtSourceMR>`, and at :ref:`mass-momentum
sources <MassMomentumMnG>`, as shown below:

  .. image:: images/model-reference/scalars-bcs.*
     :alt: scalars at BCs
     :scale: 65


.. note::
   * The :guilabel:`Density adds to fluid density` option requires the 
     :menuselection:`Density evaluation-->Density evaluated as a function of other
     quantities` model.
   * The :guilabel:`Scalar viscosity` option requires the 
     :menuselection:`Viscosity and turbulence-->Viscous flow` option be active.  
   * The :guilabel:`Turbulent diffusion multiplier` option applies only when one of the 
     turbulence models on the :guilabel:`Viscosity and turbulence` panel be active.
   * Scalars can only modify the elastic and viscoelastic properties of the fluid if 
     the :guilabel:`Elasto-visco-plasticity` model is active.
   * The scalar concentration set for a boundary condition will be important if 
     fluid is entering the domain from that boundary or if the scalar may
     diffuse into the domain from that boundary.


.. seealso::
   * :ref:`ScalarAdvectionTh`
   * :ref:`turbulenceSectionMR`
   * :ref:`nonNewtonianFluidMR`
   * :ref:`flowWithDensityVariationsMR`

  


Limitations
=====================================================

The :guilabel:`Scalars` model is quite general but there are a couple limitations:

* The scalar concentfration can only add to the fluid density, not reduce it.
* The local viscosity is a density-weighted average of the scalar viscosity and
  the molecular viscosity.
* The local elastic and viscoelastic properties are density-weighted averages
  of the scalar elastic/viscoelastic properties and the fluid elastic/viscoelastic
  properties.


.. index::
   single: Model Reference; sediment scour

.. index:: sediment scour, deposition

.. _sedimentScourMR:

========================================================
Sediment Scour and Deposition
========================================================

The sediment scour model uses a number of equations which should be understood
before attempting to calibrate the model to a data set. Details of the
equations are given in the :ref:`SedimentScourModelTh` section of the
:doc:`theory` chapter as well as in Flow Science report 03-14 at |tn|. 

.. _sediment_properties:

Sediment properties
========================================================

The scour model is activated in the user interface by selecting
:menuselection:`Physics--> Sediment scour`  and specifying the number of
distinct sediment species to be modeled from the drop down menu in the window
that appears. The maximum number of sediment species that can be defined is 10.

  .. image:: images/model-reference/sediment-scour-and-deposition-sediment-definition.*
     :alt: Sediment Definition

* The :guilabel:`Maximum packing fraction` controls the maximum solid fraction
  when sediment is settled and packed within the domain. This value is assumed
  to be the same, regardless of the arrangement of sediment species. The default
  value is 0.64, which is the maximum packing fraction of spheres. For
  multidisperse sediments, this number can be higher. For monodisperse,
  irregular sediment particles, it can be lower.
* The :guilabel:`Richardson-Zaki coefficient multiplier` controls the effect of drag on the 
  settling sediment particles as they become concentrated. The default value is 1.0, 
  which means that the enhancement to the drag due to particle-particle interaction 
  is as defined by the Richardson-Zaki model. 
* Diffusion of suspended sediments is considered if the :guilabel:`Molecular diffusion coefficient`
  or the :guilabel:`Turbulent diffusion multiplier` is defined with a non-zero value. The
  :guilabel:`Turbulent diffusion multiplier` is the inverse Schmidt number that is typically
  about one.  
* The packed sediment bed roughness is defined by the d50 of the sediment material and the 
  :guilabel:`bed roughness / d50 ratio`. The d50 is calculated every time step and for every 
  mesh cell with packed sediment. The recommanded value for the ratio multiplier is 2.5.   
* For each sediment species, the :guilabel:`Name` can be optionally entered;
  this aids during post-\ processing to identify the sediment species. If a name
  is not provided, the default name is :guilabel:`Sediment sp. n`. The
  :guilabel:`Diameter` of each species is the mean particle diameter of the
  species, in units of length used in the simulation. The :guilabel:`Density` is
  the *microscopic* (grain) density of the sediment species, in the same units
  of density used elsewhere in the simulation. The sediment density must be specified
  by the user, since no default value is used.
* The :guilabel:`Critical Shields Number` is the dimensionless critical shear at
  which particle motion is first observed. There are a number of simplifications
  and approximations in describing sediment erosion as a function of the critical
  Shields parameter. Scour is a stochastic phenomenon, so using an empirical
  parameter is unavoidable. Use site-specific values for best results. If no
  Shields parameter is specified, |prod| will calculate the number from the Shields
  curve using the Soulsby-Whitehouse equation described in Flow Science Report 03-14 
  at |tn|. 
* The  :guilabel:`Critical Shields Number` can be modified cell-by-cell at 
  every time step to account for the bed slope effect. At a sloping bed interface, 
  the gravity applies a tangential component of force to make the packed bed more or 
  less stable depending on the flow direction. As a result, the critical shear stress 
  increases if the fluid flow goes up the slope and decreases if the flow goes down. 
  Check :menuselection:`Local Adjustment of Critical Shields Number --> For slope effect`
  to activate the slope effect adjustment.
* The :guilabel:`Angle of Repose` describes the maximum resting angle of the bed
  (typically between 30 and 40 degrees), and is used to modify the local
  critical Shields parameter for slope effect. Its default value is 32 degrees.  
* The :guilabel:`Entrainment Coefficient` controls the rate at which sediment
  erodes at a given shear stress higher than the critical shear stress. The
  entrainment coefficient can be used to scale scour rates or fit experimental
  data. The default value is 0.018 from data of Mastbergen and Von den Berg
  :cite:`Mastbergen-VandenBerg-2003`. A value of zero turns off the entrainment model
  completely.
* The :guilabel:`Bed Load Transport Rate equation` determines the method used 
  for calculating bed load transport. The default setting uses the :guilabel:`Nielsen equation`. 
  A description for each of the of the available bed load equations is provided in the theory section (see :ref:`SedimentScourModelTh`).
* The :guilabel:`Bed Load Coefficient` is used in the bed load transport rate 
  equation and controls the rate at which bed load transport
  occurs at a given shear stress higher than the critical shear stress. Users can choose
  Meyer-Peter and Mueller equation, Nielsen equation or Van Rign equation for 
  bed load transport rate calculation, and the
  default value of the :guilabel:`Bed Load Coefficient` is 8.0, 12.0  and 0.053, respectively. 
  A value of zero turns off the bed load transport model.
  The value of  :guilabel:`Bed Load Coefficient` is adjustable 
  for these following the original equation. For example, for Meyer-Peter and Mueller equation,  
  subsequent researchers have suggested values ranging from 5.0 for low transport to 13.0
  for very high sand transport, with 5.7 a typically-reported value for sand and
  gravel (\ :cite:`Ribberink-1998`\, :cite:`FernandezLuque-VanBeek-1976`\). 



.. _sediment_components:

Packed sediment components
========================================================

After specifying this and other physical models, 
the mesh and geometry of other components in the simulation, the initial arrangement of packed and
suspended sediment must be defined. To create a packed sediment region, create
a component like any other, but from the drop-down menu next to
:menuselection:`Model Setup --> Geometry --> Component --> Type`, select :guilabel:`Packed sediment`. 

Once the component has been defined as :guilabel:`Packed sediment`, go
to each subcomponent of this component and define the 
:menuselection:`Packed sediment properties --> Packed Sediment Fractions`.
Here provide the fractions of the various sediment species you defined in
:menuselection:`Physics --> Sediment scour`. They will automatically be
normalized to sum to 100%.

  .. image:: images/model-reference/packed-sediment-properties.*
     :alt: packed-sediment-properties

.. _sediment_ICs:

Initial sediment concentrations
========================================================

To define an initial suspended sediment region, go to 
:menuselection:`Model Setup --> Initial`. Here there is the :guilabel:`Global` branch which
allows you to specify a suspended sediment concentration for each species for
all of the fluid in the computational domain in the 
:guilabel:`Suspended sediment concentration` branch -- here you can define 
the global concentration
of suspended sediment. To define sediment in only defined regions, create
:guilabel:`Fluid regions` by clicking on the :guilabel:`F` button; here
there is also a branch entitled :guilabel:`Suspended sediment concentration`
from which you can define the suspended sediment concentration for that fluid
region. All concentrations are entered in mass/volume in the same units as
density used elsewhere in the simulation.

  .. image:: images/model-reference/ModelReference_InitialGlobalSediment_v12.*
     :alt: suspended-concentration-intial-condition
     :scale: 80

.. note:: The sediment concentration is a mass concentration, i.e. the concentration 
   defines the mass of the sediment species per unit volume of water/sediment mixture.


.. _sediment_BCs:

Sediment concentrations at boundary conditions and sources
=======================================================================

It is also important to provide boundary condition information of suspended
sediments at domain boundaries. Packed sediment does not flow, so details on
it are not needed at boundaries. From 
:menuselection:`Model Setup --> Boundaries --> Mesh block x --> Boundaries`, 
select the boundary side you
need to add suspended sediment. Only boundaries with incoming fluid are
relevant. From the boundary dialog box, select the :guilabel:`Sediment`
button: here enter the concentrations of the various sediment species in the
incoming fluid. Time-dependent tabular data can also be provided by selecting
the :guilabel:`Tabular` button.

For adding suspended sediment to :guilabel:`Mass-momentum sources`, create the
mass/momentum source as usual (see :ref:`MassMomentumMnG`). The
:guilabel:`Mass flow rate` is based on the density of clear water, or the
:guilabel:`Volume flow rate` of the mixture, including solids. To add
suspended sediment to this source, set the :guilabel:`Sediment concentration`
in the :menuselection:`Source-->Sediments` section of the dialog. This parameter is defined
as the ratio of the mass flow rate of solids in the mixture to the volumetric flow rate of mixture
including solids -- i.e., the total concentration in the sames units as
density elsewhere in the simulation. 

Suspended sediment can also be added at mass sources. Create a component 
and define it as a mass source (see :ref:`massSourcesMR`). The 
:guilabel:`Mass flow rate` must be based on
the clear water density, and the added sediment concentrations are set in 
the :guilabel:`Sediment concentration` field in the 
:menuselection:`Component Properties--> Mass source-->Source-->Sediments`
branch of the dialog.

.. note:: The sediment concentration is a mass concentration, i.e. the concentration 
   defines the mass of the sediment species per unit volume of water/sediment mixture.

.. _sediment_considerations:

Sediment modeling considerations
========================================================

Factors that affect the accuracy of sediment scour simulations and should
be accounted for are:

* **Density variations:**
  By default, the variable density model will be activated to allow the fluid
  density to be  calculated as a function of entrained suspended sediment. The
  user has the option to ignore  sediment effects on fluid density by
  selecting :guilabel:`Constant uniform density` in the
  :menuselection:`Physics--> Density evaluation` model.
* **Turbulence Modeling:** Sediment scour requires accurate estimates
  of the near-wall shear stresses, so a
  good turbulence model should be selected for turbulent flows. The 
  :guilabel:`Renormalized group (RNG) model` in 
  :menuselection:`Physics --> Viscosity and turbulence` with a user-specified value for the 
  :guilabel:`Maximum turbulent mixing length` is the recommended starting point 
  because the :guilabel:`Dynamically computed maximum turbulent mixing length` relies 
  on an algorithm developed for single-phase flow. The mesh should be
  suitably sized so that the near-bed velocity and shear stress calculations
  are correct. Details on this technique are given in the :ref:`wallEffectsMR` 
  section.
* **Limitations of Included Models and User Customization:** The governing equations 
  of the sediment scour model are empirical, and are known to be valid only for 
  the data set from which they were derived. There are numerous empirical models for
  critical Shields parameter, entrainment, bed load transport and grain settling velocity, 
  and a particular simulation may require a model that is different from
  the equations supplied with |prod|. All of the scour functions are available for
  customization in the supplied editable modules :file:`scour_critic.F90`, :file:`scour_lift.F90`,
  :file:`scour_bedload_rate.F90` and :file:`scour_uset.F90`. 

.. index::
   single: Model Reference; shallow water flows
   single: implicit options; shallow water flows

.. index:: shallow water flows

.. _shallowWaterFlowsMR:

========================================================
Shallow Water Model
========================================================

Description and Usage
============================
The shallow water model solves the two-dimensional, depth-averaged form of the governing equations for fluid flow. 
This approach is valid when vertical fluid accelerations are negligible. This assumption can typically be made when the 
horizontal extents of the flow are much larger than the vertical extents, such as the case of flow in rivers, 
oceans and estuaries. A detailed description of the model formulation is provided in the theory section of the user 
manual (see :ref:`ShallowWaterModelTh`) and in technical notes TN-48 and TN-58 found at |tn|. For cases in which the shallow water assumptions are valid, using this model can significantly improve run times due to the reduction in cell count. 
A powerful application of the the shallow water model in |prod| is the ability to implement a hybrid 2D/3D simulation. This 
approach allows the use of the shallow water model in regions where the assumptions are valid, and then link these 2D domains with a fully 3D mesh block in regions where the 
full 3D solution is required for an accurate simulation. 

The shallow water model can only be used in conjunction with the one-fluid, sharp interface flow model, and fluid depth must 
be aligned with gravity in the z-direction. Users can select between implicit and explicit numerical methods for shallow
water flow. The implicit method is the default and is the recommended method. It eliminates the restriction on the time step size imposed by surface waves and
thus shortens the computation time. Lastly, special consideration should be given for defining the shallow water roughness coefficient.

The shallow water model is activated in :menuselection:`Physics --> Shallow water --> Activate shallow water model`. Under :guilabel:`Flow type`, users can
define the flow to be :guilabel:`Inviscid`, :guilabel:`Laminar` or :guilabel:`Turbulent`. The selection of :guilabel:`Flow type` will affect how the bottom shear stress term 
is calculated, and is described in the equations :eq:`shallowWaterModel04` and :eq:`shallowWaterModel05` of the :ref:`ShallowWaterModelTh` theory section. 
Lastly, a special type of mesh block must also be defined in :menuselection:`Model Setup --> Mesh`.

  .. image:: images/model-reference/shallow-water-flows.*
     :alt: Shallow water

.. index:: shallow water shear stress method

.. _shallowWaterShearStressMR:

Shallow Water Shear Stress Method
========================================================
Laminar Flow
----------------------------
For laminar flow, the bottom shear stress is calculated using equation :eq:`shallowWaterModel09`. 
This method requires the user to enter a :guilabel:`Vertical viscosity
multiplier` as a correction factor for the bottom shear stress evaluation, and is defined in 
:menuselection:`Physics --> Shallow water`. It is
a necessary parameter because the actual velocity profile in the vertical
direction is usually nonlinear, which cannot be resolved in the shallow water
approximation. The :guilabel:`Vertical viscosity multiplier` is designed to
compensate for the lack of vertical velocity profile resolution. The default
value is 1.5 which corresponds to a quadratic velocity profile in a steady-state
shear flow. To use a different value of the :guilabel:`Vertical viscosity
multiplier`, simply define it in its input box.

Turbulent Flow
------------------------------------

For turbulent flow, the shallow water model in |prod| uses the quadratic 
law for calculation of the bottom stress as described equation :eq:`shallowWaterModel08` of the :ref:`ShallowWaterModelTh` theory section.

Choosing how to define the value of the drag coefficient, :math:`{C_D}`, is a critical step in the development 
of a turbulent shallow water model. In |prod|, the user has three options for defining the drag coefficient. 

* Define the value of :math:`{C_D}` as a direct input
* Calculate :math:`{C_D}` as a function of a surface roughness height, :math:`k_s`
* Calculate :math:`{C_D}` as a function of a Manning's :math:`n`

The most common approach is to use one of the latter two options to define :math:`{C_D}` as either a function of :math:`k_s` or Manning's :math:`n`. The advantage of these methods is that they account for the effects of flow depth. Values for :math:`k_s` and Manning's :math:`n` are also readily available in the literature. 

When using roughness height, the equation for :math:`{C_D}` is:

.. math::

   {C_D} = \left[ \frac{\kappa}{B+ln {\left( \frac{k_s}{30h} \right)}} \right] ^2

where:

* :math:`\kappa` is the Von Kármán constant, 0.40
* :math:`B` is 0.71
* :math:`h` is the fluid depth
* :math:`k_s` is the surface roughness height

The equation for :math:`{C_D}` using Manning's :math:`n` is:

  .. math:: 

   C_D=\frac{n^2 g}{d^{\frac{1}{3}}} 

It is seen that when Manning's :math:`n` is used, :math:`C_D` is inversely proportional to :math:`d^{\frac{1}{3}}`. To 
avoid unphysically high value of :math:`C_D` when water is too shallow, a cap is applied 
to :math:`C_D`, which can be defined in :menuselection:`Physics  --> Shallow water  --> 
Turbulent --> Maximum drag coefficient for bottom shear stress`. Its default value is 0.1. 

The default method used in |prod| is to define :math:`{C_D}` as a constant global value of 0.0026, which is a typical value in hydraulic and coastal engineering applications. This global default value can be redefined by the user in the :menuselection:`Physics --> Shallow water --> Turbulent` options. However, if there is actual physical variability of the surface roughness characteristics for the solid objects in the domain, a method to define a spatially varying :math:`C_D`, :math:`k_s` and/or Manning's :math:`n` is required. This can be accomplished 
in |prod| by assigning different values of of the roughness coefficients to individual components or sub-components. 

To define a component specific value of :math:`C_D`, :math:`k_s` and/or Manning's :math:`n`, go to :menuselection:`Geometry --> Component --> Surface Properties --> Shallow Water Shear Stress Method`, and select the desired method, and specify the value in the corresponding input box. Values are defined in input boxes of :guilabel:`Shallow Water Drag Coefficient` for :math:`C_D`; :guilabel:`Roughness height` :math:`k_s`; and :guilabel:`Manning's roughness coefficient` for Manning's :math:`n`.

  .. image:: images/model-reference/shallow-water-drag-method.*
     :alt: Shallow water drag method

These values can also be defined at the sub-component level. To define a sub-component specific value, 
go to :menuselection:`Geometry --> Component --> Subcomponent --> Surface Properties` and define inputs 
for :guilabel:`Roughness height` and/or :guilabel:`Manning's roughness coefficient`. By default, any 
value set at the sub-component level overrides values defined at the component level. 

Lastly, there is also an option to assign a spatially varying :math:`k_s` and/or Manning's :math:`n` with a 
raster file. This method is used when a detailed delineation of roughness zones is available as a raster 
output from a GIS software. Within the raster file, the roughness zones are coded with integer values, 
and then related to either a :math:`k_s` and/or Manning's :math:`n` value through a user defined legend 
file. This allows for easy modification of roughness values without being required to edit the raster 
directly. Procedures for applying the raster and legend files are provided in model setup 
section (see :ref:`surfaceroughnesscomptype` and :ref:`roughlegendfile`). When roughness values are 
defined from a raster file, they will override inputs set at the component and sub-component levels. 
For any grid cells in the raster defined as NODATA, the underlying component or sub-component roughness 
or Manning' :math:`n` values will be applied. It is noted that roughness height and Manning's roughness 
coefficient can be specified at the same time. They share the same raster file, but their code conversion files are different.

.. index:: shallow water mesh block

.. _shallowWaterMeshBlockMR:

Shallow Water Mesh Block
====================================================

Special mesh blocks must be defined for regions being modeled with shallow water. The mesh block must be defined so that there is a single cell in the z-direction. To ensure that the FAVOR method in |prod| accurately resolves the solid objects, the bottom elevation of the cell must be defined to intersect with all of the solid geometry objects. Additionally, the top elevation of the cell must be defined so that it is above the expected free surface elevation of the fluid. Note that if the cell height is too large it will adversely affect vector and contour plots. Lastly, the user must also check the box for :guilabel:`Shallow water mesh block`.

  .. image:: images/model-reference/shallow-water-flows-mesh.*
     :alt: Shallow water mesh


Combining Shallow Watter with Other Physical Models
=============================================================


.. index:: hybrid shallow water 3D flow

.. _ShallowWaterHybridMR:

Shallow Water / 3D Flow
------------------------------------------------------

The shallow water model can be combined with the fully 3D modeling
capabilities of |prod| to create a hybrid 2D/3D model. This hybrid model allows
for detailed modeling of 3D structures within a larger domain where shallow
water assumptions are valid such as a river, sea or estuary. The model uses
multi-blocking meshing, where the each mesh block needs to be designated as
either 2D or 3D by selecting the the :guilabel:`Shallow water mesh block` flag
in the :guilabel:`Mesh operations` widget. A valid hybrid model can have the
3D mesh block fully nested within the 2D mesh block, or can be set up with
linked blocks that share common boundaries (See :ref:`multiblockms`). When
setting up a hydrid model make sure to observe all best practices for multi-block
meshing and also for shallow water meshing. Additionally, when creating
a hybrid model, the minimum Z elevation of the shallow water mesh block must
be greater than the minimum Z elevation of the linked or nested 3D mesh block.

It is noted that Manning's roughness coefficient can only be used for shallow water turbulent flow. 
Surface roughness height, however, can be used for both shallow water and 3D turbulent flows. 
In shallow water mesh blocks, bottom shear stress coefficient can be user-defined or code-calculated 
using either roughness height or Manning's roughness coefficient. In 3D mesh blocks, only roughness height 
is used to calculate near-wall flow. Please refer to :doc:`model-reference` ->  :ref:`shallowWaterFlowsMR` 
for more details of Manning's roughness coefficient and surface roughness height specifications.  

.. seealso:: 
   * :doc:`model-reference` ->  :ref:`shallowWaterFlowsMR` 
   * :doc:`model-setup` ->  :ref:`multiblockms`
   * :doc:`model-setup` ->  :ref:`SWAT_MnG`

.. index:: shallow water geophysical flow

.. _ShallowWaterGeophysicalMR:

Shallow Water / Geophysical Flow
------------------------------------------------------

If the shallow water flow is also a geophysical flow (e.g., of the scale of an
estuary or bay), then the Coriolis force due to the Earth's rotation is
important. In this case, users need to activate the geophysical fluid flow
option in :menuselection:`Physics --> Non-inertial reference frame --> Motion
type --> Geophysical fluid flow` and define the :guilabel:`Latitude of the flow
region`.

.. seealso::
   * :ref:`NirfTh` notation
   * :ref:`NonInertialReferenceFrameTh` equations
   * :ref:`nonInertialReferenceFrameMotionMR`

.. index:: shallow water wind

.. _ShallowWaterWindMR:

Shallow Water / Wind
-------------------------------------------------

Wind shear on the water surface may need to be considered in shallow water flows. It
can be defined in :menuselection:`Physics --> Wind`. See the
:ref:`windShearStressMR` section for more information.


.. index:: shallow water porous media

.. _ShallowWaterPorousMR:

Shallow Water / Porous media
-------------------------------------------------------------------------------------------------

Porous media may be used in shallow water models to represent things that are
not well-characterized by surface roughness, like forests, hedges, etc.
However, if the porosity is less than one, all solids content of the media
will be packed down onto the bed, changing the bed elevation. Therefore the
recommended approach is to specify the 
:menuselection:`Permeability Dependent Saturated Drag` model and drag coefficients,
and then specify the porous component porosity as one (100% open). 
This drag model does not use porosity in its calculation of flow losses, so this approach will add drag due
to the porous media without changing the bed elevation. Details on porous
media physics are given in the :ref:`flowInPorousComponentsMR` section.


.. index::
   single: Model Reference; sludge settling

.. index:: sludge settling

.. _sludgeSettlingSectionMR:

========================================================
Sludge Settling
========================================================

The sludge settling model is activated in the user interface by selecting :menuselection:`Physics > Sludge settling`. Settling velocity of sludge is in the gravitational direction. It is a function of sludge mass concentration and decreases with increasing sludge concentration. It is calculated using either the Vesilind equation or a table-valued function defined by users. From the :menuselection:`Settling velocity input method`, select :menuselection:`Vesilind equation` or :menuselection:`Tabular`. If the former is selected, users need to specify :menuselection:`Vesilind maximum settling velocity` and :menuselection:`Vesilind parameter` that are used in the equation. Otherwise, users need to select :menuselection:`Tabular` and fill the data table, or use an external file to define the function by selecting :menuselection:`Tabular > Import Values`. In the external file, two columns of data need to be specified with the first and second ones representing sludge mass concentration and sludge settling velocity, respectively. 

 .. image:: images/model-reference/sludge_setup.*
     :alt: Sludge setup

It is also required that users define :menuselection:`Maximum settled sludge concentration` and :menuselection:`Net mass density of sludge solid`. In a settling tank, the maximum concentration is the sludge mass concentration in the fully settled region. At the maximum concentration, sludge stops settling and its concentration no longer increases, but its advection with fluid flow may continue.

Users may specify the :menuselection:`Dynamic viscosity` of sludge. In a sludge settling simulation, fluid is the water-sludge mixture, and its total viscosity is evaluated as the fraction-weighted average of water and sludge viscosities. Note sludge viscosity may not be important when sludge fraction in fluid is low. 

The :menuselection:`Molecular diffusion coefficient` and :menuselection:`turbulent diffusion coefficient multiplier` can also be specified for sludge. The total diffusion coefficient of sludge is determined as

.. math:: 

   D_s = \alpha {\nu}_T + D_m

where :math:`{\nu}_T` is the turbulent kinematic viscosity of fluid, :math:`D_m` is the molecular diffusion coefficient of sludge, and :math:`\alpha` is the turbulent diffusion coefficient multiplier for sludge. 

Initial conditions can be defined for sludge mass concentration with a global value or fluid-region specific values. At a boundary where fluid enters the domain (velocity, volume flow rate or pressure boundary), sludge concentration can be set as a constant value or a time-dependent variable with tabular data.

In postprocessing, sludge related output data can be found in restart, selected and history data. The restart and selected data include sludge mass concentration, sludge settling velocity, and sludge settling mass flux which is the product of sludge mass concentration and sludge settling velocity. To output sludge data in selected data, users must select :menuselection:`Model Setup > Output > Sludge mass concentration` when setting up the simulation. Sludge related history data is total :menuselection:`sludge mass`. 

 .. image:: images/model-reference/sludge_selected_data_output.*
     :alt: Sludge selected data output.


.. index::
   single: Model Reference; solidification

.. index:: solidification, heat transfer

.. _solidificationSectionMR:

========================================================
Solidification
========================================================

The solidification model can be used when heat transfer is activated (\
:menuselection:`Physics --> Heat Transfer --> Fluid internal energy
advection`) and fluid specific heat (\ :menuselection:`Fluids --> Properties for --> Fluid 1 --> Thermal Properties --> Specific heat`\ ) and conductivity (\
:menuselection:`Fluids --> Properties for --> Fluid 1 --> Thermal Properties --> Thermal Conductivity`\ ) are set. Only Fluid 1 can undergo phase transformations.

  .. image:: images/model-reference/solidification.*
     :alt: Solidification - Activate solidification

To activate the solidification model check :menuselection:`Physics -->
Solidification --> Activate Solidification`, and then specify the
:guilabel:`Liquidus temperature`, :guilabel:`Solidus temperature`, and
:guilabel:`Latent heat of fusion` in the :guilabel:`Fluids` widget under :menuselection:`Fluid 1 --> Solidification`. In the simplest model
(selection :guilabel:`Linearly with constant` from the drop-down menu next to
:guilabel:`Latent Heat Release Definition`) the latent heat is released
linearly as the material cools from the :guilabel:`Liquidus` to the
:guilabel:`Solidus` temperature. For a more detailed models of latent heat
release, including heats-of-transformation in the solid phase, use the
:guilabel:`Specific energy vs. temperature` or :guilabel:`Solid fraction vs.
temperature` options to define the release of the latent heat as a function of
temperature. See :ref:`HeatOfTransformationsTh` in the :doc:`theory` manual for more
details about this setup.

  .. image:: images/model-reference/ModelReference_FluidsSolidification_v12.*
     :alt: solidification-fluid-properties
     :scale: 80

Solidification implies a rigidity and resistance to flow. This rigidity is
modeled in two ways. For low solid fractions, i.e., below the point of
coherency :menuselection:`Fluids --> Fluid 1 --> Solidification --> 
Coherent Solid Fraction`, the viscosity is a
function of solid fraction. For solid fractions larger than the coherent solid
fraction, a Darcy type of drag force with a drag coefficient proportional to
a function of solid fraction is used. This drag is added to the momentum
equations as (\ :math:`b_x`,\ :math:`b_y`,\ :math:`b_z`) -- see
:ref:`MomentumEquationsTh`. The calculation of this drag is described in
:ref:`SolidifictionDragModelTh`. The drag coefficient contains the factor
:guilabel:`Coefficient of Solidification Drag` that users can adjust to modify
the amount of resistance to flow. The drag coefficient is multiplied by the
local phase-averaged velocity, which corresponds to the velocity reported in
|prod| output.

If the solid fraction exceeds the point of rigidity, the :guilabel:`Critical
Solid Fraction` (in :menuselection:`Fluids --> Fluid 1 --> Solidification`), the drag becomes infinite and there
can be no flow with respect to the computational grid (for an exception, see
:ref:`movingSolidPhaseMR`). 

.. note:: Use :menuselection:`General --> Finish condition --> Solidified fluid fraction` for the simulation to stop when all the fluid is completely solidified. :menuselection:`General --> Finish condition --> Finish fraction` sets the fraction solid value at which to stop the simulation.

.. seealso:: \  \ :ref:`macroSegregationMR` and :ref:`SolidifictionDragModelTh`.

.. index:: criterion, criterion functions

.. _criterionfunctionsMR:

Criterion Functions
========================================================

The criterion function below can be used to post process a number of
quantities. The coefficient, :math:`a`, and the exponents, :math:`b`,
:math:`c`,  :math:`d`, and  :math:`e`, can be changed to represent various
quantities.

.. math:: 
   :label: criterionfunctions

    a \cdot T^{b} \cdot G^{c} \cdot V_{s}^{d} \cdot t_{s}^{e}

where:

* :math:`T` is the cooling rate,
* :math:`G` is the temperature gradient,
* :math:`V_{s}` is the solidus velocity, and
* :math:`t_{s}` is the local solidification time - the time it takes for the metal to cool from the liquidus to the solidus temperatures.

For example, already available in |prod| as :guilabel:`Solidification Data`
are primary dendrite arm spacing where the :eq:`criterionfunctions` reduces to:

.. math:: 
   :label: pdas

   1.0 \cdot G^{-0.5} \cdot V_{s}^{-0.25}

The coefficient of 1.0 is a material or unit multiplier. The parameters are
the effective values averaged between solidus/Niyama and liquidus temperatures
with impingement effects considered.

Other existing quantities available for selection are:

* Niyama porosity criterion:
  :math:`1.0 \cdot T^{-0.5} \cdot G^{1.0}`
* feeding efficiency index:
  :math:`1.0 \cdot G^{1.0} \cdot t_{s}^{-1.0}`
* LCC porosity criterion:
  :math:`1.0 \cdot G^{1.0} \cdot V_{s}^{-1.0} \cdot t_{s}^{0.667}`
* primary dendrite arm spacing:
  :math:`1.0 \cdot G^{-0.5} \cdot V_{s}^{-0.25}`
* secondary dendrite arm spacing:
  :math:`1.0 \cdot G^{-0.417} \cdot V_{s}^{-0.417}`

Customized output can also be postprocessed in |prod|'s native postprocessor
as a 2-D result. The steps are as follows:

* Render a 2-D result of any of the above output quantities. This will open up 
  the :guilabel:`Display` tab
* Go back to the :guilabel:`Analyze` tab, select the :guilabel:`Custom` tab 
  and choose the flsinp.tmp file in the drop-down just below the tab
* Modify any of the coefficients circled in red in the image below. The
  coefficients represent :math:`a` through :math:`e` in order from left
  to right
* Choose :guilabel:`Render` and then the 2-D Output Type

  .. image:: images/model-reference/criterion_functions.*
     :alt: Solidification model

.. note:: 
   For the vast majority of casting processes, including sand casting, die
   casting, investment casting, continuous casting, ingot casting, etc., the
   solidification processes are not steady-state processes, which means the
   solidification velocity and/or the temperature gradient at the interface
   change continuously during the solidification. The solidification fronts may
   also come in contact with one another, and impingement occurs. In order to
   better predict the primary and secondary dendrite arm spacings of the
   castings, the non-steady-state solidification processes and the impingement
   effect have to be taken into account. Thus instead of using the above
   solidification parameters to compute the dendrite arm spacings, which are
   instantaneous values at the specified temperature, the effective values are
   used, which are averaged values between solidus and liquidus/Niyama
   temperatures, with impingement effect considered.

.. index::
   single: Model Reference; drag in the mushy zone

.. index:: drag in the mushy zone

.. _dragInTheMushyZoneMR:


Drag in the Mushy Zone
========================================================

The *mushy zone* in casting is a region where liquid and solid phases
coexist as a mixture. The local mixture viscosity is affected when the equiaxed
dendrites (structures consisting of crystals that grow radially inside an 
under-cooled melt) are free floating within the liquid. 

Once a fixed solid network is formed when the dendrite coherency is attained,
additional flow losses arise since the liquid phase now moves through a fixed 
porous dendiritic structure. Alternatvely, the liquid/solid mixture
after the coherency point can be treated as a highly viscous fluid, instead of
a flow through porous media. The viscous approach is useful when the solid phase
continues to move and deform as, for example, in the continuous twin-roll
casting process.

.. index::
   single: drag coefficients; defining

Solidification Drag Models in FLOW-3D
----------------------------------------------

To define the coefficient of solidified drag the user must first activate the
heat transfer and solidification models. These can be activated by from the
:menuselection:`Model Setup --> Physics` dock widget. A shrinkage model can also be 
activated in the solidification model window.

  .. image:: images/model-reference/solidification-model.*
     :alt: Solidification model

Once the :guilabel:`Solidification` model has been activated, the drag
formulation needs  to be specified.  In the lower left corner of the
:guilabel:`Solidification` dialog there is an option to choose between
:menuselection:`Porous media drag-based` and :menuselection:`Viscosity-based`
drag formulations.  

* The :menuselection:`Viscosity-based` formulation treats
  solidified fluid as a viscous fluid, with the viscosity of pure solid phase 
  specified below the entry for :guilabel:`Flow model for solidified metal` in the
  :guilabel:`Viscosity` field.  This approach is used  for simulations where a
  rigid-like drag model cannot be used (e.g., when the solidified metal is
  squeezed between rollers).  The viscosity varies linearly with solid fraction:
  
  * When the solid fraction is zero then the viscosity is that of the fluid #1
  * When the solid fraction is one then the viscosity is equal to the value specified 
    on the :guilabel:`Solidification` panel.
  
* The :menuselection:`Porous media drag-based`
  formulation uses the solid fraction to determine the state of solidification.
  When the solid fraction is at or exceeds the :guilabel:`Critical Solid Fraction`
  then the drag is infinite -- that is, the liquid/solid mixture behaves like a solid. When
  the solid fraction is below the :guilabel:`Coherent Solid Fraction` then the
  drag is zero. In between these two values the flow is in the mushy zone and
  the flow is treated as though it is in porous media. The model also
  automatically modifies the viscosity at the molten metal when the solid
  fraction is lower than the :guilabel:`Coherent Solid Fraction`. In this state,
  solid crystals raise the viscosity, yet do not yet bind together (i.e., are not
  coherent). Once the fluid reaches the :guilabel:`Coherent Solid Fraction` the
  drag equation is taken into account and the viscosity remains constant at the
  last value before coherency was reached. The critical and coherent solid fractions
  are defined by the user and can be found in papers and books.
  This formulation requires that the :guilabel:`Coefficient
  of Solidification Drag` be defined. This can be done at the
  :guilabel:`Solidification` window of the :guilabel:`Physics` widget 
  or in the :menuselection:`Model Setup --> Fluids` 
  widget by opening the :menuselection:`Fluid 1 --> Solidification --> Solidified` tab.

.. index::
   single: permeability; how to calculate

How to Calculate Permeability
----------------------------------

Darcy's law, given below, is a mathematical description of flow in porous
media for dendritic networks :cite:`Poirier-1987`.

.. math:: \mathbf{u} =  - \frac{K}{\mu} \nabla P
   :label: Darcys_law_permeability

where :math:`\mathbf{u}` is the velocity of the interdendric flow,
:math:`\nabla P` is the local pressure gradient, and 
:math:`K` is the specific permeability of the mushy zone.
This equation is only valid if the the flow is approximately steady, 
inertial effects can be ignored, the volume fraction of liquid is uniform and constant,
and there are negligible liquid-to-liquid interaction forces
There are several models that can be used to define the permeability, but |prod|
uses the Blake-Kozeny model, shown below. Other models can be added by
customizing the source code that comes with the software.

.. index:: Blake-Kozeny model

.. math:: \mathbf{u} =  -C_2 \left( \frac{\lambda_1^2 (1-f_s)^3}{\mu f_s^2} \right) \left( \nabla P - \rho \mathbf{g} \right)
   :label: Blake_Kozeny_Model

where: 

* :math:`{C_2}` is the tortuosity, typically equal to :math:`\frac{1}{180}`,
* :math:`f_s` is the solid fraction, and
* :math:`\lambda_1` is the characteristic dimension for flow.  In this application,
  the dendrite arm spacing can be used. 

If we apply Equation :eq:`Darcys_law_permeability` to Equation :eq:`Blake_Kozeny_Model` we
get the following equation for permeability :cite:`Poirier-1987`

.. math:: K = \lambda_1^2 \frac{(1-f_s)^3}{180f_s^2}
   :label: Permeability_solidification

Some typical values for the dendritic arm spacing are given below.

|

.. tabularcolumns:: |p{3.5cm}|p{6.0cm}|p{5.5cm}|

.. _TableRangeCoolingRatesSolidification:

.. list-table:: Range of Cooling Rates in Solidification Processes
   :widths: 20 60 20
   :header-rows: 1
   :class: longtable

   * - COOLING RATE, K/s
     - PRODUCTION PROCESSES
     - DENDRITE ARM SPACING, :math:`\mu m`

   * - :math:`10^{-4}` to :math:`10^{-2}`
     - large castings
     - 5000 to 200

   * - :math:`10^{-2}` to :math:`10^3`
     - small castings, continuous castings, die castings, strip castings, coarse powder atomization
     - 200 to 5

   * - :math:`10^3` to :math:`10^9`
     - fine powder atomization, melt spinning, spray deposition, electron beam or laser surface melting
     - 5 to 0.05

Range of cooling rates in solidification processes :cite:`Cohen-Flemings-1985`

.. index:: 
   single: solidification drag; defining the coefficient

How FLOW-3D Defines the Coefficient of Solidification Drag
-------------------------------------------------------------------

|prod| uses a porous media drag to model the solid to liquid phase change.
The drag is a function of solid fraction. There are two shrinkage models
available to the user; the rapid shrinkage model and the full fluid flow
model. In the simple shrinkage model, the fluid is assumed to be at rest. The full
fluid model takes into account the volume changes associated with the phase
change. Since the drag force is inversely proportionate to the permeability,
it can be expressed as follows:

.. math:: K = \frac{\mu}{\rho F_d} 
   :label: coef_solid_drag1

where :math:`{F_d}` is the drag coefficient used in |prod|. This drag coefficient is multiplied by
the local velocity and subtracted from the right side of the equation of
momentum equations (see :ref:`MomentumEquationsTh`\ ). 
Rearranging Eq. :eq:`coef_solid_drag1` and substituting in the permeability from Eq.
:eq:`Permeability_solidification` gives:

* The :guilabel:`Coefficient of Solidification Drag`: 
  :math:`\text{TSDRG}=\frac{180 \mu}{\lambda_1^2\rho }`, 
* The drag force: :math:`F_d = \mbox{TSDRG} \frac{ f_s^2}{(1-f_s)^3}`.

.. seealso:: \  :doc:`model-reference` ->  :ref:`solidificationSectionMR`


.. index::
   single: Model Reference; macro-segregation

.. index:: macro-segregation, alloy solidification

.. _macroSegregationMR:


Macro-Segregation during Alloy Solidification
========================================================

The segregation model is designed to model changes in binary alloy composition
due to transport of solute by convection and diffusion. It is accessed from
:menuselection:`Physics --> Solidification`:

  .. image:: images/model-reference/macro-segregation-during-alloy-solidification.*
     :alt: Solidification

Activate segregation by checking :guilabel:`Activate binary alloy segregation
model`. 

The phase diagram, which defines the concentrations of the components of the
binary alloy mixture at equilibrium at various temperatures, is assumed to
have straight solidus and liquidus lines. The phase diagram is constructed
based on the input data and is included in the preprocessor plot file
:file:`prpplt`. It is accessed from :menuselection:`Analyze --> Existing`.

Below shows the part of the fluid properties relevant to the :guilabel:`Macro-Segregation Model` (under :menuselection:`Fluids --> Fluid 1 -->
Solidification Model --> Binary alloy segragation`). The phase diagram is defined by the values of the
:guilabel:`Solidus` and :guilabel:`Liquidus Temperatures` at the
:guilabel:`Reference Solute Concentration`. In addition, the
:guilabel:`Partition coefficient`, under :guilabel:`Concentration Variables`,
needs to be defined. Alternatively, the :guilabel:`Pure Solvent Melting
Temperature` can be specified. If both the :guilabel:`Partition coefficient`
and :guilabel:`Pure Solvent Melting Temperature` are set, then the solvent
melting temperature is redefined from the phase diagram.

  .. image:: images/model-reference/ModelReference_FluidsBinaryAlloy_v12.*
     :alt: Macro segregation fluid properties
 
The :guilabel:`Eutectic Temperature` *or* the :guilabel:`Eutectic
Concentration` can be specified to define the eutectic reaction. Again, if
both of these variables are set, then the :guilabel:`Eutectic Concentration`
is redefined from the phase diagram.

The :guilabel:`Ratio of Solute Diffusion Coefficients` defines the ratio of
the diffusion coefficients of solute between the solid and liquid phases. The
solute molecular diffusion coefficient in liquid is specified by specifying
:guilabel:`Solute diffusion coefficient` in :menuselection:`Physics -->
Solidification`. :ref:`RMSEG <BinaryAlloySegregationParameters>` defines the
turbulent diffusion coefficient multiplier of the solute; this is set directly
in the input file.

  .. image:: images/model-reference/macro-segregation-during-alloy-solidification-density-evaluation.*
     :alt: Density evaluation

If density variation due to solute redistribution is important, then set
:menuselection:`Physics --> Density evaluation --> Density evaluated as a
function of other quantities...` and specify the :guilabel:`Solutal Expansion
Coefficient` under :menuselection:`Fluids --> Segregation model` as the solute
expansion coefficient to define metal density as a linear function of solute
concentration. In that case, :guilabel:`Reference Solute Concentration` will
be used as the reference concentration. In addition, :menuselection:`Fluids
--> Fluid 1 --> Density Properties --> Volumetric Thermal Expansion` can be
specified to account for thermal buoyancy effects within the liquid (see also
:ref:`buoyantFlowMR`).

The initial solute concentration can be set in :menuselection:`Model Setup -->
Initial --> Global --> Uniform alloy solute concentration`. A
non-uniform initial distribution can be set within initial fluid regions under
:guilabel:`Alloy solute concentration`. Additionally, the concentration can
vary via a quadratic function over space by editing the section using
quadratic functions as described in :ref:`InitialConditionsRegionValues`. At
pressure and velocity boundaries use 
:menuselection:`Model Setup --> Boundaries --> Boundary face --> Solute concentration` 
to set solute boundary conditions.

Liquid and solid phase compositions can be plotted by using data transformations
in the postprocessor.

Eutectic solidification can be visualized by plotting :envvar:`SLDEUT` which stores the
mass fraction of the eutectic in the metal.

If thermal gradients in the liquid phase are significant, use the higher-order
advection method for more accuracy by setting :menuselection:`Physics --> Heat
Transfer --> Second order monotonicity preserving`:

  .. image:: images/model-reference/macro-segregation-during-alloy-solidification-heat-transfer.*
     :alt: Heat Transfer

Flow losses in mushy zone are controlled by the :menuselection:`Fluids -->
Fluid 1 --> Solidification Model --> Solidified Fluid 1 Properties -->
Coefficient of Solidification Drag`, which is a function of the dendrite arm
spacing. Since the latter is not evaluated by the model, the
:guilabel:`Coefficient of Solidification Drag` must be set by the user.

.. note:: 
   * Unlike the standard solidification model, the value of the solidus
     temperature here can be negative, defined by the extrapolation of the
     solidus line past the eutectic point on the phase diagram.



.. index::
   single: Model Reference; microporosity formation

.. index:: microporosity formation

.. _microporosityFormationMR:


Microporosity Formation
========================================================

  .. image:: images/model-reference/microporosity-formation-solidification.*
     :alt: Solidification

The microporosity model can only be used when modeling solidification (see
:ref:`solidificationSectionMR`) and is activated in :menuselection:`Physics
--> Solidification --> Activate microporosity model`. The required input are
liquid and solidified fluid densities, defined in :menuselection:`Fluids -->
Fluid 1 --> Density` and :menuselection:`Fluids --> Fluid 1 --> Solidification
--> Solidified --> Density`, where the solidified fluid density is greater
than the liquid density. Also, the :guilabel:`Critical Solid Fraction` in
:menuselection:`Fluids --> Fluid 1 --> Solidification --> Solidified` must be
set to a value less than 1.0.

The value :guilabel:`Bulk modulus at critical solid fraction` can be defined
by :menuselection:`Fluids --> Fluid 1 --> Solidification --> Solidified -->
Bulk modulus at critical solid fraction`. It describes the compressibility of
the solidifying fluid at the large negative pressures developing in the mushy
zone due to shrinkage. The value :guilabel:`Critical pressure at which gas
pores can form` allows the model to couple to the initial pressure in the
fluid, defined in the :guilabel:`Initial` tab, taken from the restart data, or
using :guilabel:`Intensification pressure` (see below).

The :guilabel:`Intensification pressure` can be defined for high pressure
die casting simulations to account for the extra pressure created by the shot
sleeve plunger during solidification to delay the formation of porosity. The
larger the :guilabel:`Intensification pressure` the less porosity will form in
the casting during solidification.

The microporosity model does not require any specific setting other than the
activation of a solidification model. It can be used together with the full
system of flow equations, or in zero velocity field, i.e., in a purely thermal
problem.

The model produces an additional output quantity, entitled :guilabel:`micro-\
porosity; percent`, which is available for post-processing in spatial and history plots.

.. note:: A Flow Science technical note on modeling micro-porosity (TN66) can be found at |tn|.


.. index::
   single: Model Reference; moving solid phase

.. index:: moving solid phase

.. _movingSolidPhaseMR:


Moving Solid Phase
========================================================

====================  ======  =========================================================================
MAIN VARIABLES:       OBS:    :ref:`IFOB, UTOBS, VTOBS, WTOBS <LinearMotionforContinuousCasting>`
====================  ======  =========================================================================

The moving solid phase option allows users to model continuous casting. A
:guilabel:`Phantom` component is defined in the region where the solidified
moving fluid will be located. It is a **phantom** component because it covers
a specified domain, but only in definition. It does not actually block area or
volume, and therefore, has zero volume, and does not appear as a solid
component in any of the results. It is defined in the drop-down menu next to
:menuselection:`Model Setup --> Geometry --> Component --> Component Type`:

  .. image:: images/model-reference/moving-solid-phase-selection.*
     :alt: Moving solid phase selection

When a component is defined as :guilabel:`Phantom`, prescribed velocities
advect the solid phase (solidified fluid) according to the :guilabel:`Phantom
Velocites`; X Velocity, Y Velocy and Z Velocity and are set under :guilabel:`Component
Properties`. Liquid in this domain behaves as it otherwise would as part of the
flow solution. For solid fractions larger than the coherency solid fraction
defined by :menuselection:`Fluids --> Fluid 1 --> Solidification Properties
--> Solidified Fluid 1 Properties --> Coherent Solid Fraction`, a Darcy type
of drag is used to drive the fluid toward the phantom component velocity. When
the solid fraction exceeds the point of rigidity specified in
:menuselection:`Fluids --> Fluid 1 --> Solidification Properties -->
Solidified Fluid 1 Properties --> Critical Solid Fraction`, it will move with
the velocity of the phantom component.

.. note:: 
   
   * This phantom component will not appear in component plots, but can be seen
     by plotting the quantity :guilabel:`Component number`.
   * The phantom component must be flat since a uniform velocity is applied across
     the entire domain of the component.


.. index::
   single: Model Reference; solidification shrinkage

.. index:: solidification shrinkage

.. _solidificationShrinkageMR:


Solidification Shrinkage
========================================================

Volumetric shrinkage occurs when a material solidifies and the density of the
solidified material (i.e., \ :menuselection:`Fluids --> Fluid 1 -->
Solidification --> Solidified --> Density`) is greater than the density of the
liquid (i.e., \ :menuselection:`Fluids --> Fluid 1 --> Density`). The
shrinkage model, therefore, requires the :guilabel:`Solidification` model to
be activated and both solid and liquid phase densities to be defined.
Shrinkage can be modeled only for one-fluid, sharp interface problems.

There are two solidification shrinkage models that can be used. Selecting the
:guilabel:`Shrinkage model with flow effects` button solves the full fluid and
heat flow equations (see :ref:`SolidificationShrinkagePorosityModelsTh` in the
Theory manual). However, this shrinkage model may be CPU intensive, especially
if long solidification times are considered. As an alternative, there is the
simplified model, entitled :guilabel:`Shrinkage model` in the User Interface:

  .. image:: images/model-reference/solidification-shrinkage.*
     :alt: Activate simplified shrinkage model 

This model is based on the solution of the heat transfer equation only and
runs quickly, especially when used in conjunction with the implicit heat
transfer model (\ :menuselection:`Numerics --> Other explicit/implicit solver
options --> Heat transfer --> Implicit` -- see
:ref:`ComputingTemperaturesMR`). Internal cavities open wherever there is no
feeding path to a liquid volume.

Feeding in :guilabel:`Shrinkage model with flow effects` model is defined by
computing the drag coefficient for flow in mushy regions. The drag function at
every location in the mesh is computed as a function of the local solid
fraction with a constant multiplier :menuselection:`Fluids --> Solidification
--> Solidified --> Solidification drag coefficient` (\ see
:ref:`SolidifictionDragModelTh`). The reciprocal value of the drag function
can be visualized in spatial plots: the variable name for plotting this is
'normalized drag coefficient'.

While partial feeding due to large flow losses in the mushy region can occur
in the :guilabel:`Shrinkage model with flow effects`, the simplified
:guilabel:`Shrinkage model` can have either complete feeding or no feeding at
all. The latter occurs when the local solid fraction along the feeding path
exceeds the critical value defined by :menuselection:`Fluids --> Fluid 1 -->
Solidification --> Solidified --> Critical Solid Fraction` (default is 0.67).
In addition, until the solid fraction everywhere in the metal in a liquid
pocket has reached the :guilabel:`Coherent Solid Fraction`, feeding in the
simplified model occurs from the top of the pocket. After that, feeding occurs
from the hottest spot in the pocket. However, if :guilabel:`Interdendritic
feeding only` is selected, feeding always occurs from the hottest spot in the
pocket.

The value :guilabel:`Bulk modulus of liquid phase` can be defined by
:menuselection:`Fluids --> Fluid 1 --> Solidification --> Solidified --> Bulk
modulus of liquid phase`. It describes the compressibility of the fluid at the
large negative pressures developing due to shrinkage. The value
:guilabel:`Critical pressure at which gas pores can form` allows the model to
couple to the initial pressure in the fluid, defined in the
:guilabel:`Initial` tab, taken from the restart data, or using
:guilabel:`Intensification pressure`. The compressibility option can be used
only in conjuction with the simple shrinkage model.

The :guilabel:`Shrinkage adjustment` coefficient is used to adjust the
shrinkage volume during solidification. The coefficient will avoid changing
the density properties of the material and will account for the various
factors affecting the volume change of the metal: compressibility,
intensification pressure, linear shrinkage of the solid, volume eaten by the
micro-pores. It applies to both Shrinkage and Microporosity models. It can be
any positive number and 0. For the default value of 1.0 the shrinkage volume
exactly corresponds to the change in fluid density; for :guilabel:`Shrinkage
adjustment` <1, the volume change is smaller, and for :guilabel:`Shrinkage
adjustment` >1 the volume change is larger. For :guilabel:`Shrinkage
adjustment` =0, no volume change takes place, but the shrinkage and porosity
models are not deactivated.

Use :menuselection:`Global --> Finish Options --> Additional finish conditions --> Solidified
fluid fraction` for the simulation to stop when all the fluid is completely
frozen. The parameter :guilabel:`Finish fraction` may be used to stop the
simulation when the fluid is a specified fraction solidified.

  .. image:: images/model-reference/solidification-shrinkage-finish-condition.*
     :alt: Solid fraction finish condition 

.. note:: 

   Gravity is required in the simplified :guilabel:`Shrinkage model` to
   determine the feeding direction, and should only be directed along one of
   the coordinate axes. If more than one gravity component is non-zero, then
   the largest one is used to determine the direction of feeding.

.. seealso:: \  \ :ref:`solidificationSectionMR` and :ref:`SolidifictionDragModelTh`.


.. index::
   single: Model Reference; thermal modulus

.. index:: thermal modulus

.. _thermalModulusMR:


Thermal Modulus
========================================================

Risers are commonly used to prevent cavities due to shrinkage during metal
solidification. In order for risers to be effective, they have to be placed at
the right locations, with the right size so that they contain enough metal to
compensate the shrinkage without wasting. Modulus method is one of the most
popular methods for conventional riser design, especially for casting
materials of aluminum alloys and steel.

For a given casting part, its modulus is defined by

.. math::

   Mod = \frac{V}{A}

where: 

* :math:`V` is the volume of the casting part, and
* :math:`A` is the surface area of the casting part.

Based on Chvorino's Rule, for a simple casting, the relationship between the
solidification time and its modulus can be written as:

.. math::

   t = B \left( \frac{V}{A} \right) ^n = B \left( Mod \right) ^n

where: 

* :math:`t` is the solidification time,
* :math:`n` is a constant (usually 2), and
* :math:`B` is the mold constant. It can be calculated using the following formula:

.. math::

   B = \left[ \frac{\rho_m}{T_m - T_0} \right] ^2 \left[ \frac{\pi}{4k\rho c} \right] \left[L + c_m \left(T_{pour} - T_m \right) \right] ^2

where: 

* :math:`\rho_m` is the density of the metal,
* :math:`T_m` is the melting or freezing temperature of the metal,
* :math:`T_0` is the initial temperature of the mold,
* :math:`k` is the thermal conductivity of the mold,
* :math:`\rho` is the density of the mold,
* :math:`c` is the specific heat of the mold,
* :math:`L` is the latent heat of fusion of the metal,
* :math:`c_m` is the specific heat of the metal, and
* :math:`T_{pour}` is the metal pouring temperature.

When designing a casting process, risers are usually chosen in such a way that
the solidification times of the risers are longer than those of the casting
parts for proper feeding. Based on Chvorino's rule, solidification times are
directly proportional to the modulus of the castings. When comparing
solidification times, moduli can be directly compared. Since moduli are only
geometric quantities, comparison of the moduli makes design problems much
simpler. Casting engineers can design a riser with a larger modulus to ensure
proper feeding of the part without considering the type of casting process to
be used.

The geometric modulus of a casting is easy to compute for regular shapes.
However, the modulus calculation becomes difficult if the shape of the casting
becomes irregular, which involves tedious approximations of casting geometry
to regular shapes. Furthermore, the geometric modulus approach relies
strictly upon the geometry of the casting. Real castings employ chills and
insulators to control the progression of the solidification. These features
are ignored in the geometric modulus approach. To simplify the modulus
calculation, and to account for thermal effects associated with chills,
insulation, and other mold variations, an innovative approach termed thermal
modulus is often used for riser design.

For the thermal modulus approach, first a solidification simulation of the
casting is run. Once the simulation is complete, the equivalent modulus
throughout the casting can be computed from solidification time based on
Chvorino's rule. The equivalent modulus computed using this approach is called
thermal modulus. It can be used the same way as geometric modulus to guide the
riser design.

To compute and output the thermal modulus,

1. the solidification model has to be turned on (IFSLD=1);

#. section &CASTVAR has to be present in PREPIN. If the PREPIN is created by
   |f3dc| GUI, &CASTVAR should be added automatically. Or you can import the
   existing PREPIN to the |f3dc| GUI, and &CASTVAR section should be added by the
   GUI.

#. Geometry interpretation "mold" has to be present in &CASTVAR section.

The solver will check all the conditions, and compute and output thermal
modulus automatically. The output is in the Solidification catalog.

If Conditions 1&2 are satisfied, but the solver still could not find enough
material properties to compute the thermal modulus, a message will be written
to PRPOUT and PRPERR files to remind the user.

.. note::

   For a restart simulation, the calculation of mold modulus depends on the
   thermal modulus conditions in the source FLSGRF. If in the source FLSGRF,
   thermal modulus conditions are met, the thermal modulus will be computed
   for the restart simulation, using the same mold constant :math:`B` from
   source FLSGRF.
   
.. note:: It is highly recommended to set up the simulation through |f3dc| so
          that all required parameters are written to PREPIN properly.


.. index::
   single: Model Reference; squeeze pins

.. index:: squeeze pins, solidification shrinkage, casting

.. _squeezePinsMR:

========================================================
Squeeze Pins
========================================================

.. index::
   single: squeeze pins; description and usage

Description and Usage
==================================

The squeeze pin model is designed to include the effect of squeeze pins that
may be placed inside a die in a high-pressure or permanent mold casting. It is
activated at a certain time during metal solidification in the cavity. The
purpose of the pins is to reduce or eliminate porosity in the hard-to-feed
areas of the casting by pushing into the solidifying metal. The back end of
each pin is connected to a hydraulic system that applies a constant force upon
activation.

The pin model is based on the prescribed-motion GMO model, and works *only* with the
simple shrinkage model, therefore, no dynamics based on forces is included in
the model. Once activated, a pin senses the amount of shrinkage in the
adjacent metal and moves in to exactly compensate that volume. A pin moves
along a straight line of action; the maximum travel distance can be
defined for a pin beyond which it cannot move, reflecting a specific die casting
machine configuration. A force can also be defined for a
pin that is translated into metal pressure. That pressure could then be used
together with the :ref:`TseSolidifiedFluidRegion` or :ref:`microporosityFormationMR`
models. 

A pin stops if too much solidified metal forms on its surface. The critical amount 
of solidified metal beyond which the pin cannot move is controlled by an input 
parameter :envvar:`SQP_SOLID(n)`, where :envvar:`n` is the squeeze pin component number. 
This variable defines the fraction of the pin's work surface covered by solidified metal,
above which the pin can no longer move. The default value is 0.5. This input parameter is 
currently not accessible through the GUI, but can be modified by directly editing 
the :file:`prepin.*` file. 

If it is desired for the pin to move independently of the amount of solidified metal at its
surface, then set :envvar:`SQP_SOLID(n)` to 1.0. Making the pin an adiabatic component, or 
otherwise reducing heat losses to it, will also delay the freezing of the metal at its surface.

Once a pin stops because of excessive solidification at its surface, it does not resume
motion even if metal remelts.

Multiple individually-controlled squeeze pins could be used.

.. index::
   single: squeeze pins; model setup

Model Setup
==================================

The only requirement for the squeeze pins model is the activation of the
simple shrinkage model.

Any solid component can be defined as a squeeze pin, including GMO components such as
the shot sleeve plunger. A component may consist of a single
subcomponent or multiple subcomponents.  All subcomponents will move along the
line of action defined for the squeeze pin component.

A squeeze pin component could be placed on top of the die component, or into a
previously created hole in the latter. For a squeeze pin to work properly, its 
working surface must be in contact with the metal at all times. This is especially
important when placing a pin on top of the die component.

  .. image:: images/model-reference/squeeze-pin-placement.*
     :alt: Squeeze Pin Placement

To activate the squeeze pin, check :menuselection:`Squeeze pin activation
flag` on the :menuselection:`Model Setup --> Geometry --> Component --> Squeeze Pin Properties` panel.

  .. image:: images/model-reference/squeeze-pin-activation.*
     :alt: Squeeze Pin Activation

The squeeze pin direction of motion (:guilabel:`From` and :guilabel:`To`
points) have to be defined.  The :guilabel:`From` and :guilabel:`To` points
can be anywhere on the line of action. For axis-aligned squeeze pins, defining
the motion is simple but for generally oriented pins, the motion vector can be
determined manually by probing three points on the face of the squeeze pin and
computing a cross product.

For the squeeze pin :guilabel:`Activation`, there are four options:

  .. image:: images/model-reference/squeeze-pin-activation-options.*
     :alt: Squeeze Pin Activation Options

1. **Not Activated**: This is the default option, which means the squeeze pin is OFF.
#. **Automatically activate**: The pin will be activated if it is adjacent to a liquid region and the liquid region is not connected to another pin via a contiguous liquid region. This option s useful at the design stage when the pin exact activation time is not known.
#. **Time activated**: The pin will begin to move at a specified time. If this option is selected, the activation :guilabel:`Time` has to be provided.
#. **Active simulation control**: The pin will be activated by active simulation control events. This option is also very useful at the design stage. If this option is selected, the :guilabel:`Events` button will be enabled. Click on the :guilabel:`Events` button, an :guilabel:`Active Simulation Events` window will pop up, on which the squeeze pin activation conditions can be defined. Note that for :guilabel:`Probe Variable Name` for each condition, only :menuselection:`temperature` and :menuselection:`solid fraction` are available. Please refer to :ref:`activeSimulationControlMR` for more information. 

  .. image:: images/model-reference/squeeze-pin-active-simulation-control.*
     :alt: Squeeze Pin Active Simulation Control

The :guilabel:`Force` applied to the squeeze pin represents the force applied
to the squeeze pin component by the hydraulic system. The force is translated
into metal pressure, and the default is 0.0. The specification of a force only
has meaning when the TSE or the microporosity model is active.

The :guilabel:`Distance` represents the maximum distance the squeeze pin can
travel. If left blank, the default distance (unlimited) is used.

A component can be defined as a plunger and a pin at the same time, in which case 
the component is interpreted as a shot sleeve plunger. In that case the pin parameters 
are automatically derived from the plunger motion. The direction of motion is defined 
by the plunger's velocity, :guilabel:`Distance` is set to (unlimited) and 
:guilabel:`Force` is set using the intensification pressure :envvar:`PRESS`. 
This behavior is especially useful during restarts when transitioning from filling to 
solidification.

.. index::
   single: squeeze pins; output

Output
==================================

The time of the pin's activation is written to the screen, :file:`HD3MSG`,
:file:`HD3OUT`, and :file:`REPORT` files, e.g.,

  .. image:: images/model-reference/squeeze-pin-activation-message.*
     :alt: Squeeze Pin Activation Message

The movement of the squeeze pins is displayed in 2D and 3D plots in the same fashion 
as that of GMO components. In addition, the distance travelled and volume displaced 
by each squeeze pin is written to the :guilabel:`General history` data catalog and
can be displayed as a plot vs. time.

.. index::
   single: squeeze pins; limitations

Limitations
==================================

The squeeze pin model only works with the simple shrinkage model.

No dynamics are included based on the forces from the hydraulic system at
its one end and metal pressure/stresses on the other.

The interaction with the adjacent solidified metal is approximate and is
its biggest limitation. It is recommended setting the heat transfer to metal
for each pin component to 0.0 to minimize the effect of this limitation. The
critical amount of solidified metal that makes the pin stop can also be
modified by directly editing the parameter :envvar:`SQP_SOLID` in the
:file:`prepin.*` file.

.. seealso:: \  :ref:`solidificationShrinkageMR`.


.. index::
   single: Model Reference; surface tension

.. index:: surface tension

.. _surfaceTensionMR:

========================================================
Surface Tension
========================================================

Surface tension is a force that acts in the plane tangent to any sharp
interface, between a gas and liquid, or between two immiscible liquids. The
force occurs due to differences in the inter-molecular forces between the two
materials. Surface tension can be modeled in |prod| in one or two fluid flows,
but always with the :guilabel:`Free surface or sharp interface` option activated at the :guilabel:`Physics` widget.

  .. image:: images/model-reference/ModelReference_ModelReferenceSharpInterface_v12.*
     :alt: surface-tension-sharp-interface

The model is activated from :menuselection:`Physics --> Surface tension`, and
checking :guilabel:`Activate surface tension model`. The surface tension
coefficient can be set in this window (\ :guilabel:`Surface tension
coefficient, SIGMA`), or in the :guilabel:`Fluids` widget under :menuselection:`Interface -->
Surface Tension`. The global
:guilabel:`Contact angle`, defined here, controls the wetting behavior where
the interface meets solid wall boundaries and solid components. The contact
angle variables take values between 0.0 (complete wetting) to 180 degrees
(completely nonwetting). In addition, a separate contact angle for each
component can be specified in :menuselection:`Model Setup --> Geometry -->
Component properties --> Surface properties --> Component Contact Angle`,
which otherwise defaults to the global :guilabel:`Contact angle`.

  .. image:: images/model-reference/surface-tension-activate-surface-tension-model.*
     :alt: Activate surface tension model

The default setting is a contact angle of 90 degrees. If surface tension is
activated, wall adhesion is also activated; it is not possible to turn off
wall adhesion at certain components. All fluids exhibit adhesion behavior at
solid surfaces, and it is necessary to specify a contact angle representing that
behavior, whether the behavior is wetting or non-wetting.

  .. image:: images/model-reference/ModelReference_FluidsInterface_v12.*
     :alt: Surface Tension Coefficient

The surface tension coefficient can also be a function of temperature. For a
simple linear relationship between temperature and surface tension, provide a
value for the :guilabel:`Temperature Dependence` (\ :guilabel:`Temperature
sensitivity` in :menuselection:`Fluids`) according to

.. math::

   \sigma = \sigma_0 - \frac{d \sigma}{d T} \left(T - T^* \right),

where: 

* :math:`\sigma` is the computed surface tension coefficient,
* :math:`\sigma_0` is the user-defined value :guilabel:`Surface tension coefficient`, 
* :math:`\frac{d \sigma}{d T}` is the :guilabel:`Temperature Dependence`, 
* :math:`T` is the local temperature, and 
* :math:`T^*` is the user-defined :guilabel:`Reference Temperature` (set in :menuselection:`Fluids --> Properties`). 

These values are entered on either the :menuselection:`Physics
--> Surface tension` dialog box or the :menuselection:`Fluids --> Interface --> Surface
Tension` section. To use the temperature-dependent model it is necessary to
activate heat transfer in the fluid (\ :menuselection:`Physics --> Heat
transfer --> Fluid internal energy advection`).

For cases where the surface tension is not a linear function of temperature,
tabular data relating surface tension and temperature can be entered by
selecting the :guilabel:`Tabular` button next to :guilabel:`Surface tension
coefficient` in :menuselection:`Fluids --> Interface  --> Surface Tension` section.

In the event that it is desired to maintain the shape of droplet on a wetted area (e.g. when using the :ref:`vaporizationResidueMR` model), 
the contact line pinning option is available as a special surface boundary condition that 
works in conjuction with the :guilabel:`Surface tension` model. This surface boundary condition 
is used to pin the free surface of a droplet onto the surface of the solid and can be activated in 
:menuselection:`Geometry --> Component Properties --> Surface Properties`. Note that 
the value of the :guilabel:`Contact angle` significantly affects the behavior of the pinned free surface. 

  .. image:: images/model-reference/ModelReference_Pin-contact-line_v12.*
     :alt: Surface boundary condition specification for pinning the contact line


In flows with substantial free-surface distortion and breakup, small droplets
of fluid may be generated due to occasional numerical noise in surface tension
pressures. These droplets may cause undesirable variations in surface pressure
distribution due to their small surface curvature. Such droplets can be
removed to reduce these numerical inaccuracies. This option is controlled by
entering a value for the :guilabel:`Fluid fraction cleanup` in
:menuselection:`Numerics --> Volume-of-fluid advection --> Advanced options`:

  .. image:: images/model-reference/surface-tension-fluid-fraction-cleanup.*
     :alt: surface-tension-fluid-fraction-cleanup

A positive value for this parameter activates the fluid fraction cleanup
option. If the fluid fraction values in a cell and its neighbors are less than
this value, then fluid will be removed completely from that cell.

The removed volume is recorded as the cumulative volume error and plotted at
the end of the simulation as a function of time; this shows if the
:guilabel:`Fluid fraction cleanup` option is leading to any significant change
in fluid volume. The default value of :guilabel:`Fluid fraction cleanup` for
**two-fluid** surface tension problems is 0.05. For all other simulation types
it defaults to zero.

.. note:: 

   The surface tension model is more sensitive to mesh irregularities than other
   models in the code because it depends on curvatures, i.e., second
   derivatives. It is recommended to use control volumes as close to cubes in
   shape (squares in 2-D) as possible.


.. index::
   single: Model Reference; tabular data

.. index:: tabular data

.. _tabulardataMR:

========================================================
Tabular Data
========================================================

.. index::
   single: Model Reference; temperature-dependent properties

.. index:: temperature-dependent properties

.. _temperatureDependentPropertiesMR:

Temperature Dependent Properties
========================================================

Most of the fluid and solid properties can be defined as a function of
temperature. The data is passed to the solver through a table. These tables
can be entered anywhere there is a :guilabel:`Tabular` button for the
property. The tables can be:

* Entered manually.
* Imported from comma-separated-value (:file:`csv`) files to the 
  :file:`prepin.*`  file.  The :file:`csv` file can be delimited
  with spaces, commas, tabs, or semicolons.
* Read directly from an external data file in :file:`csv` format. 
  The :file:`csv` file can be delimited with spaces, commas, tabs, or semicolons.

These properties can also be loaded into
fluids or components from the :guilabel:`Fluids Database` or :guilabel:`Solids
Database` under the :guilabel:`Materials` menu.

In case of import from :file:`csv` files or load from external files, the file
can have a comments section at the *top* of the file before the start of the
data. The comments section is identified using ``/*`` at the beginning and ``*/`` at
the end.  The comment lines can also be identified with a ``#`` symbol as the first
character of the line. For example, the header for the data may start with a ``#`` symbol like
in the figure below.  Note that the beginning and the end of the comment section must be on different lines.

  .. image:: images/model-reference/external_file.*
     :alt: Temperature dependent properties: external file

In order to use the external file without copying the data into the
:file:`prepin.*` file, simply enter the filename and the corresponding column
number into the relevant namelist. For example, in order to read the fluid
density from the file shown above add the following to the namelist :envvar:`PROPS` ::

    IRHOF=1,
    FRHOF='my_data_file.dat',
    IRHOFC=2,

The first flag indicates that fluid density is going to be a function of
temperature, the second variable indicates the name of the external file where
this data can be found. Since the path is not specified, the solver expects
the file to be in the same folder as the :file:`prepin.*`. And finally, the last
variable indicates that the second column in the :file:`my_data_file.dat` is
density. It is assumed that the first column is always temperature.

For the list of temperature dependent properties and their variable names see
the input variable summary of :ref:`TabularPropertyInput` for fluids and
:ref:`TabularPropertyInputIVS` for solids.

.. note:: 
   * The external data file is used if a valid column number and filename is provided in the 
     :file:`prepin.*` file and there is tabular data available in the :file:`prepin.*` file 
     for the same variable.
   * The user-defined tabular data is converted by the preprocessor into internal data structures 
     that are optimized for use by the solver. The conversion involves remapping of the input tables 
     onto new tables with equal spacing. The first and last points in the internal tables for each 
     temperature-dependent quantity are taken from the respective input tables, while the number of 
     points in between is fixed at 10000 for fluid quantities and at 100 for component properties. 
     Linear interpolation is used during the conversion.
   * This approach is typically adequate for smoothly varying data. However, in cases where the data 
     varies significantly over a range of temperature that is comparable to the spacing of the internal 
     tables, the conversion may introduce significant errors. A way around it is to reduce the temperature
     range in the input tables as much as possible, thus decreasing the spacing in the internal tables
     to improve the resolution.

.. index::
   single: Model Reference; time-dependent properties

.. index:: time-dependent properties

.. _timeDependentPropertiesMR:

Time Dependent Properties
========================================================

Most of the boundary conditions and solid, cooling channel, and particle  properties can be defined as a function of
time. The data is passed to the solver through a table. These tables
can be entered anywhere there is a :guilabel:`Tabular` button for the
property. The tables can be:

* Entered manually.
* Imported from comma-separated-value (:file:`csv`) files to the 
  :file:`prepin.*`  file.  The :file:`csv` file can be delimited
  with spaces, commas, tabs, or semicolons.
* Read directly from an external data file in :file:`csv` format. 
  The :file:`csv` file can be delimited with spaces, commas, tabs, or semicolons.

In case of import from :file:`csv` files or load from external files, the file
can have a comments section at the *top* of the file before the start of the
data. The comments section is identified using ``/*`` at the beginning and ``*/`` at
the end. The comment lines can also be identified with a ``#`` symbol as the first
character of the line. For example, the header for the data may start with a ``#`` symbol like
in the figure below.  Note that the beginning and the end of the comment section must be on different lines.

  .. image:: images/model-reference/external_file_time.*
     :alt: Time dependent properties: external file

In order to use the external file without copying the data into the
:file:`prepin.*` file, simply enter the filename and the corresponding column
number into the relevant namelist. For example, in order to read the fluid height
at the left boundary from the file shown above add the following to the namelist :envvar:`BCDATA` ::

    FFLHTBCT(1)='my_data_file.dat',
    IFLHTBCTC(1)=2,

The first variable indicates the name of the external file where
this data can be found. Since the path is not specified, the solver expects
the file to be in the same folder as the :file:`prepin.*`. And the second variable indicates that the second column in the :file:`my_data_file.dat` is
fluid height (index 1 corresponds to the left boundary). It is assumed that the first column is always time.
For the list of time dependent properties and their variable names see
the input variable summary.

.. note:: 
   The external data file is used if a valid column number and filename is provided in the :file:`prepin.*` file and there
   is tabular data available in the :file:`prepin.*` file for the same variable.

.. index::
   single: Model Reference; thermal die cycling

.. index:: thermal die cycling, casting

.. _thermalDieCyclingMR:

========================================================
Thermal Die Cycling
========================================================

Thermal die cycling simulations are used for obtaining the die temperature
after running a number of parts and a quasi-steady state condition is
achieved. This type of simulation helps determine if there is sufficient
cooling to extend the life of the die, and ensure no defects will occur in the
final cast part.

.. _tdc_prereq:

Prerequisites
=================== 

Before a thermal die cycling simulation can be set up, the user must first
activate \ :menuselection:`Fluid internal energy advection` and \
:menuselection:`Fluid to solid heat transfer` on \ :menuselection:`Physics -->
Heat transfer` panel.

  .. image:: images/model-reference/tdc-heat-transfer.*
     :alt: Thermal Die Cycling Model Prerequisite

.. _tdc_steps:

Defining the stages in the die cycle 
======================================

Thermal die cycling can then be activated by specifying the total number of
thermal cycles, (\ :menuselection:`Physics --> Thermal die cycling --> Total
number of cycles`). There is no limit on how many cycles can be modeled in one
simulation. Each cycle can then be divided into up to 100 segments. Each
segment represents a special stage in the die casting process, such as metal
cooling, open/ejection, spray cooling, die cleaning, etc. Each segment is
characterized by  a time interval (\ :menuselection:`Physics --> Thermal die
cycling --> Duration of each segment`), which will be the same within each
cycle, a heat transfer coefficient between the die and the ambient medium
(except for the first segment) (\ :menuselection:`Physics --> Thermal die
cycling --> Heat transfer coefficient at the die cavity surface`), and a
temperature on the die cavity surface (\ :menuselection:`Physics --> Thermal
die cycling --> Temperature in the die cavity`). The sum of all segment time
intervals defines the total time of a cycle. The sum of all cycle time
intervals defines the total time of the thermal die cycling.

  .. image:: images/model-reference/thermal-die-cycling.*
     :alt: Thermal Die Cycling

To add a segment, select a type from :menuselection:`Add segment` pull-down
menu. Available segment types depend on the segments that have been added.

  .. image:: images/model-reference/tdc-add-segment.*
     :alt: Thermal Die Cycling Add Segment

.. note:: :guilabel:`Temperature in the die cavity` must be defined for all die cycling 
          segments except for the first one :menuselection:`Solidification`
          (see :ref:`tdc_solidfication_stage` below).

.. _tdc_solidfication_stage:

Solidification
--------------

The first cycle segment is always :menuselection:`Solidification`, which
describes the cooling of the metal before opening the die. Once the first
segment is added, its type is fixed (inactive). The metal is placed into the die
cavity at the beginning of each cycle at a uniform temperature specified by
the first entry in the table. This can be accomplished by adding a pointer, (\
:menuselection:`Initial --> Add fluid pointer`) which is located anywhere
inside the die cavity, and then setting fluid fraction at the pointer equal to
1.0.

The value defined in :guilabel:`Temperature in the die cavity` is used as a uniform
initial condition for fluid in the cavity. If :guilabel:`Temperature in the die cavity` 
is not specified for :menuselection:`Solidification` segment, then it is taken from the
fluid temperatue deinfed in :menuselection:`Model Setup --> Initial --> Fluid regions` 
or from restart data for restart simulation (see :ref:`Restarts`). For the heat transfer
coefficients between the die and the metal during the first cycle segment, the
component heat transfer coefficients to fluid 1 and to solidified fluid 1 are
used (\ :menuselection:`Model Setup --> Geometry --> Component -->
Surface Properties --> Heat transfer coefficients to`). The thermal die
cycling table entry :guilabel:`Heat transfer coefficient at the die cavity
surface` for the first segment is thus not needed and grayed out on the GUI.

.. _tdc_open_before_ejection_stage:

Open before ejection
--------------------

The :menuselection:`Open before ejection` segment can only be added as the second
segment. Once an open before ejection segment is added, its type cannot be changed.
During this stage, the cover of the die is open, but the casting part is still
sticking to the ejector of the die. The cover and ejector thus experience very
different thermal conditions at this stage. In order to correctly compute the
die temperature during this stage, the cover and ejector components of the die
have to be defined (\ :menuselection:`Model Setup --> Geometry --> Component properties 
--> Thermal Die Cycling properties --> Cover Component`). In
addition to the :guilabel:`Heat transfer coefficient at the die cavity
surface`, which defines the heat transfer coefficient between the die and the
air, the :guilabel:`Heat transfer coefficient between metal and air`
also needs to be specified. The component heat transfer coefficients
to fluid 1 and to solidified fluid 1 are used to compute the heat transfer
between ejector and metal, same as in the first segment.

  .. image:: images/model-reference/thermal-die-cycling-component-properties.*
     :alt: Thermal Die Cycling Component Properties
     :height: 250
     :width: 350

All other segment types assume that the die cavity is empty of metal.

.. _tdc_closed_stage:

Closed
------

The :menuselection:`Closed` segment is always the last segment.
For the segments whose types are not one of the three mentioned above, their
orders can be rearranged by drag-and-drop. The segment type can also be
modified via :guilabel:`Type` pull-down menu on the right. The segment order
might be rearranged automatically based on its new segment type. A segment can
be deleted by clicking on the :guilabel:`Delete segment` button.

  .. image:: images/model-reference/tdc-change-segment.*
     :alt: Thermal Die Cycling Change Segment

No fluid flow is modeled in a die cycling simulation.

Cores and liners are commonly used in die casting. They are inserted into a
die assembly and are removed after each cycle. They can be modeled by defining
them as cores/liners in :menuselection:`Model Setup --> Geometry --> Component
--> Thermal Die Cycling properties --> Core/liner`. Unlike
other parts of the die that are reused after each cycle and thus retain their
temperature history, the temperature of cores and liners is reset at the
beginning of each cycle. 

Cores and liners are also considered during the :menuselection:`Open before ejection`
segment. A core/liner component can also be defined as a cover or ejector
component, depending on if it is part of the cover, or part of the ejector. If
a core/liner is defined as a cover, it will be removed at the beginning of the
:menuselection:`Open before ejection` segment. If it is defined as an ejector, it will
stay in the ejector during the :menuselection:`Open before ejection` segment, and be
removed at the end of the :menuselection:`Open before ejection` segment.

Since the cores and liners are usually of different material types than the
other parts of the die, they usually have different heat transfer coefficients
to the metal. This can be accomplished by specifying different values of heat
transfer coefficient to fluid 1 for the core and liner components. As
mentioned above, if the values of the heat transfer coefficient to fluid 1 are
specified, they are used during the first cycle stage
(:menuselection:`Solidification`) and the :menuselection:`Open before ejection`
(if defined). At later stages of each cycle, the cores and liners will
be removed, thus have no effect to the die cooling.

After the die opens, the die is also cooled at the parting line. In order to
take the parting line cooling into consideration, the two die parts that are
in contact have to be defined, which is used to identify the parting line (see
also :envvar:`IFOBCYCCON` in :ref:`ComponentPropertiesThermalDieCycling`). The
parting line is closed during the first stage (:menuselection:`Solidification`)
and the :menuselection:`Closed` stage (if defined). Cover
and ejector components are always treated as contacting components. Note that
the parting line needs to be along the coordinate planes to be better
resolved. Cores/liners cannot be defined as contacting dies.

.. _tdc_numerics:

Numerical settings
=========================

It is recommended to use the implicit heat transfer algorithm, by setting
:menuselection:`Numerics --> Explicit/implicit options --> Heat transfer -->
Implicit` (also found on the :menuselection:`Physics --> Heat transfer`) for
faster simulations (see :ref:`ComputingTemperaturesMR`). The time-step size
and the convergence parameters will be dynamically adjusted to achieve the
optimum speed of the simulation and accuracy of the results. The time step size
is automatically controlled to capture the duration of each cycle segment and at
the same time to maintain the accuracy of the solution. The time step size could
be further reduced manually by using :ref:`TEDIT <PlotOutputControl>` and 
:ref:`TDTMAX <PlotOutputControl>` arrays, but it is not generally necessary.

.. _tdc_output:

Output
========

The default values of the time intervals for the History data output,
:ref:`THPLTD <PlotOutputControl>`, and short prints, :ref:`TSPRTD
<PrintOutputControl>`, are set to 1/10 and 1/5 of the smallest cycle segment
duration. The user can overwrite the default values in the :envvar:`Output`
window.

Most of the :guilabel:`Restart data` edits are done in the last thermal die
cycle, where the solution is supposed to be at steady-state and, therefore, most
interesting to the user. There are three factors controlling the spatial output
in the thermal die cycling model:

1. One per cycle restart data edit defined in :menuselection:`Physics --> Thermal die cycling --> Number of die cycles at the end...` A restart data edit is made at the end of these die cycles. This allows the user to track the results from cycle to cycle and also make restart calculations.

#. Additionally, restart data is automatically saved at the end of each segment during the last die cycle. These data edits allow the user to track the changes in die temperature during the main stages of the process.

#. Finally, restart data can be saved at user-defined intervals during the last die cycle. The output frequency is controlled by the output logic defined in :menuselection:`Output --> Restart data`. The output frequency during the first segment of the cycle can also be based on solidified fraction.

.. note:: 

   The :menuselection:`General --> Finish time` setting has no effect in Thermal Die Cycling simulations.
   The simulation will stop after the final cycle.

.. index:: spray, spray cooling

.. _SprayCoolingThermalDieCycling:

Spray Cooling for Thermal Die Cycling
========================================================

.. note:: The model definition is only available through |f3dc|. 
          However, the variables can be directly typed in by editing PREPIN file.

For thermal die cycling simulations, in order to accurately predict the
temperature distribution in the die, the spatial variation in the spray
cooling has to be taken into consideration. Spray cooling model is developed
for this purpose. 

This model explicitly computes the cooling from each spray, instead
of a constant heat transfer coefficient across the entire die cavity. The
spray area on the die surface will be computed and updated constantly due to
the movement of the spray nozzles. The blocking of the spray cooling due to
the spray angle and the shape of the die surface is also considered. It
provides more accurate temperature distribution on the die surface with
reliable and realistic input parameters, which will help to better design and
optimize the spray cooling process to eliminate the hot spots. 

.. note :: To make the spray cooling model compatible with general thermal die cycling
           setups, this model can only be active during :menuselection:`Spray lubricant`
           segment defined in thermal die cycling table.

Spray Area Computation
--------------------------

In order to include the influence of the shape of the die surface and the
position of the spraying nozzles to the spray cooling, the spray area on the
die surface is computed, and updated constantly when the spray nozzle moves.
As shown in the figure below, on the die surface some areas under the spray
are blocked, and some areas are overlapped by two or more sprays. These areas
are computed and identified using ray tracing algorithm in order to
distinguish the different spray cooling effects. 

To visualize the spray area
on the die surface, a scalar is used to highlight the spray surface element by
the spray nozzle bank index. If a surface element is sprayed by more than one
spray nozzle banks, the average bank index is used to mark the surface. If the
spray nozzle moves, the spray area will also change. The spray area scalar can
be used to validate the spray nozzle positioning and the spray robot movement.

  .. image:: images/model-reference/spray-cooling-spray-area-computation.*
     :alt: Spray Area Computation

The Heat Transfer Coefficient
-------------------------------

The spray cooling mechanism is complicated, and the spray cooling heat
transfer coefficient (HTC) depends on many variables such as spray shape,
coolant flow rate, spray pressure, mold temperature, spray angles, spray
distance, etc. To make the spray cooling model easier to use, two HTC
calculation methods are provided. Users can choose to use the appropriate one
based on their data availability.

The Heat Transfer Coefficient Based on Dependencies
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

If the spatial variation of the heat transfer coefficient (HTC) is known,
either by direct measurement or full CFD computation, the HTC can be expressed
by a spatial function. To simplify the HTC calculation, the HTC is computed by
multiplying the base HTC by spatial dependence factors. For example for
conical spray, for every spray surface element, the HTC is computed by

.. math::

   HTC = { {HTC}_0 \left( T \right) } \cdot {f_d \left( d \right) } \cdot {f_b \left( \beta \right) } \cdot {f_e \left( \epsilon \right) }

where

* :math:`{HTC}_0` is the base spray heat transfer coefficient when the nozzle sprays on the mold from a specified distance. The base heat transfer coefficient is dependent on the spray cone characteristics, spray medium, and spray pressure, etc., and is a function of the mold surface temperature.
* :math:`f_d` is the distance :math:`d` dependence factor function.
* :math:`f_b` is the spray angle :math:`\beta` dependence factor function.
* :math:`f_e` is the spray angle :math:`\epsilon` dependence factor function.

The meaning of the spray distance :math:`d`, and spray angles :math:`\beta`
and :math:`\epsilon` are shown in the below picture.

  .. image:: images/model-reference/spray-cooling-dependence-factors.*
     :alt: Spray Cooling Heat Transfer Coefficient Dependence Factors

The base heat transfer coefficient and the dependence factor functions can be
regressed from experimental measurements, derived from theory, or from
experience.

If the sprays are not in conical shape, the dependence factors might be different.

.. note::

   * For areas that are not sprayed on due to either blockage or outside of
     the spray, the heat transfer coefficient defined for
     :menuselection:`Spray lubricant` segment in thermal die cycling table
     will be used, which should be the heat transfer coefficient between the
     die and the ambient environment.
   * For areas that are sprayed on by multiple nozzles, the highest HTC is used.

The Heat Transfer Coefficient Based on Spray Medium Properties
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

For spray cooling, the spatial variation of the heat transfer coefficient
(HTC) is usually not known. There are literatures on measuring or using CFD to
compute the spray cooling heat transfer coefficients. But they are all very
complicated, difficult, and expensive approaches, and require specific
equipment, software, and expertise. For users who want to use spray cooling
model for thermal die cycling simulations, it is almost impossible for them to
obtain the heat transfer coefficient using these approaches. For practical
applications, however, the spray cooling heat transfer coefficient can be
computed from spray medium properties based on energy exchange.

  .. image:: images/model-reference/spray-cooling-spray-cone.*
     :alt: Spray cooling spray cone

Assuming the nozzle produces a uniform and conical spray, the energy removal
rate by the spray cooling for a surface element can be expressed as

.. math::
   
   \dot E = \alpha \cdot \rho \cdot \frac {\dot V}{A_{cap}} \cdot A_{cross} \cdot \left [ \frac {T_{die} - T_{spray}}{\tau _{T}} \cdot L + C_p \cdot \left ( T_{evapo} - T_{spray} \right ) \right ]

where

* :math:`\alpha` is the efficiency coefficient,
* :math:`\rho` is the density of the spray medium,
* :math:`\dot V` is the nozzle volume flow rate,
* :math:`A_{cap}` is the spray cone cap area at spray distance :math:`d`,
* :math:`A_{die}` is the die surface element area,
* :math:`A_{cross}` is the surface element cross area,
* :math:`\tau _{T}` is the latent heat release temperature range,
* :math:`L` is the evaporation latent heat,
* :math:`C_p` is the specific heat,
* :math:`T_{die}` is the die surface temperature,
* :math:`T_{evapo}` is the spray medium evaporation temperature, and
* :math:`T_{spray}` is the spray medium temperature.

The energy extracted from the die can be expressed as

.. math::
   \dot E = HTC  \cdot A_{die} \cdot \left ( T_{die} - T_{spray} \right )

The spray cooling heat transfer coefficient can then be derived as

.. math::

  HTC = \alpha \cdot \rho \cdot \frac {\dot V}{A_{cap}} \cdot \frac {A_{cross}}{A_{die}} \cdot \frac {\left [ \frac {T_{die} - T_{spray}}{\tau _{T}} \cdot L + C_p \cdot \left ( T_{evapo} - T_{spray} \right ) \right ] }{ T_{die} - T_{spray} }

  HTC = \alpha \cdot \rho \cdot \frac {\dot V}{A_{cap}} \cdot \frac {\vec{n} \cdot \vec{d}}{|\vec{d}|} \cdot \frac {\left [ \frac {T_{die} - T_{spray}}{\tau _{T}} \cdot L + C_p \cdot \left ( T_{evapo} - T_{spray} \right ) \right ] }{ T_{die} - T_{spray} }

It can be seen that the dependencies on the die temperature, the spray
distance and the spray angles are included in the calculations.

Note that the above equation is valid when the die temperature is within
[:math:`T_{evapo}`, :math:`T_{evapo} + \tau_{T}`]. When the die temperature is
below :math:`T_{evapo}`, the above equation is reduced to:

.. math::

  HTC = \alpha \cdot \rho \cdot \frac {\dot V}{A_{cap}} \cdot \frac {\vec{n} \cdot \vec{d}}{|\vec{d}|} \cdot C_p

When the die temperature is above :math:`T_{evapo} + \tau_{T}`, due to the
advection of the air and spray medium moisture, the HTC is kept as a constant
value.

In order to get reasonable HTC, the efficiency coefficient :math:`\alpha`,
needs to be calibrated using experimental data. It is 0.75 by default.

Model Setup
---------------

This model can only be defined through |f3dc|. Please refer to |f3dc| Users
Manual for details.

Output Options
---------------

The spray cooling selected data output can only be selected through |f3dc|.
Please refer to |f3dc| Users Manual for details.

Post Processing
------------------

Spray cooling results are better to be visualized in FlowSight.

Choose :menuselection:`Selected` from the :guilabel:`Timeline` pull-down menu
in the :guilabel:`Time` window. Then in the :guilabel:`Geometry List` window,
select the component that wanted to be visualized, and select
:menuselection:`Iso` from the :guilabel:`Type` pull-down menu. Then select one
of the spray visualization variables (i.e., total_spray_time_selected) from
the :guilabel:`Color by` pull-down list next to the geometry selected.

  .. image:: images/model-reference/spray-cooling-FlowSight.*
     :alt: Spray cooling output visualized in FlowSight

.. index::
   single: Model Reference; Thermal Stress Evolution in solidified fluid regions

.. index:: thermal stress evolution

.. _TseSolidifiedFluidRegion:

=============================================================
Thermal Stress Evolution (TSE) in Solidified Fluid Regions
=============================================================

The thermal stress evolution (TSE) model is designed to use the finite element
method (FEM) to simulate and analyze the stresses and deformations within the
solidified fluid region. These stresses can develop as a result of forces
exerted by the surrounding fluid, thermal gradients within the solidified fluid,
and/or constraints imposed by walls and neighboring components.

.. _TseSolidificationModelSetupMR:

Model Setup
========================================================

.. _TSE_props_MR:

TSE properties
-------------------------

These computations are only performed for the fully solidified fluid cells and
therefore the model requires the :guilabel:`Solidification` model to be turned
on. The :guilabel:`Thermal stress analysis` is activated from the
:guilabel:`Solidification` window.

  .. image:: images/model-reference/fsi-tse-solidified-fluid-region-solidification.*
     :alt: Solidified fluid region - Solidification

The minimum requirements in terms of the material properties for this model are:
:guilabel:`Fluid Density` and at least two elastic properties out of
:guilabel:`Bulk Modulus`, :guilabel:`Shear Modulus`, :guilabel:`Elastic
(Young's) Modulus`, and :guilabel:`Poisson Ratio`. Unless these minimum
requirements are met, the simulation will not start. These properties are set
at the :menuselection:`Fluids` widget, at the :menuselection:`Fluids --> Fluid 1 --> Solidification --> Solidified` tab.


  .. image:: images/model-reference/fsi-tse-solidified-fluid-region-properties-in-fluids-tab.*
     :alt: Solidified Fluid 1 Properties - Fluids tab

The :guilabel:`Yield Stress` input allow entry of a Yield-stress limiting
value (in units of stress). Setting this value for the component activates the
*Plastic deformation* model for that component, which predicts non-elastic
deformation locally where the local von Mises stress exceeds the specified
value. Leaving the default value :guilabel:`-1` means that there is no
yielding; i.e., an infinite yield stress limit.

Pressure in the liquid is used as a boundary condition at the
liquid/solid interface. Most of the solidified fluid properties can be defined
as functions of temperature using tabular input. Click on the
:guilabel:`Tabular` button to enter the temperature-dependent properties
directly, or :guilabel:`Import Values` from an existing comma separated value
(:file:`csv`) file, or :guilabel:`Use File`, where the values from the specified
external file is used. These properties can also be loaded into components
from the :menuselection:`Materials --> Fluids Database` menu.

.. note:: 

   To define density as a function of temperature, it needs to be defined in the
   :guilabel:`Density Properties` of :guilabel:`Fluid 1`. Once a table for density exists,
   it will also be used for both the liquid and solidified fluid density.

.. index:: FEA domain removing components

.. index::
   single: components; FEA domain removing


.. _FEmeshing_TSE:

TSE meshing
-------------------

After the elastic properties are provided, it is time to generate a finite
element (FE) mesh for the solidified fluid region. This is done from the
:menuselection:`Model Setup --> Mesh --> Solidified fluid mesh`.

  .. image:: images/model-reference/fsi-tse-solidified-fluid-region-solidification-component.*
     :alt: Solidified fluid region - Geometry


The preprocessor makes use of a rectangular Cartesian mesh around the fluid
region to generate the FE mesh. This :guilabel:`Input Mesh` can be the
Cartesian mesh that is ultimately used to solve for the fluid (default), or it
can be an independent :guilabel:`Local Input Mesh` whose purpose is only to
generate the FE mesh for the solidified fluid region. **The FE mesh generator
will, by default, create a FE mesh that encompasses the entire domain except
for regions occupied by** :guilabel:`Solid` **components or by**  
:guilabel:`FEA domain removing` **components:**

  .. image:: images/model-reference/FEA_domain_removing.*
     :alt: FEA domain removing component selection

.. note:: 

   * The :guilabel:`Local Input Mesh` information will be saved in the
     :guilabel:`FE Mesh File` that is generated in the next step, and not in the
     :file:`prepin.*` file.
   * Domain regions occupied by moving components are, by default, meshing by
     |prod|\ 's FE mesh generator, since it is assumed that at some point during
     the simulation, these regions can be occupied by solidified fluid. If you
     know that there are domain regions that are not going to be occupied by
     solidified fluid, create a :guilabel:`FEA domain removing` component in
     that region.

The cylindrical coordinate fluid mesh can be used to generate the FE
mesh, either axisymmetric or fully three-dimensional. The only limitation is
that for 3-D meshes, the FE mesh **cannot** contact the centerline of the
mesh; this will result in a singularity point for the FE mesh.

The :guilabel:`FE mesh type` drop-down menu allows for the selection of either
a :guilabel:`Hexahedron` or :guilabel:`Tetrahedron` mesh. Hexahedron meshes,
the default,  are based on six-sided elements, with merging of some vertices
in the vicinity of the component boundaries to allow for smooth interfaces.
Tetrahedron meshes are composed of 4-sided elements and do not require merging
of any vertices. Tetrahedral meshes are simpler, use linear basis functions,
and can result in lower CPU times. However, due to the linear basis functions,
the results may be somewhat less smooth.

After the :guilabel:`Input Mesh` is defined, right click on the :guilabel:`FE
Mesh File` and :guilabel:`Generate` the FE mesh. If there is no filename
specified, the filename for this mesh defaults to
:file:`solidified_fluid.prjext.FEmesh`, where :file:`prjext` is the project
extension. If an :file:`FE mesh` file already exists, :guilabel:`Open` it
using the :guilabel:`File options` button, then right click on the :guilabel:`FE
Mesh File` and :guilabel:`Load and Display` the existing FE mesh file. If
satisfied with the FE mesh, select the :guilabel:`Use FLOW-3D mesh` option from the :guilabel:`FE mesh type` drop-down menu.

The final option of the :guilabel:`FE mesh type` drop-down menu is
:guilabel:`Use EXODUS FE mesh`, which allows input of :program:`EXODUS II`
file format meshes. See below for further information on the use of
:program:`EXODUS II` meshes.

.. note:: 

   * If the :guilabel:`Use FLOW-3D mesh` option is not checked, the FE mesh file 
     is regenerated every time :guilabel:`Generate` or :guilabel:`Preprocess Simulation` is selected.
   * The preprocessor meshes the whole open region within the :guilabel:`Input
     Mesh`. If it is known *a priori* that any solidified fluid is not going to
     be present in a part of the open region, that section can be removed from
     the FE mesh with a component whose the :guilabel:`Component type` selection
     is :guilabel:`FEA domain removing`.

Where the solidified fluid region is in contact with neighboring components,
the model needs to know how these components behave. For non-FSI components,
or when TSE/FSI coupling is set to :guilabel:`No coupling` (see below) the
neighboring components can either be a :guilabel:`Constraining Component` or a
:guilabel:`Non-constraining component`. Examples of constraining components
are steel dies: the deformation of the component will be small in response to
stresses developed within the solidified fluid region. Conversely, an example
of a non-constraining component is a sand mold: such molds will not support
significant stresses, and thus offer no constraining forces to the solidified
fluid region.

  .. image:: images/model-reference/tse-component-props-constraining.*
     :alt: FSI constraining options
     
.. note::
    For a Thermal Stress Evolution region, if the surrounding component is porous then the default component interaction setting is non-constraining.

.. index::
   single: thermal stress evolution; controls

.. index:: TSE controls

.. _TSEControlsMR:

TSE Controls
========================================================

Solid fraction activation
-------------------------

The TSE model is automatically activated when the solid fraction is 1 in a
given cell. In certain cases the stresses in the cells become significant when
the solid fraction less than 1. The :envvar:`FSTSE` parameter allows the user to specify
the solid fraction at which the stress computations can begin in the finite
element mesh. This provides flexibility in the usage of the TSE model.

.. index::
   single: thermal stress evolution; numerical options

.. index:: TSE numerical options

.. _TseSolidificationSimulationMR:

Numerical Options
========================================================

  .. image:: images/model-reference/tse-coupling-options.*
     :alt: TSE/FSI coupling options

For simulations where the complex interactions between the TSE region and
neighboring components are needed to be simulated, the neighboring components
can be specified to be FSI components, and the :guilabel:`Partial coupling`
option selected in the :menuselection:`Numerics --> Coupling between solid
fluid/FSI` option box (see image above). By default, :guilabel:`No coupling`
is selected, which allows for only basic :guilabel:`Constraining` or
:guilabel:`Non-constraining` options. The :guilabel:`Partial coupling` allows the TSE
region and FSI components  to separate and slide past one another, but they
cannot interfere. The sliding friction is controlled by specifying a value for
the :guilabel:`Friction coefficient`. By default, sliding friction is not
limited (i.e., sliding cannot occur so long as the TSE region and FSI
components are in contact); setting this to 0.0 or greater allows for sliding.
Physical values are typically less than 1.0.

The solver used for the solution of the stresses within the
:guilabel:`solidified fluid region` is similar to the GMRES pressure solver.
This is the only solver currently available, and the user can adjust the GMRES
subspace size (sometimes called the *restart number*, and is
:envvar:`MRSTRTFSI` in the input file), the maximum number of iterations and
the convergence tolerance. Changes to these parameters are made from the
:guilabel:`FSI/TSE solver options` section of the :guilabel:`Numerics` tab:

  .. image:: images/model-reference/ModelReference_FSITSE-Numerics_v12.*
     :alt: Fluid-Structure interaction - GMRES subspace size

The default value of the GMRES subspace size is 20. Increasing this value will
allow the solver to achieve convergence with fewer iterations; however, the
CPU time per iteration will increase and the memory usage will rise with the
subspace size. In some simulations where convergence is not being reached
(i.e., the maximum number of iterations are being done and the :guilabel:`FEA
convergence ratio` is greater than 1), increasing this value can drastically
reduce the overall CPU time.

Additionally, if the option :guilabel:`Dynamically selected subspace size` is
selected, the solver will automatically adjust the subspace size to optimize
solution efficiency. In this case, the entered (or default) value of the
:guilabel:`GMRES subspace size` becomes the **maximum** subspace size.
Therefore, setting it to a largest value possible with this option is a good
idea (up to the memory available on the computer), since it allows for greater
solver flexibility. In cases where convergence is easily achieved, the
subspace size will automatically be reduced to maintain optimum solver
efficiency.

The :guilabel:`Maximum number of iterations` limits the number of iterations
used by the solver; the default value is 25 which should be more than enough
for most simulations. If the FSI iteration count in the solver is repeatedly
reaching the limit (as seen in the :guilabel:`Simulation` messages), this
limit or the subspace size can be increased. It is recommended (up to the
limit of available memory) to try increasing the subspace size first.

The :guilabel:`Convergence tolerance` specifies the maximum residual permitted
in the solution of the solid dynamics equations. This value is dimensionless
independent of the mesh size and time step. The value represents a relative
error in the computed strain. The default value is 10\ :sup:`-3`, which should
work well for most simulations. However, if the goal of the simulation is to
get a final-time stress result, rather than accurate time-dependent results,
raising this value will not greatly harm the accuracy of the end result. For
simulations where the displacements and stresses are needed to be highly
accurate during the course of the simulation, lowering this value can help.
Note that convergence generally becomes increasingly slow for values of the
convergence tolerance smaller than 10\ :sup:`-8` for reasons of machine
precision round-off.

The option :guilabel:`Preconditioning of FSI GMRES` (on by
default) uses a preconditioning algorithm prior to running the GMRES
algorithm, with the goal of reducing the number of GMRES iterations. The
preconditioning algorithm is only used when:

1. The option :guilabel:`Preconditioning of FSI GMRES` is activated, and
#. The average number of iterations needed to solve the solid dynamics equations during the previous 10 computational cycles exceeded 4.

The option :guilabel:`Fully coupled stress between solidified and non-
solidified fluid` allows control of the boundary condition between solidified
and non-solidified fluid as the solidification front develops. The default
(turned off), is to fix the location of this interface during each cycle. This
is more numerically stable, minimizes computational time, and ensures that
"floating bits" of solidified fluid are sufficiently constrained for numerical
efficiency. In cases where it is important to simulate the coupling of
stresses between the non-solidified fluid (i.e., pressure) and solidified
material, select this option. Selection of this option does raise the risk of
numerical issues occurring during solidification, and will likely increase
computational time.

Important considerations
--------------------------------------

If gravity is used in the simulations, the solidified fluid region must be in
contact with mesh boundaries or other components so that it cannot move
freely. If not constrained, the solid dynamics equations will predict rigid-body
motion for the solid, and this motion will not be represented in the fluid.
Free-floating solidified fluid regions can be modeled in the absence of gravity.

.. _TseSolidificationPostprocessingMR:

Post-processing
========================================================

The finite-element results produced by the model can be viewed in a separate
display. To access the TSE data, from the :guilabel:`Analyze` tab, select the
:guilabel:`FSI TSE` sub-tab:

  .. image:: images/model-reference/fsi-tse-solidified-fluid-region-analyze-tab.*
     :alt: Analyze tab

From this tab, select which of the components to view.

  .. image:: images/model-reference/fsi-tse-solidified-fluid-region-fsi-components.*
     :alt: Fluid-Structure Interaction Components

.. note:: The solidified fluid region is always labeled as Component 0:

Also selectable are the time limits, and the data source. Note that to view
:guilabel:`Selected` data, :guilabel:`Fluid structure interaction` must have
been chosen from the :guilabel:`Selected data` list in :menuselection:`Model
Setup --> Output` during setup of the simulation. Click :guilabel:`Render`
and the :guilabel:`Display` tab appears, and from here various data variables
can be plotted for the FSI component. Other controls to zoom, rotate, etc.,
are the same as the 3-D display.

The default display is the :guilabel:`Normal displacement`. This shows the
surface displacement in the direction of the outward-pointing normal over the
entire surface of the component, relative to its original conformation.
Negative values indicate that the surface is pulled in and positive values
indicate that the surface is pushed out relative to its original position.
Individual displacements throughout the component in the x, y and z directions
can also be displayed by selecting :guilabel:`X displacement`, :guilabel:`Y
displacement`, or :guilabel:`Z displacement`, respectively.

There are 6 components of elastic stress and 6 components of strain available
for plotting. These are the 6 independent components that comprise the
symmetric stress and strain tensors. These components are difficult to
conceive for three-dimensional simulations, as even simple 1-D tension,
diagonal to the coordinates, will produce non-zero values in many of the
stress components. That is why the :guilabel:`mean iso stress` and the
:guilabel:`Von Mises stress` are provided. These are stress invariants, and as
such, are independent of the coordinate system chosen. The :guilabel:`mean iso
stress` is the isotropic stress which is the amount of compressive (negative
values) or tensile (positive values) stress in the solid, which could indicate
areas most prone to buckling or cracking. In contrast, the :guilabel:`Von
Mises stress` is a measure of shearing stresses; its value is always positive.
Regions with high shear stress are more prone to tearing. Therefore, a solid
under pure compressive or tensile stresses can have a negligible Von Mises
stress; conversely, a solid under pure shear can have negligible tensile or
compressive stress.

If a value was specified for the :guilabel:`Yield Stress`, then data will also
be available for the plastic deformation of the solidified fluid region. This
data includes the independent components of the plastic strain tensor (all
non-dimensional), and the plastic strain magnitude (the second invariant of
the plastic strain tensor). These values indicate the locations within the
component where the greatest amount of plastic strain occurred.

:guilabel:`Temperature` is available for plotting as a convenience. This
temperature is the same as the fluid temperature available from the fluid
3-D display. The :guilabel:`volume expansion` indicates regions of the component
that have expanded (positive values) or shrunk (negative values) during the
course of the simulation. Such expansion or contraction could be caused by
temperature changes, or by tensile or compressive stresses.

.. _tseExportImportExodusMeshes:

Export/Import TSE Meshes
========================================================

TSE mesh and data can be imported or exported to :program:`EXODUS II` file
format, which is a random access, machine independent, binary file format.
:program:`EXODUS II` is a widely used model developed to store and retrieve
data for finite element analyses. The ability to export TSE mesh and data files
in :program:`EXODUS II` file format enhances portability and makes it possible
to view FSI results outside the |prod| GUI.  
`ParaView <http://www.paraview.org>`_ is a free, multi-platform data analysis 
and visualization application that can be used to view :program:`EXODUS II` 
files. To generate :program:`EXODUS II` output files, select 
:menuselection:`Model Setup --> Output`. In the :guilabel:`Additional output` section, select the
required option in the :guilabel:`FSI/TSE EXODUS output format` drop-down menu. 

  .. image:: images/model-reference/ModelReference_FSIMEshDataOutput_v12.*
     :alt: EXODUS II output options

The TSE mesh file stores only the FE mesh information (elements, nodes, etc.)
while the TSE data file includes FE mesh information and as well node
properties such as stress, strain, etc. at each FE mesh node. 
The :ref:`tseDataOutputVariablesTable` table provides a description of all TSE data
variables.  

The TSE mesh file has the extension ``.EXFEmesh.exo`` and is written
out only once, immediately after the pre-processing stage. The TSE data file has
the extension ``.EXFEdata.exo`` and is written out at the same frequency as the
restart data.  The :program:`EXODUS II` data file is a single file (one for
each FSI component) that contains FSI data at all restart output times. In the :file:`prepin.*`
file, the variable :envvar:`IEXODUSOUT` (in namelist :envvar:`XPUT`) can be used to
write out TSE mesh and data files in :program:`EXODUS II` format (see
:ref:`FileControlOptions` for details of usage).  

.. tabularcolumns:: |p{3.5cm}|p{8.5cm}|

.. _tseDataOutputVariablesTable:

.. list-table:: TSE data variables 
   :widths: 35 55
   :header-rows: 1
   :class: longtable

   * - FE MESH VARIABLE
     - DESCRIPTION

   * - :envvar:`stressxx`
     - *xx*\ -component of Elastic stress tensor

   * - :envvar:`stressxy` 
     - *xy*\ -component of Elastic stress tensor

   * - :envvar:`stressxz` 
     - *xz*\ -component of Elastic stress tensor

   * - :envvar:`stressyy` 
     - *yy*\ -component of Elastic stress tensor

   * - :envvar:`stressyz` 
     - *yz*\ -component of Elastic stress tensor

   * - :envvar:`stresszz` 
     - *zz*\ -component of Elastic stress tensor

   * - :envvar:`DISPLX` 
     - *x*\ -component of local displacement vector

   * - :envvar:`DISPLY` 
     - *y*\ -component of local displacement vector

   * - :envvar:`DISPLZ` 
     - *z*\ -component of local displacement vector

   * - :envvar:`strainxx`
     - *xx*\ -component of symmetric strain tensor

   * - :envvar:`strainxy` 
     - *xy*\ -component of symmetric strain tensor

   * - :envvar:`strainxz` 
     - *xz*\ -component of symmetric strain tensor

   * - :envvar:`strainyy` 
     - *yy*\ -component of symmetric strain tensor

   * - :envvar:`strainyz` 
     - *yz*\ -component of symmetric strain tensor

   * - :envvar:`strainzz` 
     - *zz*\ -component of symmetric strain tensor

   * - :envvar:`rel volume expansion` 
     - Relative volume expansion. The first invariant (trace) of strain tensor

   * - :envvar:`mean iso stress` 
     - Mean isotropic elastic stress. Represents a measure of purely compressive (if negative) or tensile stresses (if negative). Equal to one-third of the trace of the elastic stress tensor.

   * - :envvar:`VM stress` 
     - Von Mises stress. Represents a measure of shearing stresses; its value is always positive. Regions with high shear stress are more prone to tearing. This is the square root of the second invariant of the elastic stress tensor.

   * - :envvar:`Temperature` 
     - Local solid temperature

   * - :envvar:`norm displ` 
     - Normal displacement of the solid component boundary. Non-zero only at component interfaces.

   * - :envvar:`Active node?` 
     - The activity state of the local node. Nodes located where fluid is still liquid (i.e. :math:`T > T_{sld}`) or within void are *inactive*.

   * - :envvar:`pstrainxx`
     - *xx*\ -component of plastic strain tensor. Valid only when yielding (:envvar:`YLDSTRTS` :math:`>` 0) is specified.

   * - :envvar:`pstrainxy` 
     - *xy*\ -component of plastic strain tensor. Valid only when yielding (:envvar:`YLDSTRTS` :math:`>` 0) is specified.

   * - :envvar:`pstrainxz` 
     - *xz*\ -component of plastic strain tensor. Valid only when yielding (:envvar:`YLDSTRTS` :math:`>` 0) is specified.

   * - :envvar:`pstrainyy` 
     - *yy*\ -component of plastic strain tensor. Valid only when yielding (:envvar:`YLDSTRTS` :math:`>` 0) is specified.

   * - :envvar:`pstrainyz` 
     - *yz*\ -component of plastic strain tensor. Valid only when yielding (:envvar:`YLDSTRTS` :math:`>` 0) is specified.

   * - :envvar:`pstrainzz` 
     - *zz*\ -component of plastic strain tensor. Valid only when yielding (:envvar:`YLDSTRTS` :math:`>` 0) is specified.

   * - :envvar:`pstrainmag` 
     - *xx*\ -component of plastic strain tensor. Valid only when yielding (:envvar:`YLDSTRTS` :math:`>` 0) is specified. This is the square root of the second invariant of the plastic strain tensor.

   * - :envvar:`nn:T` 
     - Normal component of traction on the component interface. This is a measure of the force (due to surrounding fluid, neighboring components) on the component. Non-zero only on component interfaces.

It is also possible to import :program:`EXODUS II` meshes into |prod|. Using
this feature, :program:`EXODUS II` meshes generated previously using |prod| can
be used to specify the FE mesh instead of the default |prod| FE mesh format.

In the user interface, the final option of the :guilabel:`FE mesh type` drop-down menu is
:guilabel:`Use EXODUS FE mesh`, which allows input of :program:`EXODUS II`
file format meshes. 


.. index::
   single: Model Reference; two-fluid flow

.. index:: two-fluid flow

.. _twoFluidFlowMR:

========================================================
Two-Fluid Flow
========================================================

For two-fluid problems, set :menuselection:`Physics --> Number of fluids -->
Two fluids`. In such Fluid #1 is described with the unit value of the
:guilabel:`Fluid fraction`, F = 1.0. Regions where F = 0.0 are filled with fluid
#2. Values of the fluid fraction between zero and one describe a mixture of
the two fluids in terms of the volume fraction of fluid #1.

  .. image:: images/model-reference/ModelReference_Fluids2Fluids_v12.*
     :alt: Interface tracking - Number of fluids (2)

Properties of each of the fluids, e.g., density and viscosities, are set in
:menuselection:`Fluids` widget. There are separate branches for
parameters related to each of the fluids.

Heat transfer coefficients at fluid-component boundaries can be set separately
for each fluid in :menuselection:`Model Setup --> Geometry --> Component -->
Surface properties`. Cross baffle heat exchange can be set in
:menuselection:`Model Setup --> Baffles --> Baffle # --> Heat Transfer Properties`.

The value of the fluid fraction at open mesh boundaries determines the 
two-fluid mixture at these boundaries: the value of 1.0 defines fluid #1 at the
boundary, while the value of 0.0 defines fluid #2. A fractional value
signifies a mixture in terms of the volume fraction of fluid #1; mixtures only
make sense in |prod| when the :guilabel:`No sharp interface` option is selected
from :menuselection:`Physics --> Interface tracking`.

In two-fluid models, either sharp interface between the two fluids is expected
or the fluids are miscible. In the latter case the fluids may intermix with each
other due to fluid advection and diffusion. Specify the type of interface in
:menuselection:`Physics --> Interface tracking`.

Only fluid #1 can have liquid/solid phase transformations (see
:ref:`solidificationSectionMR`).

Fluid #1 is always incompressible, while fluid #2 can be either compressible or
incompressible as defined by the :menuselection:`Physics --> Flow mode`
selection.

There is only one velocity value in each computational cell. When densities of
the two fluids differ greatly, i.e., roughly by more than a factor of 10, and
the viscous boundary layer at the interface is thin (i.e., less than one
cell width), this mixture velocity may not adequately represent the flow,
since velocities of each of the fluids in the same cell can be very different.
As a consequence, slip conditions between the fluids are not modeled
accurately, which may result in an incorrect fluid interface motion. When
modeling two fluids with fluid #1 heavier than fluid #2 by more than a factor
of 10.0, separated by a sharp interface, and with the viscous boundary layer
at the interface much thinner than the cell size, the :guilabel:`Two-fluid
interface slip` model may help to obtain more accurate results. This model
improves the momentum coupling at the interface between such fluids. Two-fluid
interface slip model is activated on the 
:menuselection:`Numerics --> Volume-of-fluid advection --> Advanced options --> Two-fluid interface slip` section.

  .. image:: images/model-reference/2-fluid-flow-numerics-2-fluid-interface-slip.*
     :alt: Two-fluid interface slip

.. note:: No void regions can be modeled with two-fluid models since all open space complementary to regions occupied by fluid #1 are filled with fluid #2.




.. index::
   single: Model Reference; Viscosity and turbulence

.. _visc_and_turb:

===============================================================
Viscosity and Turbulence
===============================================================



.. index::
   single: Model Reference; wall effects

.. index:: wall effects, wall slip, wall shear, component roughness

.. _wallEffectsMR:


Wall Effects: Slip, Shear, and Component Roughness
========================================================

When fluid moves around a solid body, the flow encounters resistance
that depends upon the flow velocity, turbulence, and the roughness of the
bounding surface. The effect of these boundary flows results in additional shear
stress, drag, and (in the case of sediment beds) erosion. Modeling these wall
(or boundary) effects requires attention to the slip-condition of the surface,
the surface roughness, and a mesh size that adequately resolves the near-wall
velocity profile. Approaches to modeling each of these parameters are detailed
below.

.. seealso:: \ Flow Science Technical Note 60 on modeling roughness effects in open channel flows can be found at |tn|. 


.. index:: wall shear

.. _wallSlipMR:

Wall Slip
-------------------------------------------------

Slip describes the presence of flow velocity directly against a boundary to the
flow. In general, surface conditions are described as *no-slip*, *partial-slip*
and *free-slip*.

Free-slip surfaces are surfaces at which there is no change in the velocity
profile normal to the surface, and are often used to describe the interface
between two fluids (like water and air) that differ by more than an order of
magnitude in density. Partial-slip boundaries describe a partial reduction in
fluid velocity at the boundary, and may be used to describe, for example, oil
flow in pipelines with emulsified coatings inside the pipe. By the far the
most common type of boundary condition are no-slip boundaries, which describe
nearly all fluid/solid interfaces.

Viscous boundary conditions on geometry components and mesh walls include a
slip velocity which is linearly proportional to the wall shear stress (see
:ref:`WallShearStressTh` in the *Theory*  manual for details). The coefficient
of proportionality is the friction coefficient, which applies globally to
solid components with unspecified friction coefficients as well as wall-type
domain boundaries. The global coefficient can be specified on the
:menuselection:`Model Setup --> Physics tab --> Viscosity and Turbulence
dialog --> Wall Shear Boundary Conditions --> Friction Coefficient`. The
global friction coefficient applies to all wall-type boundaries, and defines
the default value for all solid components.

  .. image:: images/model-reference/wall-slip-viscosity-and-turbulence.*
     :alt: Viscosity and turbulence

Component-specific friction coefficients that override the global value can be
defined: :menuselection:`Model Setup --> Geometry --> Component
--> Surface Properties --> Static Friction Coefficient`.

  .. image:: images/model-reference/wall-slip-static-friction-coefficient.*
     :alt: Static Friction Coefficient

As the friction coefficient approaches infinity, the wall slip velocity
approaches zero (no-slip). To avoid specifying an arbitrarily large value, the
no-slip option is activated by defining a negative value of friction
coefficient. A finite, positive friction coefficient results in a partial-slip
boundary. Zero specifies a free-slip boundary condition. By default, the
:guilabel:`Static friction coefficient` = -1.0 so all unspecified components
have no-slip surfaces.

.. note:: A warning occurs if partial slip is defined for an existing component
          with turbulence model turned on.

No-slip and partial-slip surfaces require dynamic viscosity, defined under
:menuselection:`Model Setup --> Fluids --> Properties --> Fluid # -->
Viscosity`.

.. index:: wall shear

.. _wallShearMR:

Wall Shear
-------------------------------------------------

Wall shear stresses are modeled by assuming a zero tangential velocity on the
portion of any area closed to flow. This zero tangential velocity is modified at
mesh boundaries with tangential velocities and for the surfaces of moving
objects.

Wall shear stresses are calculated when :guilabel:`Viscous Flow` is activated
in the :menuselection:`Model Setup --> Physics --> Viscosity and Turbulence`
window, and a positive fluid :guilabel:`Viscosity` is specified on the
:menuselection:`Model Setup --> Fluids` widget.

Shear stresses are calculated automatically (but not automatically output) for
no-slip and partial-slip components (i.e., with non-zero friction coefficients)
unless the component :guilabel:`Surface Roughness` coefficient (\
:menuselection:`Model Setup --> Geometry --> Component --> Surface
Properties`) is a negative number. Shear stress can be output by selecting
:guilabel:`Shear Stress` under :menuselection:`Model Setup -->
Output --> Advanced`.

  .. image:: images/model-setup/ModelSetup_OutputAdvanced_v12.*
     :alt: Activate shear stress
     :scale: 90

Component specific shear stress can be output by selecting :guilabel:`Force` 
in the :menuselection:`Output --> Geometry` tab for the component of
interest.

  .. image:: images/model-setup/ModelSetup_OutputGeometry_v12.*
     :alt: Output - Pressure and Shear Force Output
     :scale: 90

Accurately modeling shear stress, strain rate, and the near-wall velocity
profile requires that the mesh be adequately resolved. The first cell adjacent
to a solid component or wall surface is where the logarithmic or laminar wall
velocity profile is applied. The cells along the surface are either normal to
the surface, if the surface is on a grid line, or they contain the wall
surface.

If the flow is :guilabel:`Laminar` (as set in the :guilabel:`Viscosity and
Turbulence` physics subwindow) the velocity profile is calculated via
direct differentiation. The cell average velocity will always be correct, and
the velocity profile is better resolved as the mesh is refined. The optimal cell
size depends only on the required profile accuracy and the tolerated
computational time, both of which increase as the cells get smaller.

If a :guilabel:`Turbulence` model is active, the first cell near the wall or
solid component always gets its velocity according to a logarithmic profile
corresponding to the log-law region shown below. The first cells along the
wall should be sized so that they include the viscous sub-layer and end well
within the log-law region of the boundary layer. If the first cell outer edge
falls in the viscous sub-layer or extends into the outer, or free-stream,
region, then the calculated near-wall velocity and shear stress deviate from
the physical case, where they do not correspond to the log-law relation.

  .. image:: images/model-reference/wall-shear-log-law.*
     :alt: Wall Shear - log-law

Finding a good range of cell sizes is a matter of estimating the height
(thickness) of the boundary layer regions normal to the solid surface. A
helpful value for this is the non-dimensional normal distance from the wall
:math:`{y^ + }`, sometimes referred to as the *viscous length* and illustrated
in relation to dimensionless velocity :math:`{u^ + }` above. In the equations
below, :math:`u_\tau` is the shear velocity, :math:`\tau_w` is the shear
stress on the solid, :math:`y` is the normal distance from the solid,
:math:`{{\rho _f}}` is the fluid density, and :math:`{{\mu _f}}` is the fluid
dynamic (molecular) viscosity.

.. math::

   {y^ + } = \frac{{{u_\tau }y{\rho _f}}}{{{\mu _f}}}

   {u_\tau } = \sqrt {\frac{{{\tau _w}}}{{{\rho _f}}}}

   {u^ + } = \frac{{{u_{stream}}}}{{{u_\tau }}}

In order to estimate :math:`{y^ + }`, the shear stress :math:`\tau_w` must be
estimated manually, and the interested reader is referred to the hydraulics
literature for help with this. In general, :math:`{y^ + }` (as a function of
the cell size) should be greater than 30 (where the inner layer transitions
smoothly into the log-law region) and less than a value that depends on the
Reynolds number of the flow and the thickness of the boundary layer (generally
100 to 500 is a reasonable upper limit). When manual estimation of
:math:`{{\tau _w}}` is impossible, multiple simulations can be used to iterate
toward a 'best fit', where the observed value (shear stress or velocity)
levels off. The approximations used to calculate parameters at solid surfaces
assume that flow is fully developed, and caution should be exercised when
interpreting the results for undeveloped flows.

If the component surface matches the direction of the grid lines then fixed
points should be used at the surface itself and at the appropriate distance from
the surface (so that the first cell distance :math:`y` meets the :math:`{y^ + }`
criteria just explained). If the obstacle surfaces are not parallel to the mesh
grid lines, use nested mesh blocks where appropriate so that the cells nearest
the surfaces are adequately sized. Keep in mind that these guidelines may need
to be ignored for simulations where cubic cells are necessary (as when surface
tension is to be modeled).

.. note:: Shear stresses are affected by the strain rate, which can be added to the 
          :guilabel:`Restart Data` and :guilabel:`Selected Data` output by selecting 
          :menuselection:`Model Setup --> Output --> Additional Output --> Strain Rate`.
          This will  output the strain rate magnitude, defined as the square 
          root of the second invariant of the strain tensor: 
          :math:`\|{e_{ij}}\| = \sqrt{\frac{1}{2}{e_{ij}}{e_{ij}}}`.

.. index:: component roughness

.. _componentRoughnessMR:

Component and Sub-Component Roughness
-------------------------------------------------

Wall shear stresses at object surfaces can be modified by defining surface
roughness. Roughness has the dimensions of length, and is incorporated into
the usual shear stress calculations for :guilabel:`laminar` flow by adding to the molecular viscosity the
product of *fluid_density* :math:`\times` *roughness* :math:`\times`
*relative velocity*, where *relative velocity* means the difference between
the local fluid velocity and the wall velocity (which is zero for stationary
walls and components).

In this implementation the wall shear stress with the :guilabel:`laminar` flow
model is equal to 

.. math:: \frac{\rho \left( {\nu  + k u} \right) u}{\delta y}

where:

* :math:`k` is the roughness, 
* :math:`\nu` is the kinematic viscosity,
* :math:`u` is the *relative velocity*, and 
* :math:`\delta y` is the length scale of interest normal to the surface. 

When the roughness is large enough, the stress is proportional to

.. math:: \frac{\rho u^2 k}{\delta y} .

In the :guilabel:`Turbulent` flow models, the law-of-the-wall relation retains
the same form as for a smooth wall, except the change in viscosity (i.e., from
:math:`\nu` to :math:`\nu + k u`) automatically converts the logarithmic
dependence from a characteristic length scale defined by :math:`\nu /u` to
:math:`k`, when :math:`k` is the larger of the two characteristic lengths.

To make sense in a numerical simulation, the roughness should be smaller than
the grid cell size at the component boundary, although larger values can be
used. The rough component should be assigned a no-slip surface (via a negative
:guilabel:`static friction coefficient`).

In |prod|, the roughness parameter :math:`k` can be defined in three different ways. It can be set individually for
each component under :menuselection:`Model Setup --> Geometry --> Component --> Surface Properties -->
Roughness Height`:

  .. image:: images/model-reference/component_specific_surface_roughness.*
     :alt: Surface Roughness

Roughness can also be set at the sub-component level by defining the surface
roughness values for individual sub-components. If roughness is defined at the 
sub-component level, then these values will overide values set at the component level.

  .. image:: images/model-reference/sub-component-roughness.*
   :alt: Sub-Component Surface Roughness

A spatially varying roughness can also be defined with a raster file by creating a :guilabel:`Surface Roughness` component type. 
See :ref:`surfaceroughnesscomptype` in the model setup section of the help manual for a detailed description. 
If a raster file is used then these values will overide inputs set at the component and sub-component level. 
For any grid cells in the raster defined as NODATA, the underlying component or sub-component roughness values will be applied. 

:guilabel:`Surface Roughness` is defined as the average height of 
uniformly-distributed surface roughness elements, such as the roughness referenced in
Moody diagrams. If the actual surface is uniformly rough, this height can be
applied directly, but if the surface is non-uniform then an *equivalent*
roughness value must be selected that will provide accurate results. For
example, the common Manning's equation relating mean velocity, hydraulic
radius, and hydraulic slope uses an equivalent roughness parameter (Manning's
*n*) that can be converted to |prod|\ 's :guilabel:`Surface Roughness` when the
hydraulic radius associated with the Manning's coefficient is known. Manning's
equation is given as:

.. math:: V = \frac{{1.49}}{n}R_h^{2/3}{S^{1/2}}

where:

* :math:`V` is the mean flow velocity in a channel or conduit, 
* :math:`R_h` is the hydraulic radius (fluid cross-sectional area divided by the wetted perimeter), 
* :math:`S` is the hydraulic slope of the flow, typically (and often incorrectly) assumed to be the physical slope of the conduit or channel, 1.49 is a conversion factor so that all other units are in the meters/kilograms/seconds (SI) system, and 
* :math:`n` is the Manning's roughness.

For non-uniform surfaces, the equivalent uniform roughness can be computed
from Manning's *n* and an estimated hydraulic radius or diameter as shown in
the equation below in which the :guilabel:`Surface Roughness` is the roughness
variable used in |prod|, all variables are in SI units (meters), and the flow
is fully turbulent and hydraulically rough. The hydraulic diameter :math:`D_h`
is defined as four times :math:`R_h` (\ :math:`D_h` = 4 :math:`R_h`).

.. math:: k \cong 3.72067 D_h \: \text{exp} {\left( \frac{ -0.103252 D_h^{1/6}}{n_{manning}} \right)}

The conversion given above is derived from the Swamee-Jain equation for pipes
and equivalent ducts:

.. math:: k \cong 3.7 D_h \left( 0.1^{ \frac{\alpha_{manning} R_{H,EFF}^{1/6} 
            \sqrt{S_b}}{n_{manning} \sqrt{32 g S_f}} } - \frac{5.74}{Re_{D,EFF}^{0.9}} \right)

where the following assumptions are applied:

* :math:`\alpha_{manning}` is 1.486 when :math:`R_H` is in feet while 1.0 if in meter;
* :math:`\frac{S_f}{S_b}` is 1.0 when the assumption of Manning's equations are met;
* :math:`Re_D` is much larger than 5.74;

This is technically valid only for the hydraulic diameter which corresponds to the 
flow stage at which the Manning's *n* was originally measured. The conversion is 
checked as follows: a typical literature value of *n* for mortar concrete is 0.013. 
Assume that *n* was measured in a channel with hydraulic radius 1.25 feet (hydraulic 
diameter of 5 ft), in which case the :guilabel:`Surface Roughness` is 0.0033 feet, 
or about 1 mm, which is also a typical literature value for mortar cement. The
calculated value of the :guilabel:`Surface Roughness` is approximately
for hydraulic diameters between 1 and 10 feet. The limitations in the range of
hydraulic diameters should always be checked.

.. note:: :guilabel:`Surface Roughness` > *0* also turns off superheating of liquid near
          the surface of the component in the phase change model (see
          :ref:`cavitationBubbleFormationMR`).

The value of the :guilabel:`Surface Roughness` does not affect component/fluid
heat transfer. If the component-to-fluid heat flux is to be enhanced due to
surface roughness, use the :guilabel:`Surface Area Multiplier` variable which
works as a heat transfer surface area multiplier for the component. By
default, :guilabel:`Surface Area Multiplier` = 1.0. :guilabel:`Surface Area
Multiplier` = 0 disables the heat exchange between fluid and component, as
well as the component :guilabel:`Mass source` (if used).

.. index::
   single:  Model Reference; Temperature Dependent Viscosity
   single:  Model Reference; Strain Rate Dependent Viscosity

.. _nonNewtonianFluidMR:   

Temperature and Strain Rate Dependent Viscosity
========================================================

Non-Newtonian fluids are any fluid whose viscosity is not constant under
varying flow conditions. Some fluids are shear-thickening and thicken under
shear, while others are shear-thinning, which become less viscous under high
shear. Also, for simulations with varying temperature, viscosity is typically
temperature-dependent. Furthermore, the viscosity of some fluids is 
history-dependent; such fluids are *thixotropic* and require the
:ref:`thixotropicFluidsMR` model.

In |prod|, only Fluid 1 can be non-Newtonian. In two-fluid simulations, To set
up a non-Newtonian fluid, merely activate :guilabel:`Viscous flow` in
:menuselection:`Physics --> Viscosity and turbulence`. Turbulence is typically
not important in non-Newtonian flows; however, turbulence options can also be
selected.  It should be kept in mind that the :ref:`TurbulenceModelsTh` rely
on empiricism that does not take into account non-Newtonian fluid behavior.
Therefore, the turbulence models are usually not valid for non-Newtonian
fluids and should be used with caution for non-Newtonian fluids.

In :menuselection:`Fluids --> Fluid 1 --> Viscosity`, you can
select from a drop-down menu the choice of viscosity models. The default is
:guilabel:`Constant`. Non-Newtonian models include :guilabel:`Temperature
Dependent Table`, :guilabel:`Strain Rate Dependent Table`, :guilabel:`Strain
Rate Dependent Function`, :guilabel:`Strain Rate and Temperature Dependent
Function`, :guilabel:`Carreau Function`, and :guilabel:`Power Law`:

When :guilabel:`Temperature Dependent Table` or :guilabel:`Strain Rate
Dependent Table` are selected, click on the adjacent :guilabel:`Tabular`
button which allows entry of tabular data for viscosity as a function of
temperature or strain rate:

  .. image:: images/model-reference/non-newtonian-strain-rate-dependent-table.*
     :alt: non-newtonian-strain-rate-dependent-table

.. note::
   The user-defined tabular data is converted by the preprocessor into internal data structures 
   that are optimized for use by the solver. The conversion involves remapping of the input table 
   onto new table with equal spacing. The first and last points in the internal table for the 
   temperature- or strain-rate-dependent viscosity are taken from the respective input tables, 
   while the number of points in between is fixed at 10000. Linear interpolation is used during 
   the conversion.

   This approach is typically adequate for smoothly varying data. However, in cases where viscosity 
   varies significantly over a range of temperature or strain rate that is comparable to the 
   spacing of the internal table, the conversion may introduce significant errors. A way around 
   it is to reduce the temperature or strain rate range in the input table as much as possible, 
   thus decreasing the spacing in the internal table to improve the resolution.

When :guilabel:`Strain Rate and Temperature Dependent Function` or
:guilabel:`Strain Rate Dependent Function` is selected, the fluid viscosity is
defined as a function of strain rate and/or temperature with the user-defined
coefficients :math:`\lambda_{00}`, :math:`\lambda_0`, :math:`\lambda_{1}`,
:math:`\lambda_2`, :math:`n` and :math:`\mu_{\infty}`. Temperature-dependency
is defined with constants :math:`a`, :math:`b` and :math:`c`:

  .. image:: images/model-reference/ModelReference_ViscosityfStrain_v12.*
     :alt: non-newtonian-function-coefficients

These coefficients define viscosity with the following constitutive relation:

.. math::

   \mu = \mu_{\infty} + \frac{ \mu_0 E - \mu_{\infty} }{ \lambda_{00} + \left[ \lambda_0 + \frac{1}{2} \left( \lambda_{1} E \right)^2 e_{ij} e_{ij} \right]^{\frac{1-n}{2}} } + \frac{ \lambda_2 }{ \sqrt{ \frac{1}{2} e_{ij} e_{ij} } }

where

.. math::

   E = \text{exp} \left[a \left( \frac{ T^{*} }{T-b} -c \right) \right]

and :math:`\mu_0` is the zero-shear viscosity, defined as the regular constant
viscosity value (next to :guilabel:`Viscosity` in the GUI) and :math:`T^{*}`
is defined as :menuselection:`Fluids --> Properties --> Reference
Temperature`. Selecting the proper coefficients allows the user to employ a
variety of approximations for non-Newtonian fluid behavior.

When the :guilabel:`Carreau Function` option is selected, a simplified function relating viscosity to strain rate is used:

  .. image:: images/model-reference/ModelReference_ViscosityCarreau_v12.*
     :alt: non-newtonian-carreau

Here only parameters related to the Carreau model need to be defined; they are
shown as active in the GUI. This simplifies the viscosity definition for
Carreau-type fluids.

When the :guilabel:`Power Law` model is selected, another simplified function
relating viscosity to strain rate is used:

  .. image:: images/model-reference/ModelReference_ViscosityPowerLaw_v12.*
     :alt: non-newtonian-power-law

Here only parameters related to the power-law model need to be defined; they
are shown as active in the GUI. This simplifies the viscosity definition for
power-law-type fluids.

When any non-Newtonian model is used, the preprocessor will make two
additional plots in the :file:`prpplt` file. One is for dynamic viscosity vs.
strain rate at a given temperature and the other one for viscosity vs.
temperature at a given strain rate. Since it is difficult for the preprocessor
to select the plot ranges and values of the strain rate and temperature at
which to make these plots, users can define these settings using four 
so-called dummy variables as described in the :ref:`UserDefinedVariables` 
section of the :doc:`input-variable-summary-units` chapter:

* :envvar:`DUM1` defines the temperature for which viscosity vs. strain rate will
  be plotted, and is also the center temperature value for the viscosity vs. 
  temperature plot;
* :envvar:`DUM2` defines the plot range, from :envvar:`DUM1`-0.5*\ :envvar:`DUM2`
  to :envvar:`DUM1` + 0.5*\ :envvar:`DUM2`, for the viscosity vs. temperature plot;
* :envvar:`DUM3` defines the strain rate for which viscosity vs. temperature will 
  be plotted, and is also the center strain rate value for the viscosity vs. strain 
  rate plot;
* :envvar:`DUM4` defines the plot range, from :envvar:`DUM3`-0.5*\ :envvar:`DUM4` 
  to :envvar:`DUM3` + 0.5*\ :envvar:`DUM4`, for viscosity vs. strain rate plot.

.. note:: 

   * For strain-rate-dependent viscosity, the primary variable is the strain rate magnitude,
     defined as :math:`\|{e_{ij}}\| = \sqrt{\frac{1}{2}{e_{ij}}{e_{ij}}}`. 
     The same variable is output during simulation as the :guilabel:`Strain rate magnitude`
   * Non-Newtonian fluid flows often occur at low Reynolds numbers. As a result,
     the time-step size may be controlled by viscous shear stress if the
     :guilabel:`Explicit viscous stress solver` is used. To avoid this
     limitation, which may significantly slow down the simulation, an
     :guilabel:`Implicit` viscous stress solver can be used instead by setting
     :menuselection:`Numerics --> Viscous stress solver options --> Successive
     under-relaxation` or :menuselection:`Line implicit`. However, convergence
     may be slow if large viscosity gradients are present in the flow.
   * There is some additional logic in the viscosity calculation that will limit
     the maximum viscosity to approximately :math:`1E+15` to prevent numerical issues. 


.. seealso:: \  

   * Discussion of mesh boundary conditions in :ref:`OutflowBoundaryConditionsTh`.
   * :ref:`thixotropicFluidsMR`
   * :ref:`wallSlipMR`.


.. index::
   single: Model Reference; thixotropic fluids

.. index:: thixotropic fluids

.. _thixotropicFluidsMR:

Thixotropic Fluids
========================================================

Apparent viscosity in a thixotropic fluid is a direct function of time. The
time-dependency is described in |prod| in terms of thinning and thickening
rates which control the speed at which the apparent fluid viscosity approaches
the local steady-state value. The steady-state viscosity is typically a
function of shear rate and possibly temperature. When the steady-state
viscosity is greater than the apparent viscosity, the latter will increase at
this point in the flow at the thickening rate. Conversely, the apparent
viscosity will decrease at the thinning rate when it is greater than the local
steady-state viscosity. Thixotropic fluids are always non-Newtonian, and also
must be defined as such in |prod| (see :ref:`nonNewtonianFluidMR`).

The thixotropic viscosity model is activated by selecting
:menuselection:`Fluids --> Fluid 1 --> Viscosity --> Thixotropic viscosity`:

There are two constants for the rate of relaxation by thinning,
:menuselection:`Fluids --> Properties --> Viscosity --> Thixotropic -->
Constant Thinning Rate`, and thickening, :menuselection:`Constant Thickening Rate`.

  .. image:: images/model-reference/ModelReference_ViscosityThixotropic_v12.*
     :alt: thixotropic-fluid-properties

The rate of thinning, :math:`\alpha`, can also be strain rate dependent if the 
:guilabel:`Strain Rate Sensitivity` coefficient is defined:  

.. math:: \alpha = \mu_{0} + \mu_{1} \sqrt{ \frac{1}{2} e_{ij} e_{ij} }

where:

* :math:`e_{ij} = \frac{1}{2} \left( \frac{\partial u_i}{\partial x_j} + \frac{\partial u_j}{\partial x_i} \right)`,
* :math:`\mu_{0}` is the :guilabel:`Constant Thinning Rate`,
* :math:`\mu_{1}` is the :guilabel:`Strain Rate Sensitivity`,

The :guilabel:`Constant Thinning rate` and :guilabel:`Constant Thickening
rate` have the dimension of reciprocal time, while the 
:guilabel:`Strain Rate Sensitivity` is dimensionless. All rate coefficients default to
0.0 -- i.e., no thixotropic effects.

You must define a non-Newtonian viscosity model (see
:ref:`nonNewtonianFluidMR`) that approximates the desired material behavior
under steady conditions. Use the parameters in the branch
:menuselection:`Fluids --> Properties --> Viscosity` to define the material.
Also specify the :guilabel:`Initial and boundary viscosity` value.

Because the viscosity in thixotropic simulations can become very large, the
:guilabel:`Successive under-relaxation` or :guilabel:`Line implicit` can be
chosen from :menuselection:`Numerics --> Viscous stress solver options`) to
avoid small time-step sizes required by the explicit algorithm for very
viscous flows. 

.. note:: 

   The input and output strain rate is actually the strain rate magnitude,
   :math:`\|{e_{ij}}\| = \sqrt{\frac{1}{2}{e_{ij}}{e_{ij}}}`

.. seealso:: \  \ :ref:`wallSlipMR` and :ref:`nonNewtonianFluidMR`.




.. index::
   single: Model Reference; turbulence

.. index:: turbulence

.. _turbulenceSectionMR:


Turbulence
========================================================

Six choices for viscosity evaluation (turbulence closure) are available in
|prod|. Select the desired evaluation in :menuselection:`Physics --> Viscosity and turbulence`. All
models require the viscosity model to be activated and a positive value of the
dynamic viscosity. Enter viscosity for fluid #1 (and fluid #2, if present) in
:menuselection:`Fluids --> Fluid 1 (or FLuid 2) --> Viscosity` after first activating
:guilabel:`viscous flow`.

  .. image:: images/model-reference/ModelReference_Turbulence_k-w_v12.*
     :alt: Viscosity and Turbulence - Activate viscous flow

See :ref:`TurbulenceModelsTh` section of the :doc:`theory`  chapter for details on each of these models. 

If no initial or boundary conditions for turbulence are specified, then the
initial and boundary values of the turbulent kinetic energy are set by the
program to small values-physically, this represents laminar flow. If the
inflow is truly turbulent, then, as a rule of thumb, the upstream flow
turbulence level is set assuming turbulent velocity fluctuations in the
undisturbed flow equal to 10% of the mean flow velocity. For example, for a
mean upstream velocity of 20 m/s, the magnitude of the turbulent fluctuations
of the velocity, :math:`\mathbf{u'}`, is 2 m/s and the boundary value of the
turbulent kinetic energy (per unit mass) is

.. math::

   E_{turb} = \frac{1}{2} \mathbf{u'} \cdot \mathbf{u'}  = \frac{1}{2} \left( 2 \times 2 \right) = 2 m^2 / s^2

Program defaults are used to set the coefficients that appear in the turbulence
models. The value of these coefficients may be changed as necessary, although it
is not generally recommended.

The :guilabel:`Turbulent mixing length` should be set by the user for the 
one-equation turbulent energy model since the default value, 0.07 of the smallest
domain dimension (excluding any mesh direction which has only 1 cell), may not
be always suitable as it does not include geometry effects or the actual flow
field scales. This parameter describes the characteristic size of the turbulent
eddies present in the flow and is used to define the maximum allowed value of
the turbulent viscosity coefficient.

The :guilabel:`Maximum turbulent mixing length` is used by the 
:guilabel:`Two-equation` \ :math:`k - \varepsilon` :guilabel:`model`, the
:guilabel:`Renormalized group (RNG) model`, and :guilabel:`Two-equation` 
\ :math:`k - \omega` :guilabel:`model` to set a minimum limit on the
turbulent dissipation :math:`\varepsilon` so that the computed turbulent
viscosity does not become excessively large. This value is computed
automatically as a function of time and location during simulation if the
option :guilabel:`Dynamically computed` is selected from the
:menuselection:`Fluids --> Properties --> Viscosity window` (see above).
Alternatively, the user can prescribe a value of the :guilabel:`Maximum
turbulent mixing length` by selecting :guilabel:`Constant` and providing a
value in the adjacent edit box.

The larger the :guilabel:`Maximum turbulent mixing length`, the smaller the
turbulent dissipation may become during the simulation. Since turbulent
dissipation appears in the denominator of the equation for the turbulent
viscosity, the latter can become large as well, especially in flow regions with
small rates of shear. Conversely, smaller values of :guilabel:`Maximum turbulent
mixing length` will result in smaller turbulent viscosity and, therefore, lead
to excessively damped out turbulence.

For example, in a spillway simulation, the length scale used to compute the
:guilabel:`Maximum turbulent mixing length` could be the depth of the flow over
the spillway; in a high pressure die casting, the length scale could be the
smallest width of the runner; for flows in pipes and ducts, the length scale
could be the hydraulic diameter of the flow channel. Once the length scale is
determined :guilabel:`Maximum turbulent mixing length` is computed as 0.07, or
7% of the length scale.

At inflow boundaries, the user can specify turbulent kinetic energy and
dissipation directly. If a value is provided for the turbulent kinetic energy,
but not dissipation, then a value for the dissipation will be automatically
computed based on the value of :guilabel:`Maximum turbulent mixing length`
defined in the edit box, or default value, if one is not provided.

Note that the formulation used for the viscosity evaluation may be changed at
program restarts (see :menuselection:`General --> Restart --> Turbulence`). It
is not recommended to use an implicit viscous algorithm with turbulence models
that involve a solution of turbulent transport equations (:math:`k - \varepsilon`, :guilabel:`RNG`, 
:math:`k -\omega` or :guilabel:`One-equation`) 
since the viscous diffusion terms in these equation are always approximated explicitly. 

  .. image:: images/model-reference/turbulence-restart-options.*
     :alt: turbulence-restart-options

.. seealso:: \  Theory manual section :ref:`TurbulenceModelsTh`. 



.. index:: turbulent diffusion coefficients

.. _turbulenDiffusionCoefficientsMR:


Turbulent Diffusion Coefficients
--------------------------------------------

The diffusion of scalar density, fluid density, and fluid energy are all treated in analogous ways 
by |prod|.  For each of these processes, the total diffusion coefficient is proportional to the dynamic viscosity, 
as shown in the :ref:`GeneralScalarTransportTh` equations :eq:`scalartransport1` and :eq:`scalartransport2`.
The turbulent diffusion multiplier (:envvar:`RMSC`) is defined as the reciprocal of either the turbulent Schmidt 
or turbulent Prandtl numbers. The turbulent Schmidt number is in terms of a dimensionless number that represents 
turbulent mass diffusion processes and is defined as the ratio of momentum diffusivity to mass diffusivity. 
The turbulent Prandtl number is analogous to the turbulent Schmidt number, but for energy diffusion processes. It is 
defined as the ratio of momentum diffusivity to thermal diffusivity. The value of :envvar:`RMSC` is defined separately 
for thermal energy, fluid density and scalar density transport in the diffusion coefficients options 
in :menuselection:`Physics --> Turbulence --> Diffusion coefficients`. These are entered as the :guilabel:`Fluid internal energy`, 
:guilabel:`Fluid density` and :guilabel:`Scalar species`, respectively. Larger values of :envvar:`RMSC` increase the diffusion of 
each of these properties with increased levels of turbulence. 

  .. image:: images/model-reference/turbulence-diff-coeff.*
     :alt: turbulence-diff-coeff

:guilabel:`Scalar species` defines the :envvar:`RMSC` for all scalar transport models. The default value is equal to zero, 
but the user can input a value as the inverse turbulent Schmidt number. This value can also be defined differently for individual 
scalars within :menuselection:`Physics --> Scalar` options. 

:guilabel:`Fluid density` and :guilabel:`Fluid internal energy` are the inputs for :envvar:`RMSC` in the :menuselection:`Variable density` and :menuselection:`Heat transfer` models, respectively. Both of these inputs have default values of 1/0.7 when using the RNG turbulence model :cite:`Yakhot-Smith-1992`. When entering a user defined value for :guilabel:`Fluid density` it is entered as the inverse molecular Schmidt number, and for :guilabel:`Fluid internal energy` as the inverse molecular Prandtl number. These inputs are converted to their respective turbulent diffusion values in |prod| :cite:`Yakhot-Smith-1992`.  For all other turbulence models the default values are equal to 0, and user inputs are defined directly as the inverse of the turbulent Schmidt and Prandtl numbers. 

.. seealso:: 
   * :ref:`GeneralScalarTransportTh`
   * :ref:`DiffusionProcessHeatConductionHeatTransferTh`
   * :ref:`ThermalDiffusionAndSourcesTh`


.. index::
   single: Model Reference; viscous heating

.. index:: viscous heating

.. _viscosityHeatingMR:


Viscous Heating
========================================================

Viscous heating model can be turned on by checking :menuselection:`Physics -->
Viscosity and turbulence --> Activate viscous heating`. Note that
:guilabel:`Viscous flow` must be selected under :guilabel:`Turbulence options`:

  .. image:: images/model-reference/ModelSetup_ViscousHeating_v12.*
     :alt: Viscosity and turbulence - Viscous flow

.. seealso:: \  :ref:`ThermalDiffusionAndSourcesTh` in the Theory manual for more information on this feature. 

.. note:: 
  
   * This option requires an option in :menuselection:`Physics --> Heat transfer` to be activated.
   * Only used if a non-zero dynamic viscosity of a fluid is defined in the :guilabel:`Fluids` section of input.



.. index::
   single: Model Reference; viscosity output

.. index:: viscosity output

.. _viscosityOutputMR:


Viscosity Output
========================================================

Fluid viscosity is automatically saved for post-processing whenever it is a
function of other variables such as temperature, strain rate or turbulence.
Conversely, when viscosity is constant, for example, in a laminar flow of a
Newtonian fluid, it is not generally available for post-processing. The user
can override the default behavior by requesting :guilabel:`Dynamic Viscosity`
in the :guilabel:`Advanced` tab of the :menuselection:`Output`
widget. This function is particularly useful when the FORTRAN routine
:file:`mucal.F90`, where fluid viscosity is computed, has been customized.

  .. image:: images/model-reference/ModelReference_DynamicViscosityOutput_v12.*
     :alt: Additional output
     :scale: 90

.. index::
   single: Model Reference; wind shear stress

.. index:: wind shear stress

.. _windShearStressMR:

========================================================
Wind Shear Stress
========================================================

When modeling large open bodies of water, it is often desirable to include a
wind shear stress on the free surface. This can be done in |prod| for a
horizontal water surface, i.e., the water surface has an outward normal in
+z direction, and the gravity is in -z direction. The flow can be 
two-dimensional (in x-z or y-z plane), three-dimensional, or :ref:`shallow
<shallowWaterFlowsMR>` (depth-averaged flow in x-y plane). The wind shear
stress :math:`{\vec \tau}_s` is calculated using the quadratic law

.. math:: 

   {\vec \tau}_s = {\rho _a}{C'_D}\left| {\vec W_{10}} \right| \, {\vec W_{10}}

where:

* :math:`{\rho _a}` is the density of air,
* :math:`{\vec W_{10}}` is the wind velocity at 10m above water surface, and 
* :math:`{C'_D}` is the wind shear coefficient (or drag coefficient) with a typical value of 0.003.

  .. image:: images/model-reference/wind-shear-stress-wind.*
     :alt: Wind

Wind velocity can be constant or time-variant but must be uniform over the
water surface. Wind parameters are defined in :menuselection:`Physics -->
Wind`. Under :guilabel:`Wind` type, choose :guilabel:`Constant wind` or
:guilabel:`Time variable wind`. If :guilabel:`Constant wind` is selected,
enter :guilabel:`X-velocity` and :guilabel:`Y-velocity` of wind at 10m above
water surface. If, instead, :guilabel:`Time variable wind` is selected, use
:guilabel:`Browse` button to load a user-defined wind data file. The file
should have three columns which from left to right represent time, x velocity
and y velocity of wind at 10m above water surface. The total number of rows in
the file should not exceed 5000. During a simulation, wind velocity at any
time is calculated by linear interpolation. Under :guilabel:`Wind
shear parameters`, define :guilabel:`Wind shear coefficient` (\
:math:`{C'_D}`) and :guilabel:`Air density` (\ :math:`{\rho _a}`). The default
value of :math:`{C'_D}` is 0.003. Finally, it is important to note that the :guilabel:`Wind Shear Stress` model works only for 1 Fluid models with a free surface.


